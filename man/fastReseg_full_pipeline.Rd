% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fastReseg_full_pipeline.R
\name{fastReseg_full_pipeline}
\alias{fastReseg_full_pipeline}
\title{fastReseg_full_pipeline}
\usage{
fastReseg_full_pipeline(
  counts,
  clust = NULL,
  refProfiles = NULL,
  transDF_fileInfo = NULL,
  filepath_coln = "file_path",
  prefix_colns = c("slide", "fov"),
  fovOffset_colns = c("stage_X", "stage_Y"),
  pixel_size = 0.18,
  zstep_size = 0.8,
  transcript_df = NULL,
  transID_coln = NULL,
  transGene_coln = "target",
  cellID_coln = "CellId",
  spatLocs_colns = c("x", "y", "z"),
  invert_y = TRUE,
  extracellular_cellID = NULL,
  flagModel_TransNum_cutoff = 50,
  flagCell_lrtest_cutoff = 5,
  svmClass_score_cutoff = -2,
  svm_args = list(kernel = "radial", scale = FALSE, gamma = 0.4),
  molecular_distance_cutoff = 2.7,
  cellular_distance_cutoff = NULL,
  score_baseline = NULL,
  lowerCutoff_transNum = NULL,
  higherCutoff_transNum = NULL,
  imputeFlag_missingCTs = TRUE,
  groupTranscripts_method = c("dbscan", "delaunay"),
  spatialMergeCheck_method = c("leidenCut", "geometryDiff"),
  cutoff_spatialMerge = 0.5,
  leiden_config = list(objective_function = "CPM", resolution_parameter = 1, beta = 0.01,
    n_iterations = 200),
  config_spatNW_transcript = NULL,
  path_to_output = "reSeg_res",
  transDF_export_option = c(1, 2, 0),
  save_intermediates = TRUE,
  return_perCellData = TRUE,
  combine_extra = FALSE,
  ctrl_genes = NULL,
  seed_process = NULL,
  percentCores = 0.75
)
}
\arguments{
\item{counts}{Counts matrix for entire dataset, cells X genes.}

\item{clust}{Vector of cluster assignments for each cell in \code{counts}, when NULL to automatically assign the cell cluster for each cell based on maximum transcript score of given the provided \code{refProfiles}}

\item{refProfiles}{A matrix of cluster profiles, genes X clusters, default = NULL to use external cluster assignments}

\item{transDF_fileInfo}{a data.frame with each row for each individual file of per FOV transcript data.frame within which the coordinates and CellId are unique, columns include the file path of per FOV transcript data.frame file, annotation columns like slide and fov to be used as prefix when creating unique cell_ID across entire dataset; when NULL, use the provided \code{transcript_df} directly}

\item{filepath_coln}{the column name of each individual file of per FOV transcript data.frame in \code{transDF_fileInfo}}

\item{prefix_colns}{the column names of annotation in \code{transDF_fileInfo}, to be added to the CellId as prefix when creating unique cell_ID for entire dataset; set to NULL if use the original \code{transID_coln} or \code{cellID_coln}}

\item{fovOffset_colns}{the column name of coordinate offsets in 1st and 2nd dimension for each per FOV transcript data.frame in \code{transDF_fileInfo}, unit in micron
Notice that some assays like SMI has XY axes swapped between stage and each FOV such that \code{fovOffset_colns} should be c("stage_Y", "stage_X").}

\item{pixel_size}{the micrometer size of image pixel listed in 1st and 2nd dimension of \code{spatLocs_colns} of each \code{transcript_df}}

\item{zstep_size}{the micrometer size of z-step for the optional 3rd dimension of \code{spatLocs_colns} of each \code{transcript_df}}

\item{transcript_df}{the data.frame of transcript level information with unique CellId, default = NULL to read from the \code{transDF_fileInfo}}

\item{transID_coln}{the column name of transcript_ID in \code{transcript_df}, default = NULL to use row index of transcript in each \code{transcript_df}; when \code{prefix_colns} != NULL, unique transcript_id would be generated from \code{prefix_colns} and \code{transID_coln} in each \code{transcript_df}}

\item{transGene_coln}{the column name of target or gene name in \code{transcript_df}}

\item{cellID_coln}{the column name of cell_ID in \code{transcript_df}; when \code{prefix_colns} != NULL, unique cell_ID would be generated from \code{prefix_colns} and \code{cellID_coln} in each \code{transcript_df}}

\item{spatLocs_colns}{column names for 1st, 2nd and optional 3rd dimension of spatial coordinates in \code{transcript_df}}

\item{invert_y}{flag to invert y axis of local coordinates during stitching (default = TRUE)}

\item{extracellular_cellID}{a vector of cell_ID for extracellular transcripts which would be removed from the resegmention pipeline (default = NULL)}

\item{flagModel_TransNum_cutoff}{the cutoff of transcript number to do spatial modeling for identification of wrongly segmented cells (default = 50)}

\item{flagCell_lrtest_cutoff}{the cutoff of lrtest_nlog10P to identify putative wrongly segemented cells with strong spatial dependency in transcript score profile}

\item{svmClass_score_cutoff}{the cutoff of transcript score to separate between high and low score transcripts in SVM (default = -2)}

\item{svm_args}{a list of arguments to pass to svm function for identifying low-score transcript groups in space, typically involve kernel, gamma, scale}

\item{molecular_distance_cutoff}{maximum molecule-to-molecule distance within connected transcript group, unit in micron (default = 2.7 micron).
If set to NULL, the pipeline would first randomly choose no more than 2500 cells from up to 10 random picked ROIs with search radius to be 5 times of \code{cellular_distance_cutoff}, and then calculate the minimal molecular distance between picked cells. The pipeline would further use the 5 times of 90\% quantile of minimal molecular distance as \code{molecular_distance_cutoff}. This calculation is slow and is not recommended for large transcript data.frame.}

\item{cellular_distance_cutoff}{maximum cell-to-cell distance in x, y between the center of query cells to the center of neighbor cells with direct contact, unit in micron. Default = NULL to use the 2 times of average 2D cell diameter.}

\item{score_baseline}{a named vector of score baseline under each cell type listed in \code{refProfiles} such that  per cell transcript score higher than the baseline is required to call a cell type of high enough confidence; default = NULL to calculate from \code{counts} and \code{refProfiles}}

\item{lowerCutoff_transNum}{a named vector of transcript number cutoff under each cell type such that higher than the cutoff is required to keep query cell as it is; default = NULL to calculate from \code{counts} and \code{refProfiles}}

\item{higherCutoff_transNum}{a named vector of transcript number cutoff under each cell type such that lower than the cutoff is required to keep query cell as it is when there is neighbor cell of consistent cell type; default = NULL to calculate from \code{counts} and \code{refProfiles}}

\item{imputeFlag_missingCTs}{flag to impute \code{score_baseline}, \code{lowerCutoff_transNum},\code{higherCutoff_transNum} for cell types present in \code{refProfiles} but missing in the provided transcript data files or the provided baseline and cutoffs; when TRUE, the median values of existing cell types would be used as the values for missing cell types.}

\item{groupTranscripts_method}{use either "dbscan" or "delaunay method" to group transcripts in space (default = "dbscan")}

\item{spatialMergeCheck_method}{use either "leidenCut" (in 2D or 3D) or "geometryDiff" (in 2D only) method to determine whether a cell pair merging event is allowed in space (default = "leidenCut")}

\item{cutoff_spatialMerge}{spatial constraint on a valid merging event between two source transcript groups, default = 0.5 for 50\% cutoff, set to 0 to skip spatial constraint evaluation for merging.
For \code{spatialMergeCheck_method = "leidenCut"}, this is the minimal percentage of transcripts shared membership between query cell and neighbor cells in leiden clustering results for a valid merging event.
For \code{spatialMergeCheck_method = "geometryDiff"}, this is the maximum percentage of white space change upon merging of query cell and neighbor cell for a valid merging event.}

\item{leiden_config}{(leidenCut) a list of configuration to pass to reticulate and \code{igraph::cluster_leiden} function, including objective_function, resolution_parameter, beta, n_iterations.}

\item{config_spatNW_transcript}{configuration list to create spatial network at transcript level, see manual for \code{createSpatialDelaunayNW_from_spatLocs} for more details, set to NULL to use default config (default = NULL)}

\item{path_to_output}{the file path to output folder where the resegmentation data is saved; directory would be created by function if not exists; transcript data.frame \code{updated_transDF} is saved as individual csv files for each FOV, while cell data of all FOVs, \code{updated_perCellDT} and \code{updated_perCellExprs}, are combined to save as \code{.rds} object.}

\item{transDF_export_option}{option on how to export updated transcript_df, 0 for no export, 1 for write to \code{path_to_output} in disk as csv for each FOV, 2 for return to function as list (default = 1)}

\item{save_intermediates}{flag to save intermediate outputs into output folder, including data.frame for spatial modeling statistics of each cell,}

\item{return_perCellData}{flag to return for gene x cell count matrix and per cell DF with updated mean spatial coordinates and new cell type, also export to output folder in disk when \code{transDF_export_option = 1}.}

\item{combine_extra}{flag to combine original extracellular transcripts and trimmed transcripts back to the updated transcript data.frame, slow process if many transcript in each FOV file. (default = FALSE)}

\item{ctrl_genes}{a vector of control genes that are present in input transcript data.frame but not in \code{refProfiles} and expect no cell type dependency, e.g. negative control probes; the \code{ctrl_genes} would be included in FastReseg analysis. (default = NULL)}

\item{seed_process}{seed for per FOV processing, used in transcript error detection and correction steps, default = NULL to skip the seed}

\item{percentCores}{percent of cores to use for parallel processing (0-1] (default = 0.75)}
}
\value{
a list
\describe{
\item{refProfiles}{a genes X clusters matrix of cluster-specific reference profiles used in resegmenation pipeline}
\item{baselineData}{a list of two matrice in cluster X percentile format for the cluster-specific percentile distribution of per cell value; \code{span_score} is for the average per molecule transcript tLLR score of each cell, \code{span_transNum} is for the transcript number of each cell.}
\item{cutoffs_list}{a list of cutoffs used in resegmentation pipeline, including, \code{score_baseline}, \code{lowerCutoff_transNum}, \code{higherCutoff_transNum}, \code{cellular_distance_cutoff}, \code{molecular_distance_cutoff}}
\item{ctrl_genes}{a vector of control genes whose transcript scores are set to fixed value for all cell types, return when \code{ctrl_genes} is not NULL.}
\item{updated_perCellDT}{a per cell data.table with mean spatial coordinates, new cell type and resegmentation action after resegmentation, return when \code{return_perCellData} = TRUE}
\item{updated_perCellExprs}{a gene x cell count sparse matrix for updated transcript data.frame after resegmentation, return when \code{return_perCellData} = TRUE}
\item{reseg_actions}{a list of 4 elements describing how the resegmenation would be performed on original \code{transcript_df} by the group assignment of transcripts listed in \code{groupDF_ToFlagTrans}, output of \code{decide_ReSegment_Operations} function, return when \code{save_intermediates} = TRUE}
\item{updated_transDF_list}{a list of per-FOV transcript data.frame with updated cell segmenation in \code{updated_cellID} and \code{updated_celltype} columns, return when \code{transDF_export_option = 2}}
}
}
\description{
wrapper for full resegmentation pipeline using internal reference profiles and cutoffs. This function first estimates proper reference profiles and cutoffs from the provided data and then use \code{fastReseg_perFOV_full_process} function to process each transcript data.frame.
}
\details{
The pipeline would first estimate mean profile for each cell cluster based on the provided cell x gene count matrix and cluster assignment for entire data set.
And then, the pipeline would use the estimated cluster-specific profile as reference profiles and calculate suitable cutoff for distance search, transcript number and score in first provided per FOV transcript data frame when those cutoffs are not provided.
When transcript data.frame is provided as multiple file paths in \code{transDF_fileInfo} data.frame, the pipeline would further perform resegmentation on individual transcript data.frame using the baseline and cutoff defined globally.
For each transcript data.frame, the pipeline would score each transcript based on the provided cell type-specific reference profiles, evaluate the goodness-of-fit of each transcript within original cell segment,
identify the low-score transcript groups within cells that has strong spatial dependency in transcript score profile,
evaluate the neighborhood environment of low-score transcript groups and perform resegmentation actions including triming to extracellular space, merging to neighbor cell or labeling as new cell.

To account for genes missing in \code{refProfiles} but present in input transcript data.frame, genes in \code{ctrl_genes} would be assigned with goodness-of-fit score equal to \code{svmClass_score_cutoff} for all cell types to minimize the impact of those genes on the identification of low-score transcript groups via SVM. To avoid significant interference from those \code{ctrl_genes}, it's recommended to have total counts of those genes below 1\% of total counts of all genes in each cell.

The pipeline would save the each per FOV output as individual file in \code{path_to_output} directory; \code{updated_transDF} would be saved as csv file.
When \code{save_intermediates} = TRUE, all intermediate files and resegmenation outputs of each FOV would be saved as single \code{.rds} object which is a list containing the following elements:
\describe{
\item{modStats_ToFlagCells}{a data.frame for spatial modeling statistics of each cell, output of \code{score_cell_segmentation_error} function, save when \code{save_intermediates} = TRUE}
\item{groupDF_ToFlagTrans}{data.frame for the group assignment of transcripts within putative wrongly segmented cells, merged output of \code{flag_bad_transcripts} and \code{groupTranscripts_Delaunay} or \code{groupTranscripts_dbscan} functions, save when \code{save_intermediates} = TRUE}
\item{neighborhoodDF_ToReseg}{a data.frame for neighborhood environment of low-score transcript groups, output of \code{get_neighborhood_content} function, save when \code{save_intermediates} = TRUE}
\item{reseg_actions}{a list of 4 elements describing how the resegmenation would be performed on original \code{transcript_df} by the group assignment of transcripts listed in \code{groupDF_ToFlagTrans}, output of \code{decide_ReSegment_Operations} function, save when \code{save_intermediates} = TRUE}
\item{updated_transDF}{the updated transcript_df with \code{updated_cellID} and \code{updated_celltype} column based on reseg_full_converter, write to disk when \code{transDF_export_option =1}}
\item{updated_perCellDT}{a per cell data.table with mean spatial coordinates, new cell type and resegmentation action after resegmentation, return when \code{return_perCellData} = TRUE}
\item{updated_perCellExprs}{a gene x cell count sparse matrix for updated transcript data.frame after resegmentation, return when \code{return_perCellData} = TRUE}
}
The pipeline would also combine per cell data for all FOVs and return the combined data when \code{return_perCellData} = TRUE; \code{updated_perCellDT} and \code{updated_perCellExprs} would also be saved in a list as single \code{.rds} object in \code{path_to_output} directory when  \code{transDF_export_option = 1}.
\describe{
\item{updated_perCellDT}{a per cell data.table with mean spatial coordinates, new cell type and resegmentation action after resegmentation, return when \code{return_perCellData} = TRUE}
\item{updated_perCellExprs}{a gene x cell count sparse matrix for updated transcript data.frame after resegmentation, return when \code{return_perCellData} = TRUE}
}
}
\examples{
# get example based on example dataset
data("mini_transcriptDF")
data("ori_RawExprs")
data("example_refProfiles")
data("example_baselineCT")
# cell_ID for extracellualr transcripts
extracellular_cellID <- mini_transcriptDF[which(mini_transcriptDF$CellId ==0), 'cell_ID'] 

# case #'1: provide `transcript_df` directly,
# do auto-calculation of distance cutoff from data while using the provided 
# cutoffs for score and transcript numbers.
res1 <- fastReseg_full_pipeline(counts = ori_RawExprs,
                                clust = NULL,
                                refProfiles = example_refProfiles,
                                pixel_size = 1,
                                zstep_size = 1,
                                transcript_df = mini_transcriptDF,
                                transID_coln = "UMI_transID",
                                transGene_coln = "target",
                                cellID_coln = "UMI_cellID",
                                spatLocs_colns = c("x","y","z"),
                                extracellular_cellID = extracellular_cellID,
                                molecular_distance_cutoff = NULL,
                                cellular_distance_cutoff = NULL,
                                score_baseline = example_baselineCT[['score_baseline']],
                                lowerCutoff_transNum = example_baselineCT[['lowerCutoff_transNum']],
                                higherCutoff_transNum= example_baselineCT[['higherCutoff_transNum']],
                                imputeFlag_missingCTs = TRUE,
                                path_to_output = "res1_directDF")

# case #'2: provide file paths to per FOV transcript data files and specify 
# the spatial offset for each FOV,
# do auto-calculation of score and transcript number cutoffs from gene 
# expression matrix, `counts`, and cluster assignment of each cell, `clust`,
# do auto-calculation of distance cutoff from the 1st per FOV transcript data.
data("example_CellGeneExpr")
data("example_clust")

# the example individual transcript files are stored under `data` directory of this package
# update your path accordingly
# Notice that some assays like SMI has XY axes swapped between stage and each FOV;
# coordinates for each FOV should have units in micron
dataDir <- system.file("extdata", package = "FastReseg")
fileInfo_DF <- data.frame(
  file_path = fs::path(dataDir,  
                       c("Run4104_FOV001__complete_code_cell_target_call_coord.csv",
                         "Run4104_FOV002__complete_code_cell_target_call_coord.csv")),
  slide = c(1, 1),
  fov = c(1,2),
  stage_X = 1000*c(5.13, -2.701),
  stage_Y = 1000*c(-0.452, 0.081))

res2 <- fastReseg_full_pipeline(counts = example_CellGeneExpr,
                                clust = example_clust,
                                refProfiles = NULL,
                                transDF_fileInfo =fileInfo_DF,
                                filepath_coln = 'file_path',
                                prefix_colns = c('slide','fov'),
                                
                                # match XY axes between stage and each FOV
                                fovOffset_colns = c('stage_Y','stage_X'), 
                                # 0.18 micron per pixel in transcript data
                                pixel_size = 0.18, 
                                # 0.8 micron per z step in transcript data
                                zstep_size = 0.8, 
                                
                                transcript_df = NULL,
                                
                                # row index as transcript_id
                                transID_coln = NULL, 
                                
                                transGene_coln = "target",
                                cellID_coln = "CellId",
                                spatLocs_colns = c("x","y","z"),
                                
                                # CellId = 0 means extracelluar transcripts in raw data
                                extracellular_cellID = c(0), 
                                
                                molecular_distance_cutoff = NULL,
                                cellular_distance_cutoff = NULL,
                                score_baseline = NULL,
                                lowerCutoff_transNum = NULL,
                                higherCutoff_transNum= NULL,
                                imputeFlag_missingCTs = TRUE,
                                path_to_output = "res2_multiFiles")

# case #'3: provide file paths to per FOV transcript data files and specify 
# the spatial offset for each FOV,
# do auto-calculation of score and transcript number cutoffs from gene 
# expression matrix, `counts`, and cluster-specific reference profiles, `refProfiles`,
# use the provided distance cutoff for `molecular_distance_cutoff` but 
# calculate the `cellular_distance_cutoff`
res3 <- fastReseg_full_pipeline(counts = example_CellGeneExpr,
                                clust = NULL,
                                refProfiles = example_refProfiles,
                                transDF_fileInfo =fileInfo_DF,
                                filepath_coln = 'file_path',
                                prefix_colns = c('slide','fov'),
                                fovOffset_colns = c('stage_Y','stage_X'), 
                                pixel_size = 0.18, 
                                zstep_size = 0.8, 
                                transcript_df = NULL,
                                transID_coln = NULL, 
                                transGene_coln = "target",
                                cellID_coln = "CellId",
                                spatLocs_colns = c("x","y","z"),
                                extracellular_cellID = c(0), 
                                molecular_distance_cutoff = 2.7,
                                cellular_distance_cutoff = NULL,
                                score_baseline = NULL,
                                lowerCutoff_transNum = NULL,
                                higherCutoff_transNum= NULL,
                                imputeFlag_missingCTs = TRUE,
                                path_to_output = "res3_multiFiles")
}
