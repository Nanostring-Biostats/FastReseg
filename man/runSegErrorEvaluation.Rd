% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runSegErrorEvaluation.R
\name{runSegErrorEvaluation}
\alias{runSegErrorEvaluation}
\title{runSegErrorEvaluation}
\usage{
runSegErrorEvaluation(
  score_GeneMatrix,
  transcript_df,
  cellID_coln = "UMI_cellID",
  transID_coln = "UMI_transID",
  transGene_coln = "target",
  spatLocs_colns = c("x", "y", "z"),
  flagModel_TransNum_cutoff = 50
)
}
\arguments{
\item{score_GeneMatrix}{the gene x cell-type matrix of log-like score of gene in each cell type}

\item{transcript_df}{the data.frame of transcript_ID, cell_ID, score, spatial coordinates}

\item{cellID_coln}{the column name of cell_ID in transcript_df}

\item{transID_coln}{the column name of transcript_ID in transcript_df}

\item{transGene_coln}{the column name of target or gene name in transcript_df}

\item{spatLocs_colns}{column names for 1st, 2nd and optional 3rd dimension of spatial coordinates in transcript_df}

\item{flagModel_TransNum_cutoff}{the cutoff of transcript number to do spatial modeling for identification of wrongly segmented cells (default = 50)}

\item{score_coln}{the column name of score in transcript_df}
}
\value{
a list of two elements
#' \enumerate{
\item{modStats_ToFlagCells, a data.frame contains evaluation model statistics in columns for each cell's potential to have segmentation error}
\item{transcript_df, transcript data.frame with 2 additional columns: \code{tLLR_maxCellType} for cell types of maxmium transcript score under current segments and \code{score_tLLR_maxCellType} for the corresponding transcript score for each transcript}
}
}
\description{
modular wrapper to flag cell segmentation error
}
\examples{
data("mini_transcriptDF")
data("example_CellGeneExpr")
data("example_refProfiles")
score_GeneMatrix <- scoreGenesInRef(
  genes = intersect(colnames(example_CellGeneExpr), rownames(example_refProfiles)), 
  ref_profiles = pmax(example_refProfiles, 1e-5))

res <- runSegErrorEvaluation(
  score_GeneMatrix= score_GeneMatrix, 
  transcript_df = mini_transcriptDF, 
  cellID_coln = 'UMI_cellID', 
  transID_coln = 'UMI_transID',
  transGene_coln = 'target',
  spatLocs_colns = c('x','y','z'),
  #' cutoff of transcript number to do spatial modeling
  flagModel_TransNum_cutoff = 50) 
}
