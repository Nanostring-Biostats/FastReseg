% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fastReseg_flag_all_errors.R
\name{fastReseg_flag_all_errors}
\alias{fastReseg_flag_all_errors}
\title{fastReseg_flag_all_errors}
\usage{
fastReseg_flag_all_errors(
  counts,
  clust = NULL,
  refProfiles = NULL,
  transDF_fileInfo = NULL,
  filepath_coln = "file_path",
  prefix_colns = c("slide", "fov"),
  fovOffset_colns = c("stage_X", "stage_Y"),
  pixel_size = 0.18,
  zstep_size = 0.8,
  transcript_df = NULL,
  transID_coln = NULL,
  transGene_coln = "target",
  cellID_coln = "CellId",
  spatLocs_colns = c("x", "y", "z"),
  extracellular_cellID = NULL,
  flagModel_TransNum_cutoff = 50,
  flagCell_lrtest_cutoff = 5,
  svmClass_score_cutoff = -2,
  svm_args = list(kernel = "radial", scale = FALSE, gamma = 0.4),
  path_to_output = "reSeg_res",
  transDF_export_option = c(1, 2, 0),
  return_trimmed_perCell = FALSE,
  combine_extra = FALSE,
  ctrl_genes = NULL,
  seed_transError = NULL,
  percentCores = 0.75
)
}
\arguments{
\item{counts}{Counts matrix for entire data set, cells X genes.}

\item{clust}{Vector of cluster assignments for each cell in \code{counts}, when NULL to automatically assign the cell cluster for each cell based on maximum transcript score of given the provided \code{refProfiles}}

\item{refProfiles}{A matrix of cluster profiles, genes X clusters, default = NULL to use external cluster assignments}

\item{transDF_fileInfo}{a data.frame with each row for each individual file of per FOV transcript data.frame within which the coordinates and CellId are unique, columns include the file path of per FOV transcript data.frame file, annotation columns like slide and fov to be used as prefix when creating unique cell_ID across entire data set; when NULL, use the provided \code{transcript_df} directly}

\item{filepath_coln}{the column name of each individual file of per FOV transcript data.frame in \code{transDF_fileInfo}}

\item{prefix_colns}{the column names of annotation in \code{transDF_fileInfo}, to be added to the CellId as prefix when creating unique cell_ID for entire data set; set to NULL if use the original \code{transID_coln} or \code{cellID_coln}}

\item{fovOffset_colns}{the column name of coordinate offsets in 1st and 2nd dimension for each per FOV transcript data.frame in \code{transDF_fileInfo}, unit in micron
Notice that some assays like SMI has XY axes swapped between stage and each FOV such that \code{fovOffset_colns} should be c("stage_Y", "stage_X").}

\item{pixel_size}{the micrometer size of image pixel listed in 1st and 2nd dimension of \code{spatLocs_colns} of each \code{transcript_df}}

\item{zstep_size}{the micrometer size of z-step for the optional 3rd dimension of \code{spatLocs_colns} of each \code{transcript_df}}

\item{transcript_df}{the data.frame of transcript level information with unique CellId, default = NULL to read from the \code{transDF_fileInfo}}

\item{transID_coln}{the column name of transcript_ID in \code{transcript_df}, default = NULL to use row index of transcript in each \code{transcript_df}; when \code{prefix_colns} != NULL, unique transcript_id would be generated from \code{prefix_colns} and \code{transID_coln} in each \code{transcript_df}}

\item{transGene_coln}{the column name of target or gene name in \code{transcript_df}}

\item{cellID_coln}{the column name of cell_ID in \code{transcript_df}; when \code{prefix_colns} != NULL, unique cell_ID would be generated from \code{prefix_colns} and \code{cellID_coln} in each \code{transcript_df}}

\item{spatLocs_colns}{column names for 1st, 2nd and optional 3rd dimension of spatial coordinates in \code{transcript_df}}

\item{extracellular_cellID}{a vector of cell_ID for extracellular transcripts which would be removed from the resegmention pipeline (default = NULL)}

\item{flagModel_TransNum_cutoff}{the cutoff of transcript number to do spatial modeling for identification of wrongly segmented cells (default = 50)}

\item{flagCell_lrtest_cutoff}{the cutoff of \code{lrtest_nlog10P} to identify putative wrongly segmented cells with strong spatial dependency in transcript score profile}

\item{svmClass_score_cutoff}{the cutoff of transcript score to separate between high and low score transcripts in SVM (default = -2)}

\item{svm_args}{a list of arguments to pass to svm function for identifying low-score transcript groups in space, typically involve kernel, gamma, scale}

\item{path_to_output}{the file path to output folder; directory would be created by function if not exists; \code{flagged_transDF}, the reformatted transcript data.frame with transcripts of low goodness-of-fit flagged by\code{ SVM_class = 0}, and \code{modStats_ToFlagCells}, the per cell evaluation output of segmentation error, and \code{classDF_ToFlagTrans}, the class assignment of transcripts within each flagged cells are saved as individual csv files for each FOV, respectively.}

\item{transDF_export_option}{option on how to export updated transcript_df, 0 for no export, 1 for write to \code{path_to_output} in disk as csv for each FOV, 2 for return to function as list (default = 1)}

\item{return_trimmed_perCell}{flag to return a gene x cell count sparse matrix where all putative contaminating transcripts are trimmed (default = FALSE)}

\item{combine_extra}{flag to combine original extracellular transcripts back to the flagged transcript data.frame. (default = FALSE)}

\item{ctrl_genes}{a vector of control genes that are present in input transcript data.frame but not present in \code{counts} or \code{refProfiles}; the \code{ctrl_genes} would be included in FastReseg analysis. (default = NULL)}

\item{seed_transError}{seed for transcript error detection step, default = NULL to skip the seed}

\item{percentCores}{percent of cores to use for parallel processing (0-1] (default = 0.75)}
}
\value{
a list
\describe{
\item{refProfiles}{a genes * clusters matrix of cluster-specific reference profiles used in resegmenation pipeline}
\item{baselineData}{a list of two matrices in cluster * percentile format for the cluster-specific percentile distribution of per cell value; \code{span_score} is for the average per molecule transcript tLLR score of each cell, \code{span_transNum} is for the transcript number of each cell.}
\item{ctrl_genes}{a vector of control genes whose transcript scores are set to fixed value for all cell types, return when \code{ctrl_genes} is not NULL.}
\item{combined_modStats_ToFlagCells}{a data.frame for spatial modeling statistics of each cell for all cells in the data set, output of \code{score_cell_segmentation_error} function}
\item{combined_flaggedCells}{a list with each element to be a vector of \code{UMI_cellID} for cells flagged for potential cell segmentation errors within each FOV}
\item{trimmed_perCellExprs}{a gene x cell count sparse matrix where all putative contaminating transcripts are trimmed, return when \code{return_trimmed_perCell} = TRUE}
\item{flagged_transDF_list}{a list of per-FOV transcript data.frame with flagging information in \code{SVM_class} column, return when \code{transDF_export_option = 2}}
}
}
\description{
Wrapper to process multiple files of one dataset for segmentation error detection in transcript level. The function reformats the individual transcript data.frame to have unique IDs and a global coordinate system and save into disk, then scores each cell for segmentation error and flags transcripts that have low goodness-of-fit to current cells.
}
\details{
The function would first estimate mean profile for each cell cluster based on the provided cell x gene count matrix and cluster assignment for entire data set.
And then, the function would use the estimated cluster-specific profile as reference profiles when not provided.
For each transcript data.frame, the function would score each transcript based on the provided cell type-specific reference profiles, evaluate the goodness-of-fit of each transcript within original cell segment, and identify the low-score transcript groups within cells that has strong spatial dependency in transcript score profile.
When \code{transDF_export_option =1}, the function would save the each per FOV output as individual file in \code{path_to_output} directory; \code{flagged_transDF}, \code{modStats_ToFlagCells} and \code{classDF_ToFlagTrans} would be saved as csv file, respectively.
\describe{
\item{flagged_transDF}{a transcript data.frame for each FOV, with columns for unique IDs of transcripts \code{UMI_transID} and cells \code{UMI_cellID}, for global coordinate system \code{x}, \code{y}, \code{z}, and for the goodness-of-fit in original cell segment \code{SMI_class}; the original per FOV cell ID and pixel/index-based coordinates systems are saved under columns, \code{CellId}, \code{pixel_x}, \code{pixel_y}, \code{idx_z}}
\item{modStats_ToFlagCells}{a data.frame for spatial modeling statistics of each cell, output of \code{score_cell_segmentation_error} function}
\item{classDF_ToFlagTrans}{data.frame for the class assignment of transcripts within putative wrongly segmented cells, output of \code{flag_bad_transcripts} functions}
}

To account for genes missing in \code{refProfiles} but present in input transcript data.frame, genes in \code{ctrl_genes} would be assigned with goodness-of-fit score equal to \code{svmClass_score_cutoff} for all cell types to minimize the impact of those genes on the identification of low-score transcript groups via SVM. To avoid significant interference from those \code{ctrl_genes}, it's recommended to have total counts of those genes below 1\% of total counts of all genes in each cell.
}
\examples{
data("mini_transcriptDF")
data("ori_RawExprs")
data("example_refProfiles")
data("example_baselineCT")
# cell_ID for extracellualr transcripts
extracellular_cellID <- mini_transcriptDF[which(mini_transcriptDF$CellId ==0), 'cell_ID'] 

# case #'1: provide `transcript_df` directly,
# do auto cluster assignment of each cell based on gene expression matrix, 
# `counts`, and cluster-specific reference profiles, `refProfiles`
res1 <- fastReseg_flag_all_errors(counts = ori_RawExprs,
                                  clust = NULL,
                                  refProfiles = example_refProfiles,
                                  pixel_size = 1,
                                  zstep_size = 1,
                                  transcript_df = mini_transcriptDF,
                                  transID_coln = "UMI_transID",
                                  transGene_coln = "target",
                                  cellID_coln = "UMI_cellID",
                                  spatLocs_colns = c("x","y","z"),
                                  extracellular_cellID = extracellular_cellID,
                                  path_to_output = "res1f_directDF")

# case #'2: provide file paths to per FOV transcript data files and specify 
# the spatial offset for each FOV,
# do auto-calculation of cluster-specific reference profiles from gene 
# expression matrix, `counts`, and cluster assignment of each cell, `clust`.
data("example_CellGeneExpr")
data("example_clust")

# the example individual transcript files are stored under `data` directory of this package
# update your path accordingly
# Notice that some assays like SMI has XY axes swapped between stage and each FOV;
# coordinates for each FOV should have units in micron
dataDir <- system.file("extdata", package = "FastReseg")
fileInfo_DF <- data.frame(
  file_path = fs::path(dataDir,
                       c("Run4104_FOV001__complete_code_cell_target_call_coord.csv",
                         "Run4104_FOV002__complete_code_cell_target_call_coord.csv")),
  slide = c(1, 1),
  fov = c(1,2),
  stage_X = 1000*c(5.13, -2.701),
  stage_Y = 1000*c(-0.452, 0.081))

res2 <- fastReseg_flag_all_errors(counts = example_CellGeneExpr,
                                  clust = example_clust,
                                  refProfiles = NULL,
                                  transDF_fileInfo =fileInfo_DF,
                                  filepath_coln = 'file_path',
                                  prefix_colns = c('slide','fov'),
                                  
                                  # match XY axes between stage and each FOV
                                  fovOffset_colns = c('stage_Y','stage_X'), 
                                  # 0.18 micron per pixel in transcript data
                                  pixel_size = 0.18, 
                                  # 0.8 micron per z step in transcript data
                                  zstep_size = 0.8, 
                                  
                                  transcript_df = NULL,
                                  
                                  # row index as transcript_id
                                  transID_coln = NULL, 
                                  
                                  transGene_coln = "target",
                                  cellID_coln = "CellId",
                                  spatLocs_colns = c("x","y","z"),
                                  
                                  # CellId = 0 means extracelluar transcripts in raw data
                                  extracellular_cellID = c(0), 
                                  
                                  path_to_output = "res2f_multiFiles")
}
