% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runPreprocess.R
\name{runPreprocess}
\alias{runPreprocess}
\title{runPreprocess}
\usage{
runPreprocess(
  counts,
  clust = NULL,
  refProfiles = NULL,
  score_baseline = NULL,
  lowerCutoff_transNum = NULL,
  higherCutoff_transNum = NULL,
  imputeFlag_missingCTs = TRUE,
  ctrl_genes = NULL,
  svmClass_score_cutoff = -2,
  molecular_distance_cutoff = 2.7,
  cellular_distance_cutoff = NULL,
  transcript_df = NULL,
  transDF_fileInfo = NULL,
  filepath_coln = "file_path",
  prefix_colns = c("slide", "fov"),
  fovOffset_colns = c("stage_X", "stage_Y"),
  pixel_size = 0.18,
  zstep_size = 0.8,
  transID_coln = NULL,
  transGene_coln = "target",
  cellID_coln = "CellId",
  spatLocs_colns = c("x", "y", "z"),
  extracellular_cellID = NULL
)
}
\arguments{
\item{counts}{Counts matrix for entire dataset, cells X genes.}

\item{clust}{Vector of cluster assignments for each cell in \code{counts}, when NULL to automatically assign the cell cluster for each cell based on maximum transcript score of given the provided \code{refProfiles}}

\item{refProfiles}{A matrix of cluster profiles, genes X clusters, default = NULL to use external cluster assignments.
Of note, when \code{refProfiles !=  NULL}, genes unique to \code{counts} but missing in \code{refProfiles} would be omitted from downstream analysis.}

\item{score_baseline}{a named vector of score baseline under each cell type listed in \code{refProfiles} such that  per cell transcript score higher than the baseline is required to call a cell type of high enough confidence; default = NULL to calculate from \code{counts} and \code{refProfiles}}

\item{lowerCutoff_transNum}{a named vector of transcript number cutoff under each cell type such that higher than the cutoff is required to keep query cell as it is; default = NULL to calculate from \code{counts} and \code{refProfiles}}

\item{higherCutoff_transNum}{a named vector of transcript number cutoff under each cell type such that lower than the cutoff is required to keep query cell as it is when there is neighbor cell of consistent cell type; default = NULL to calculate from \code{counts} and \code{refProfiles}}

\item{imputeFlag_missingCTs}{flag to impute \code{score_baseline}, \code{lowerCutoff_transNum},\code{higherCutoff_transNum} for cell types present in \code{refProfiles} but missing in the provided transcript data files or the provided baseline and cutoffs; when TRUE, the median values of existing cell types would be used as the values for missing cell types.}

\item{ctrl_genes}{a vector of control genes that are present in input transcript data.frame but not in \code{refProfiles} and expect no cell type dependency, e.g. negative control probes; the \code{ctrl_genes} would be included in FastReseg analysis. (default = NULL)}

\item{svmClass_score_cutoff}{the cutoff of transcript score to separate between high and low score transcripts in SVM, used as the score values for \code{ctrl_genes} (default = -2)}

\item{molecular_distance_cutoff}{maximum molecule-to-molecule distance within connected transcript group, unit in micron (default = 2.7 micron).
If set to NULL, the pipeline would first randomly choose no more than 2500 cells from up to 10 random picked ROIs with search radius to be 5 times of \code{cellular_distance_cutoff}, and then calculate the minimal molecular distance between picked cells. The pipeline would further use the 5 times of 90\% quantile of minimal molecular distance as \code{molecular_distance_cutoff}. This calculation is slow and is not recommended for large transcript data.frame.}

\item{cellular_distance_cutoff}{maximum cell-to-cell distance in x, y between the center of query cells to the center of neighbor cells with direct contact, unit in micron. Default = NULL to use the 2 times of average 2D cell diameter.}

\item{transcript_df}{the data.frame of transcript level information with unique CellId, default = NULL to read from the \code{transDF_fileInfo}}

\item{transDF_fileInfo}{a data.frame with each row for each individual file of per FOV transcript data.frame within which the coordinates and CellId are unique, columns include the file path of per FOV transcript data.frame file, annotation columns like slide and fov to be used as prefix when creating unique cell_ID across entire dataset; when NULL, use the provided \code{transcript_df} directly}

\item{prefix_colns}{the column names of annotation in \code{transDF_fileInfo}, to be added to the CellId as prefix when creating unique cell_ID for entire dataset; set to NULL if use the original \code{transID_coln} or \code{cellID_coln}}

\item{fovOffset_colns}{the column name of coordinate offsets in 1st and 2nd dimension for each per FOV transcript data.frame in \code{transDF_fileInfo}, unit in micron
Notice that some assays like SMI has XY axes swapped between stage and each FOV such that \code{fovOffset_colns} should be c("stage_Y", "stage_X").}

\item{pixel_size}{the micrometer size of image pixel listed in 1st and 2nd dimension of \code{spatLocs_colns} of each \code{transcript_df}}

\item{zstep_size}{the micrometer size of z-step for the optional 3rd dimension of \code{spatLocs_colns} of each \code{transcript_df}}

\item{transID_coln}{the column name of transcript_ID in \code{transcript_df}, default = NULL to use row index of transcript in each \code{transcript_df}; when \code{prefix_colns} != NULL, unique transcript_id would be generated from \code{prefix_colns} and \code{transID_coln} in each \code{transcript_df}}

\item{transGene_coln}{the column name of target or gene name in \code{transcript_df}}

\item{cellID_coln}{the column name of cell_ID in \code{transcript_df}; when \code{prefix_colns} != NULL, unique cell_ID would be generated from \code{prefix_colns} and \code{cellID_coln} in each \code{transcript_df}}

\item{spatLocs_colns}{column names for 1st, 2nd and optional 3rd dimension of spatial coordinates in \code{transcript_df}}

\item{extracellular_cellID}{a vector of cell_ID for extracellular transcripts which would be removed from the resegmention pipeline (default = NULL)}

\item{filepath_fov_coln}{the column name of each individual file of per FOV transcript data.frame in \code{transDF_fileInfo}}
}
\value{
a nested list
\describe{
\item{clust}{vector of cluster assignments for each cell in \code{counts}, used in caculating \code{baselineData}}
\item{refProfiles}{a genes X clusters matrix of cluster-specific reference profiles to use in resegmenation pipeline}
\item{baselineData}{a list of two matrice in cluster X percentile format for the cluster-specific percentile distribution of per cell value; \code{span_score} is for the average per molecule transcript tLLR score of each cell, \code{span_transNum} is for the transcript number of each cell.}
\item{cutoffs_list}{a list of cutoffs to use in resegmentation pipeline, including, \code{score_baseline}, \code{lowerCutoff_transNum}, \code{higherCutoff_transNum}, \code{cellular_distance_cutoff}, \code{molecular_distance_cutoff}}
\item{ctrl_genes}{a vector of control genes whose transcript scores are set to fixed value for all cell types, return when \code{ctrl_genes} is not NULL.}
\item{score_GeneMatrix}{a gene x cell-type score matrix to use in resegmenation pipeline, the scores for \code{ctrl_genes} are set to be the same as \code{svmClass_score_cutoff}}
\item{processed_1st_transDF}{a list of 2 elements for the intracellular and extracellular transcript data.frame of the processed outcomes of 1st transcrip file}
}
The \code{cutoffs_list} is a list containing
\describe{
\item{score_baseline}{a named vector of score baseline under each cell type listed in \code{refProfiles} such that  per cell transcript score higher than the baseline is required to call a cell type of high enough confidence.}
\item{lowerCutoff_transNum}{a named vector of transcript number cutoff under each cell type such that higher than the cutoff is required to keep query cell as it is.}
\item{higherCutoff_transNum}{a named vector of transcript number cutoff under each cell type such that lower than the cutoff is required to keep query cell as it is when there is neighbor cell of consistent cell type.}
\item{cellular_distance_cutoff}{maximum cell-to-cell distance in x, y between the center of query cells to the center of neighbor cells with direct contact, unit in micron. }
\item{molecular_distance_cutoff}{maximum molecule-to-molecule distance within connected transcript group, unit in micron.}
}
}
\description{
modular wrapper to get baseline data and cutoffs from entire dataset
}
\examples{
 
data("mini_transcriptDF")
data("example_CellGeneExpr")
data("example_clust")
data("example_refProfiles")
extracellular_cellID <- mini_transcriptDF[which(mini_transcriptDF$CellId ==0), 'cell_ID'] # cell_ID for extracellualr transcripts

# case 1: use `clust` and `transcript_df` directly, with known distance cutoffs
prep_res1 <- runPreprocess(
  counts = example_CellGeneExpr,
  clust = example_clust,
  refProfiles = NULL,
  score_baseline = NULL,
  lowerCutoff_transNum = NULL,
  higherCutoff_transNum= NULL,
  imputeFlag_missingCTs = FALSE,
  ctrl_genes = NULL,
  svmClass_score_cutoff = -2,
  molecular_distance_cutoff = 2.7,
  cellular_distance_cutoff = 20,
  transcript_df = mini_transcriptDF, 
  transDF_fileInfo = NULL, 
  pixel_size = 0.18,
  zstep_size = 0.8, 
  transID_coln = NULL,
  transGene_coln = "target",
  cellID_coln = 'CellId',
  spatLocs_colns = c('x','y','z'),
  extracellular_cellID = 0 
)
# case 2: use `refProfiles` to get `clust`, use `transcript_df` directly, unknown distance cutoffs
prep_res2 <- runPreprocess(
  counts = example_CellGeneExpr,
  clust = NULL,
  refProfiles = example_refProfiles,
  score_baseline = NULL,
  lowerCutoff_transNum = NULL,
  higherCutoff_transNum= NULL,
  imputeFlag_missingCTs = TRUE, # impute for cell types missing in provided 'transcript_df' 
  ctrl_genes = NULL,
  svmClass_score_cutoff = -2,
  molecular_distance_cutoff = NULL,
  cellular_distance_cutoff = NULL,
  transcript_df = mini_transcriptDF, 
  transDF_fileInfo = NULL, 
  pixel_size = 0.18,
  zstep_size = 0.8, 
  transID_coln = NULL,
  transGene_coln = "target",
  cellID_coln = 'CellId',
  spatLocs_colns = c('x','y','z'),
  extracellular_cellID = 0 
)
# case 3: provide both `refProfiles` and `clust`, use transDF_fileInfo for multi-files, no known molecular distance cutoffs
transDF_fileInfo <- data.frame(file_path = c("data/Run4104_FOV001__complete_code_cell_target_call_coord.csv",
                                             "data/Run4104_FOV002__complete_code_cell_target_call_coord.csv"),
                               slide = c(1, 1),
                               fov = c(1,2),
                               stage_X = 1000*c(5.13, -2.701),
                               stage_Y = 1000*c(-0.452, 0.081))
prep_res3 <- runPreprocess(
  counts = example_CellGeneExpr,
  clust = example_clust,
  refProfiles = example_refProfiles,
  score_baseline = NULL,
  lowerCutoff_transNum = NULL,
  higherCutoff_transNum= NULL,
  imputeFlag_missingCTs = TRUE,
  ctrl_genes = NULL,
  svmClass_score_cutoff = -2,
  molecular_distance_cutoff = NULL,
  cellular_distance_cutoff = 20,
  transcript_df = NULL, 
  transDF_fileInfo = transDF_fileInfo, 
  filepath_coln = 'file_path', 
  prefix_colns = c('slide','fov'), 
  fovOffset_colns = c('stage_X','stage_Y'), 
  pixel_size = 0.18,
  zstep_size = 0.8, 
  transID_coln = NULL,
  transGene_coln = "target",
  cellID_coln = 'CellId',
  spatLocs_colns = c('x','y','z'),
  extracellular_cellID = 0 
)
}
