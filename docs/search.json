[{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"fastreseg-workflow-diagram","dir":"Articles","previous_headings":"","what":"FastReseg workflow diagram","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"FastReseg package processes spatial transcriptome data 5 different modules provides 3 wrapper functions streamline processing multi-FOV dataset different exit points.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"required inputs include: counts: cell--gene counts matrix entire dataset. clust: vector cluster assignments cell counts; use NULL automatically assign cell cluster cell based maximum transcript score given provided refProfiles. refProfiles: gene--cluster matrix cluster-specific expression profiles; default = NULL use external cluster assignments. transDF_fileInfo: data.frame row individual file per-FOV transcript data.frame, columns include file path per FOV transcript data.frame file, annotation columns like slide fov used prefix creating unique cell_ID across entire dataset. NULL, use transcript data.frame transcript_df directly. must least one clust refProfiles provided run FastReseg pipeline. spatial coordinates distance units micron consistency. Please refer example data coming package see looks like. example per-FOV transcript data.frame necessary columns : target gene name; x, y optional z spatial coordinates transcript; UMI_cellID cell ids current cell segmentation must unique across FOVs dataset; available, prepare_perFOV_transDF() function use per-FOV unique CellId provided prefix_colns = c('slide', 'fov') generate UMI_cellID unique across entire dataset. Pipeline wrappers, fastReseg_flag_all_errors() fastReseg_full_pipeline(), also generate unique cell ids manner multiple files listed transDF_fileInfo. UMI_transID: transcript ids unique across dataset; default, prepare_perFOV_transDF() function 2 pipeline wrappers use row index transcript per-FOV transcript data.frame UMI_cellID create UMI_transID unique across entire dataset. mentioned , FastReseg package provides 2 pipeline wrappers streamline multi-FOV processing wrapper go per-FOV transcript data.frame listed transDF_fileInfo stitch FOVs together get data coordinates global system well transcript cell IDs unique across entire dataset. preparing per-FOV data.frame outside pipeline wrappers, one can read per-FOV file process prepare_perFOV_transDF() function get unique IDs cells transcripts well converting local coordinates pixel FOV global coordinate micron entire dataset.","code":"# load example input data from package library(FastReseg)  # get cell-by-gene `counts` data(\"example_CellGeneExpr\") counts <- example_CellGeneExpr  # get cluster assignment `clust` data(\"example_clust\") clust <- example_clust  # get cluster-specific reference profiles `refProfiles` data(\"example_refProfiles\") refProfiles <- example_refProfiles  # create `transDF_fileInfo` for multiple per FOV transcript data.frame  # coordinates for each FOV, `stage_x` and `stage_y`, should have units in micron. dataDir <- system.file(\"extdata\", package = \"FastReseg\") transDF_fileInfo <- data.frame(file_path = fs::path(dataDir,                                                      c(\"Run4104_FOV001__complete_code_cell_target_call_coord.csv\",                                                       \"Run4104_FOV002__complete_code_cell_target_call_coord.csv\")),                                slide = c(1, 1),                                fov = c(1,2),                                stage_X = 1000*c(5.13, -2.701),                                stage_Y = 1000*c(-0.452, 0.081)) #  process 1st file in the `transDF_fileInfo` entry  idx = 1 rawDF <- read.csv(transDF_fileInfo[idx, 'file_path'])  head(rawDF, n = 3L) #>   fov seed_x seed_y         x        y z     std_x     std_y #> 1   1  866.0 1250.5  865.9666 1250.467 1 0.1366284 0.1365927 #> 2   1 1026.8 1250.6 1026.7778 1250.656 1 0.1202107 0.1424117 #> 3   1 1008.0 1250.9 1008.0501 1250.933 1 0.1378334 0.1365927 #>   X95_perc_conf_int_x X95_perc_conf_int_y target target_idx Spot1_count #> 1           0.2867654           0.2866904    AXL         70           1 #> 2           0.1848043           0.2189347   IL16        506           3 #> 3           0.2892946           0.2866905 S100A6        846           1 #>   Spot2_count Spot3_count Spot4_count target_call_observations #> 1           2           2           1                        6 #> 2           2           3           1                        9 #> 3           2           2           1                        6 #>   target_count_per_feature random_call_probability possible_BC_count #> 1                        1             0.002597012                 1 #> 2                        1             0.002597012                 1 #> 3                        1             0.010347653                 4 #>   spots_per_feature multicolor_spots_per_feature call_quality_score CellId #> 1                 4                            0       0.0001604543   2932 #> 2                 4                            0       0.0019040769    864 #> 3                 5                            0       0.0001396453      0 #>   CellComp transcript_id #> 1  Nuclear         11356 #> 2  Nuclear         11359 #> 3        0         11363 transcript_df_all <- prepare_perFOV_transDF(each_transDF = rawDF,                                              fov_centerLocs = unlist(transDF_fileInfo[idx, c('stage_X', 'stage_Y')]),                                             prefix_vals = unlist(transDF_fileInfo[idx, c('slide', 'fov')]),                                              pixel_size = 0.12, # micron per pixel                                              zstep_size = 0.8, # micron per z step                                              transID_coln = NULL, # use row index                                              transGene_coln = 'target', # gene name                                             cellID_coln = 'CellId', # cell label unique at FOV level                                              spatLocs_colns = c('x', 'y', 'z'), # column names for spatial coordinates in pixel for each FOV                                             invert_y = TRUE, # flip Y axis (default = TRUE) between local image coordinate and global stage coordinate                                              extracellular_cellID = 0, # set this to the cell ID for extracellular transcript, use NULL if your data only contains intracellular transcripts                                              drop_original = TRUE) # set to FALSE if want to have columns for original cell ID and spatial coordinates returned in the data.frame  str(transcript_df_all) #> List of 2 #>  $ intraC:'data.frame':  151712 obs. of  6 variables: #>   ..$ UMI_cellID : chr [1:151712] \"c_1_1_2932\" \"c_1_1_864\" \"c_1_1_2923\" \"c_1_1_864\" ... #>   ..$ UMI_transID: chr [1:151712] \"t_1_1_1\" \"t_1_1_2\" \"t_1_1_5\" \"t_1_1_6\" ... #>   ..$ target     : chr [1:151712] \"AXL\" \"IL16\" \"HSP90AA1\" \"MZT2A\" ... #>   ..$ x          : num [1:151712] 5234 5253 5196 5252 5192 ... #>   ..$ y          : num [1:151712] -602 -602 -602 -602 -602 ... #>   ..$ z          : num [1:151712] 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 ... #>  $ extraC:'data.frame':  110792 obs. of  6 variables: #>   ..$ UMI_cellID : chr [1:110792] \"c_1_1_0\" \"c_1_1_0\" \"c_1_1_0\" \"c_1_1_0\" ... #>   ..$ UMI_transID: chr [1:110792] \"t_1_1_3\" \"t_1_1_4\" \"t_1_1_8\" \"t_1_1_10\" ... #>   ..$ target     : chr [1:110792] \"S100A6\" \"IFI27\" \"HLA-A\" \"SOD2\" ... #>   ..$ x          : num [1:110792] 5251 5192 5306 5251 5269 ... #>   ..$ y          : num [1:110792] -602 -602 -602 -602 -603 ... #>   ..$ z          : num [1:110792] 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 ... ## we would focus on intracellular transcripts for downstream segmentation error detection transcript_df <- transcript_df_all[[\"intraC\"]]"},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"pipeline-wrapper-functions-for-streamline-processing","dir":"Articles","previous_headings":"","what":"Pipeline wrapper functions for streamline processing","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"streamline processing big dataset multiple FOVs, one can use pipeline wrapper functions provided FastReseg package without going individual steps discussed later part tutorial. pipeline wrappers preprocess whole dataset level first get appropriate cutoffs, perform segmentation evaluation optional correction FOV, followed combining per FOV data one. Please refer manual pipeline wrapper details section Processing FOV outside core wrapper excerpts example outputs.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"pipeline-wraper-for-cell-level-segmentation-detection-across-multi-fov-dataset","dir":"Articles","previous_headings":"Pipeline wrapper functions for streamline processing","what":"Pipeline wraper for cell-level segmentation detection across multi-FOV dataset","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"common use case FastReseg evaluate current cell segmentation entire multi-FOV dataset identify transcripts poor goodness--fit current cell thus likely arsing potential neighborhood contamination. done fastReseg_flag_all_errors() function. fastReseg_flag_all_errors() function takes similar input arguments prepare_perFOV_transDF() runPreprocess() (discussed section Preprocess whole dataset). dataset preprocessing segmentation error detection. function returns list outputs including combined_modStats_ToFlagCells, data.frame spatial modeling statistics cell-level segmentation evaluation (see section Flag cells putative segmentation errors excerpt), combined_flaggedCells, contains cell IDs cells flagged potential cell segmentation errors dataset. fastReseg_flag_all_errors() function also exports per-FOV outputs 3 individual files per FOV path_to_output directory. One can simply trim transcripts low goodness--fit current segmentation flagged_transDF removing transcripts SVM_class = 0. Conveniently, fastReseg_flag_all_errors() also return trimmed_perCellExprs, gene x cell count matrix putative contaminating transcripts trimmed, return_trimmed_perCell = TRUE.","code":"flagAll_res <- fastReseg_flag_all_errors(   counts = counts,   clust = clust,   refProfiles = NULL,      # Similar to `runPreprocess()`, one can use `clust = NULL` if providing `refProfiles`      transcript_df = NULL,   transDF_fileInfo = transDF_fileInfo,   filepath_coln = 'file_path',   prefix_colns = c('slide','fov'),   fovOffset_colns = c('stage_Y','stage_X'), # match XY axes between stage and each FOV   pixel_size = 0.18,    zstep_size = 0.8,   transID_coln = NULL, # row index as transcript_id   transGene_coln = \"target\",   cellID_coln = \"CellId\",   spatLocs_colns = c(\"x\",\"y\",\"z\"),   extracellular_cellID = c(0),       flagCell_lrtest_cutoff = 5, # cutoff for flagging wrongly segmented cells   svmClass_score_cutoff = -2, # cutoff for low vs. high transcript score   path_to_output = \"res1f_multiFiles\", # path to output folder   return_trimmed_perCell = TRUE, # flag to return per cell expression matrix after trimming all flagged transcripts    ctrl_genes = NULL # name for control probes in transcript data.frame, e.g. negative control probes   )  str(flagAll_res) #>  num [1:960, 1:14] 1.00e-04 3.28e-04 4.19e-04 1.35e-04 8.07e-05 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:960] \"AATK\" \"ABL1\" \"ABL2\" \"ACE\" ... #>   .. ..$ : chr [1:14] \"c\" \"e\" \"f\" \"b\" ... #>  $ baselineData                 :List of 2 #>   ..$ span_score   : num [1:14, 1:5] 0 -1.508 -1.842 -1.806 -0.451 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:14] \"a\" \"b\" \"c\" \"e\" ... #>   .. .. ..$ : chr [1:5] \"0%\" \"25%\" \"50%\" \"75%\" ... #>   ..$ span_transNum: num [1:14, 1:5] 1 9 16 24 58 13 1 18 1 1 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:14] \"a\" \"b\" \"c\" \"e\" ... #>   .. .. ..$ : chr [1:5] \"0%\" \"25%\" \"50%\" \"75%\" ... #>  $ combined_modStats_ToFlagCells:'data.frame':   724 obs. of  9 variables: #>   ..$ transcript_num  : int [1:724] 438 708 405 505 360 406 408 500 538 387 ... #>   ..$ modAlt_rsq      : num [1:724] 0.0497 0.0257 0.0519 0.0122 0.0305 ... #>   ..$ lrtest_ChiSq    : num [1:724] 22.32 18.46 21.57 6.18 11.16 ... #>   ..$ lrtest_Pr       : num [1:724] 0.00792 0.03016 0.01035 0.72192 0.26483 ... #>   ..$ UMI_cellID      : chr [1:724] \"c_1_1_1008\" \"c_1_1_1027\" \"c_1_1_1042\" \"c_1_1_1058\" ... #>   ..$ lrtest_nlog10P  : num [1:724] 2.101 1.52 1.985 0.142 0.577 ... #>   ..$ tLLR_maxCellType: chr [1:724] \"e\" \"e\" \"c\" \"e\" ... #>   ..$ flagged         : logi [1:724] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ file_idx        : int [1:724] 1 1 1 1 1 1 1 1 1 1 ... #>  $ combined_flaggedCells        :List of 2 #>   ..$ : chr [1:34] \"c_1_1_1185\" \"c_1_1_1188\" \"c_1_1_1232\" \"c_1_1_1261\" ... #>   ..$ : chr [1:2] \"c_1_2_2659\" \"c_1_2_2733\" #>  $ trimmed_perCellExprs         :Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots #>   .. ..@ i       : int [1:119728] 29 35 41 48 55 58 60 66 71 75 ... #>   .. ..@ p       : int [1:755] 0 177 462 638 860 1028 1215 1372 1613 1844 ... #>   .. ..@ Dim     : int [1:2] 960 754 #>   .. ..@ Dimnames:List of 2 #>   .. .. ..$ : chr [1:960] \"AATK\" \"ABL1\" \"ABL2\" \"ACE\" ... #>   .. .. ..$ : chr [1:754] \"c_1_1_1008\" \"c_1_1_1027\" \"c_1_1_1042\" \"c_1_1_1058\" ... #>   .. ..@ x       : num [1:119728] 1 1 1 1 1 2 1 1 12 2 ... #>   .. ..@ factors : list() # outputs in output folder list.files(\"res1f_multiFiles\") #> [1] \"1_classDF_ToFlagTrans.csv\"  \"1_flagged_transDF.csv\"      #> [3] \"1_modStats_ToFlagCells.csv\" \"2_classDF_ToFlagTrans.csv\"  #> [5] \"2_flagged_transDF.csv\"      \"2_modStats_ToFlagCells.csv\""},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"full-pipeline-segmentation-detection-and-refinement-across-multi-fov-dataset","dir":"Articles","previous_headings":"Pipeline wrapper functions for streamline processing","what":"Full pipeline segmentation detection and refinement across multi-FOV dataset","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"perform full pipeline entire dataset complex segmentation refinement actions, like splitting, merging trimming, one can use fastReseg_full_pipeline() pipeline wrapper. fastReseg_full_pipeline() returns new cell expression count matrix updated_perCellExprs spatial coordinate data.frame updated_perCellDT return_perCellData = TRUE. also writes transcript data.frame updated new cell segmentation outcomes individual updated_transDF.csv files FOV level path_to_output directory. Intermediate results, including modStats_ToFlagCells groupDF_ToFlagTrans cell-level transcript-level segmentation evaluation, also saved individual each_segRes.rds object FOV level save_intermediates = TRUE. details, please refer manuals fastReseg_full_pipeline() see section Processing FOV outside core wrapper excerpts example outputs.","code":"refineAll_res <- fastReseg_full_pipeline(   counts = counts,   clust = clust,   refProfiles = NULL,      # Similar to `runPreprocess()`, one can use `clust = NULL` if providing `refProfiles`      transcript_df = NULL,   transDF_fileInfo = transDF_fileInfo,   filepath_coln = 'file_path',   prefix_colns = c('slide','fov'),   fovOffset_colns = c('stage_Y','stage_X'),   pixel_size = 0.18,   zstep_size = 0.8,   transID_coln = NULL,   transGene_coln = \"target\",   cellID_coln = \"CellId\",   spatLocs_colns = c(\"x\",\"y\",\"z\"),   extracellular_cellID = c(0),      # Similar to `runPreprocess()`, one can set various cutoffs to NULL for automatic calculation from input data      # distance cutoff for neighborhood searching at molecular and cellular levels, respectively   molecular_distance_cutoff = 2.7,    cellular_distance_cutoff = NULL,       # cutoffs for transcript scores and number for cells under each cell type   score_baseline = NULL,   lowerCutoff_transNum = NULL,   higherCutoff_transNum= NULL,   imputeFlag_missingCTs = TRUE,      # Settings for error detection and correction, refer to `runSegRefinement()` for more details   flagCell_lrtest_cutoff = 5, # cutoff to flag for cells with strong spatial dependcy in transcript score profiles   svmClass_score_cutoff = -2,   # cutoff of transcript score to separate between high and low score classes   groupTranscripts_method = \"dbscan\",   spatialMergeCheck_method = \"leidenCut\",    cutoff_spatialMerge = 0.5, # spatial constraint cutoff for a valid merge event      path_to_output = \"res2_multiFiles\",   save_intermediates = TRUE, # flag to return and write intermediate results to disk   return_perCellData = TRUE, # flag to return per cell level outputs from updated segmentation    combine_extra = FALSE # flag to include trimmed and extracellular transcripts in the exported `updated_transDF.csv` files  )  str(refineAll_res) #> 60, 1:14] 1.00e-04 3.28e-04 4.19e-04 1.35e-04 8.07e-05 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:960] \"AATK\" \"ABL1\" \"ABL2\" \"ACE\" ... #>   .. ..$ : chr [1:14] \"c\" \"e\" \"f\" \"b\" ... #>  $ baselineData        :List of 2 #>   ..$ span_score   : num [1:14, 1:5] 0 -1.508 -1.842 -1.806 -0.451 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:14] \"a\" \"b\" \"c\" \"e\" ... #>   .. .. ..$ : chr [1:5] \"0%\" \"25%\" \"50%\" \"75%\" ... #>   ..$ span_transNum: num [1:14, 1:5] 1 9 16 24 58 13 1 18 1 1 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:14] \"a\" \"b\" \"c\" \"e\" ... #>   .. .. ..$ : chr [1:5] \"0%\" \"25%\" \"50%\" \"75%\" ... #>  $ cutoffs_list        :List of 5 #>   ..$ score_baseline           : Named num [1:14] -1.473 -1.299 -1.171 -1.05 -0.979 ... #>   .. ..- attr(*, \"names\")= chr [1:14] \"c\" \"e\" \"f\" \"b\" ... #>   ..$ lowerCutoff_transNum     : Named num [1:14] 261 239.2 45.5 102.5 3 ... #>   .. ..- attr(*, \"names\")= chr [1:14] \"c\" \"e\" \"f\" \"b\" ... #>   ..$ higherCutoff_transNum    : Named num [1:14] 445 484 95 131 22 ... #>   .. ..- attr(*, \"names\")= chr [1:14] \"c\" \"e\" \"f\" \"b\" ... #>   ..$ cellular_distance_cutoff : num 19.2 #>   ..$ molecular_distance_cutoff: num 2.7 #>  $ updated_perCellDT   :Classes 'data.table' and 'data.frame':   754 obs. of  6 variables: #>   ..$ updated_cellID  : chr [1:754] \"c_1_1_1008\" \"c_1_1_1027\" \"c_1_1_1042\" \"c_1_1_1058\" ... #>   ..$ updated_celltype: chr [1:754] \"e\" \"e\" \"c\" \"e\" ... #>   ..$ x               : num [1:754] -186 -220 -298 -306 -317 ... #>   ..$ y               : num [1:754] 4869 4864 4862 4855 4854 ... #>   ..$ z               : num [1:754] 3.28 2.72 2.79 2.95 2.84 ... #>   ..$ reSeg_action    : chr [1:754] \"none\" \"none\" \"none\" \"none\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ updated_perCellExprs:Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots #>   .. ..@ i       : int [1:119731] 29 35 41 48 55 58 60 66 71 75 ... #>   .. ..@ p       : int [1:755] 0 177 462 638 860 1028 1215 1372 1613 1844 ... #>   .. ..@ Dim     : int [1:2] 960 754 #>   .. ..@ Dimnames:List of 2 #>   .. .. ..$ : chr [1:960] \"AATK\" \"ABL1\" \"ABL2\" \"ACE\" ... #>   .. .. ..$ : chr [1:754] \"c_1_1_1008\" \"c_1_1_1027\" \"c_1_1_1042\" \"c_1_1_1058\" ... #>   .. ..@ x       : num [1:119731] 1 1 1 1 1 2 1 1 12 2 ... #>   .. ..@ factors : list() #>  $ reseg_actions       :List of 4 #>   ..$ cells_to_discard    : chr [1:55] \"c_1_1_1188_g1\" \"c_1_1_1232_g1\" \"c_1_1_1232_g2\" \"c_1_1_1261_g1\" ... #>   ..$ cells_to_update     : Named chr [1:2] \"c_1_1_1744\" \"c_1_2_2733\" #>   .. ..- attr(*, \"names\")= chr [1:2] \"c_1_1_1744_g1\" \"c_1_2_2733_g5\" #>   ..$ cells_to_keep       : chr(0)  #>   ..$ reseg_full_converter: Named chr [1:57] \"c_1_1_1744\" NA NA NA ... #>   .. ..- attr(*, \"names\")= chr [1:57] \"c_1_1_1744_g1\" \"c_1_1_1188_g1\" \"c_1_1_1232_g1\" \"c_1_1_1232_g2\" ... # outputs in output folder list.files(\"res2_multiFiles\") #> [1] \"1_each_segRes.rds\"                           #> [2] \"1_updated_transDF.csv\"                       #> [3] \"2_each_segRes.rds\"                           #> [4] \"2_updated_transDF.csv\"                       #> [5] \"combined_updated_perCellDT_perCellExprs.rds\""},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"modular-functions-for-individual-tasks","dir":"Articles","previous_headings":"","what":"Modular functions for individual tasks","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"2 pipeline wrappers provide streamline processing multi-FOV dataset, ’s sometimes desired focus representative subset data first check impact various cutoffs re-segmentation performance quickly. , one can rely runPreprocess() fastReseg_perFOV_full_process() shown section.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"preprocess-on-whole-dataset","dir":"Articles","previous_headings":"Modular functions for individual tasks","what":"Preprocess on whole dataset","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"First, one needs preprocess whole dataset scale get appropriate baselines cutoffs downstream segmentation error detection correction individual FOV level. done using runPreprocess() function. runPreprocess() function returns list outputs among score_GeneMatrix cutoffs_list passed downstream resegmentation pipeline. score_baseline: named vector per cell type minimal score required call certain cell type high enough confidence. lowerCutoff_transNum: named vector per cell type minimal transcript number per cell keep query cell . higherCutoff_transNum: named vector per cell type maxmium transcript number per cell keep query cell without merging neighbor cell consistent cell type. cellular_distance_cutoff: maximum cell--cell distance x, y center query cells center neighbor cells direct contact, unit micron. molecular_distance_cutoff: maximum molecule--molecule distance within connected transcript group, unit micron.","code":"prep_res <- runPreprocess(   counts = counts,       ## when certain cell typing has been done on the dataset with initial cell segmentation,     # set `refProfiles` to NULL, but use the cell typing assignment in `clust`   clust = clust,    refProfiles = NULL,      ## if celll typing has NOT been done on the dataset with initial cell segmentation,    # set `clust` to NULL, but use cluster-specific profiles in `refProfiles` instead      ## of note, when `refProfiles is not NULL, genes unique to `counts` but missing in `refProfiles` would be omitted from downstream analysis.        # cutoffs for transcript scores and number for cells under each cell type   # if NULL, calculate those cutoffs from `counts`, `clust` and/or `refProfiles` across the entire dataset   score_baseline = NULL,    lowerCutoff_transNum = NULL,    higherCutoff_transNum= NULL,    imputeFlag_missingCTs = FALSE, # flag to impute transcript score and number cutoffs for cell types in `refProfiles` but missing in `clust`      # genes in `counts` but not in `refProfiles` and expect no cell type dependency, e.g. negative control probes   ctrl_genes = NULL,   # cutoff of transcript score to separate between high and low score transcript classes, used as the score values for `ctrl_genes`    svmClass_score_cutoff = -2,      # distance cutoff for neighborhood searching at molecular and cellular levels, respectively   # if NULL, calculate those distance cutoffs from the first transcript data.frame provided (slow process)   # if values provided in input, no distance calculation would be done    molecular_distance_cutoff = 2.7,   cellular_distance_cutoff = 20,      transcript_df = NULL, # take a transcript data.frame as input directly when `transDF_fileInfo = NULL`   transDF_fileInfo = transDF_fileInfo, # data.frame info for multiple perFOV transcript data.frame files   filepath_coln = 'file_path',    prefix_colns = c('slide','fov'),    fovOffset_colns = c('stage_X','stage_Y'),       pixel_size = 0.18, # in micron per pixel   zstep_size = 0.8, # in micron per z step   transID_coln = NULL,   transGene_coln = \"target\",      # cell ID column in the provided transcript data.frame, which is the 1st file in `transDF_fileInfo` in this example   cellID_coln = 'CellId',    spatLocs_colns = c('x','y','z'),    extracellular_cellID = 0 # cell ID for extracellular transcript  )   ## variables passing to the downstream pipeline # gene x cell type matrix of transcript score  score_GeneMatrix <- prep_res[['score_GeneMatrix']]  # per cell transcript score baseline for each cell type score_baseline <- prep_res[['cutoffs_list']][['score_baseline']]  # upper and lower limit of per cell transcript number for each cell type lowerCutoff_transNum <- prep_res[['cutoffs_list']][['lowerCutoff_transNum']] higherCutoff_transNum <- prep_res[['cutoffs_list']][['higherCutoff_transNum']]  # distance cutoffs for neighborhood at cellular and molecular levels cellular_distance_cutoff <- prep_res[['cutoffs_list']][['cellular_distance_cutoff']] molecular_distance_cutoff <- prep_res[['cutoffs_list']][['molecular_distance_cutoff']]"},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"initial-cell-typing-and-control-genes","dir":"Articles","previous_headings":"Modular functions for individual tasks > Preprocess on whole dataset","what":"initial cell typing and control genes","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"example runPreprocess() using clust input, assuming single-cell dataset gone certain type cell typing algorithm using initial cell segmentation. case cell typing done input dataset, one set clust NULL, provide cluster-specific profiles refProfiles input. runPreprocess() function quick supervised cell typing input dataset given initial cell segmentation. note, refProfiles provided runPreprocess() , genes unique counts missing refProfiles omitted downstream analysis. include genes counts, one set unique genes ctrl_genes whose expression profiles expected either show strong cell type dependency small fraction total per cell expression. Alternatively, one can quick cell typing using get_baselineCT() function following feeding clust runPreprocess() refProfiles set NULL.","code":"baselineData <- get_baselineCT(refProfiles = refProfiles, counts = counts, clust = NULL) clust <- baselineData[['clust_used']]"},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"distance-cutoffs-defining-neighborhood","dir":"Articles","previous_headings":"Modular functions for individual tasks > Preprocess on whole dataset","what":"distance cutoffs defining neighborhood","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"pre-processing step, one also need define distance cutoffs downstream neighborhood search segmentation refinement. cutoffs defined based prior knowledge directly calculated provided transcript_df using either runPreprocess() choose_distance_cutoff() function. cellular_distance_cutoff defined maximum cell--cell distance x, y center query cells center neighbor cells direct contact. set NULL input runPreprocess() function, function calculates average 2D cell diameter input transcript data.frame use 2 times mean cell diameter cellular_distance_cutoff. molecular_distance_cutoff defined maximum molecule--molecule distance within connected transcript groups belonging source cells. One can decide value based expected spot density within cell. set NULL input runPreprocess() function, function first randomly choose sampleSize_cellNum = 2500 number cells sampleSize_nROI = 10 number randomly picked ROIs search radius 5 times cellular_distance_cutoff, calculate minimal molecular distance picked cells. example calculate distance cutoff input transcript data.frame outside runPreprocess() function using choose_distance_cutoff(), offers control distance cutoff calculation setup may allow faster calculation within runPreprocess() function. Empirically, let’s set 20um 2um values two cutoffs, respectively, dataset human tissue 100+ plex target gene panel. following sections operate one per-FOV transcript data.frame time. processing multiple FOVs, please either refer provided pipeline wrapper functions create wrapper around code chucks listed .","code":"## for demonstration purpose, use the example `mini_transcriptDF` data(mini_transcriptDF) transcript_df <- mini_transcriptDF   ## get distance cutoffs distCutoffs <- choose_distance_cutoff(   # allow to choose any transcript data.frame that is representative to entire dataset   # while `runPreprocess()` uses the first provided transcript data.frame in the file list   transcript_df,       # allow to use 2D spatial coordinates here since transcript is more dense in 2D,    # 2D calculation of distance cutoff would be faster than 3D calculation used in `runPreprocess()`    spatLocs_colns = c('x','y'),       transID_coln = 'UMI_transID',   cellID_coln = 'UMI_cellID',    extracellular_cellID = NULL,       # flag to calculate `molecular_distance_cutoff` from input data, slower process   run_molecularDist = TRUE,   # configs on random sampling of cells   sampleSize_nROI = 10,    sampleSize_cellNum = 2500,    seed = 123 ) #> Use 2 times of average 2D cell diameter as cellular_distance_cutoff = 24.2375 for searching of neighbor cells. #> Identified 2D coordinates with variance. #> Warning: data contain duplicated points #> Distribution of minimal molecular distance between 1375 cells: 0, 0.04, 0.07, 0.09, 0.12, 0.15, 0.19, 0.23, 0.28, 0.35, 3.49, at quantile = 0%, 10%, 20%, 30%, 40%, 50%, 60%, 70%, 80%, 90%, 100%. #> Use 5 times of 90% quantile of minimal 2D molecular distance between picked cells as `molecular_distance_cutoff` = 1.7655 for defining direct neighbor cells. molecular_distance_cutoff <- distCutoffs[['molecular_distance_cutoff']] cellular_distance_cutoff <- distCutoffs[['cellular_distance_cutoff']] cellular_distance_cutoff = 20 molecular_distance_cutoff = 2 ## for demonstration purpose, use the saved baseline values paired with example `mini_transcriptDF` data(\"example_baselineCT\")  score_baseline = example_baselineCT[[\"span_score\"]][, \"25%\"] lowerCutoff_transNum = example_baselineCT[[\"span_transNum\"]][, \"25%\"] higherCutoff_transNum = example_baselineCT[[\"span_transNum\"]][, \"50%\"]  # calculate log-likelihood of each gene under each cell type and center the score matrix on per gene basis score_GeneMatrix <- scoreGenesInRef(genes = intersect(colnames(counts), rownames(refProfiles)),                                      ref_profiles = pmax(refProfiles, 1e-5))"},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"core-wrapper-for-perfov-processing","dir":"Articles","previous_headings":"Modular functions for individual tasks","what":"Core wrapper for perFOV processing","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"appropriate cutoffs identified preprocess step, one push single FOV transcript_df full pipeline using core wrapper function, fastReseg_perFOV_full_process().","code":"data(mini_transcriptDF) extracellular_cellID <- mini_transcriptDF[which(mini_transcriptDF$CellId ==0), 'cell_ID']  finalRes_perFOV <- fastReseg_perFOV_full_process(   score_GeneMatrix = score_GeneMatrix,    transcript_df = mini_transcriptDF,    transID_coln = 'UMI_transID',   transGene_coln = \"target\",   cellID_coln = 'UMI_cellID',    spatLocs_colns = c('x','y','z'),    extracellular_cellID = extracellular_cellID,    flagModel_TransNum_cutoff = 50,    flagCell_lrtest_cutoff = flagCell_lrtest_cutoff,   svmClass_score_cutoff = svmClass_score_cutoff,    molecular_distance_cutoff = molecular_distance_cutoff,   cellular_distance_cutoff = cellular_distance_cutoff,   score_baseline = score_baseline,    lowerCutoff_transNum = lowerCutoff_transNum,    higherCutoff_transNum = higherCutoff_transNum,      # default to \"dbscan\" for spatial grouping of transcripts, alternative to use \"delaunay\"   groupTranscripts_method = \"dbscan\",      # default to \"leidenCut\" for decision based on Leiden clustering of transcript coordinates, alternative to use \"geometryDiff\" for geometric analysis   spatialMergeCheck_method = \"leidenCut\",       cutoff_spatialMerge = 0.5,   return_intermediates = TRUE,   return_perCellData = TRUE,    includeAllRefGenes = TRUE   )"},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"processing-each-fov-outside-of-core-wrapper","dir":"Articles","previous_headings":"Modular functions for individual tasks","what":"Processing each FOV outside of core wrapper","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"illustrated FastReseg workflow diagram, fastReseg_perFOV_full_process() process single-FOV transcript data series modules. section provides breakdown module explains results example dataset figures. One can play input cutoffs see affects step.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"flag-cells-with-putative-segmentation-errors","dir":"Articles","previous_headings":"Modular functions for individual tasks > Processing each FOV outside of core wrapper","what":"Flag cells with putative segmentation errors","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"pre-processing, ready evaluate cell potential cell segmentation errors.  function returns statistics evaluating cell spatial dependent model null model. Based P value, lrtest_Pr negative log10 value lrtest_nlog10P, one can select cells strong spatial dependency transcript score profile. cells likely contain contaminating transcripts neighbor cells.","code":"outs <- runSegErrorEvaluation(   score_GeneMatrix= score_GeneMatrix,    transcript_df = transcript_df,    cellID_coln = 'UMI_cellID',    transID_coln = 'UMI_transID',   transGene_coln = 'target',   spatLocs_colns = c('x','y','z'),   # cutoff of transcript number to do spatial modeling   flagModel_TransNum_cutoff = 50)  #> Found 960 common genes among transcript_df and score_GeneMatrix. #> Found 1375 cells and assigned cell type based on the provided `refProfiles` cluster profiles. #> Run linear regreassion in 3 Dimension. #> Warning in score_cell_segmentation_error(chosen_cells = #> names(celltype_cellVector), : Below model_cutoff = 50, skip 37 cells with fewer #> transcripts. Move forward with remaining 1338 cells. modStats_ToFlagCells <- outs [['modStats_ToFlagCells']] transcript_df <- outs[['transcript_df']] rm(outs)   # transcript data.frame with additional columns for cell types and transcript scores under current cell segmentation  head(transcript_df, n = 3L) #>    UMI_transID UMI_cellID        x         y   z  target slide fov CellId #> 1     t_1_2_10    c_1_2_5 914.8070 -7832.786 2.4 HLA-DRA     1   2      5 #> 2 t_1_2_100005 c_1_2_1270 841.7000 -8045.011 2.4   HLA-E     1   2   1270 #> 3 t_1_2_100006 c_1_2_1270 844.4609 -8045.006 2.4  TWIST1     1   2   1270 #>   tLLR_maxCellType score_tLLR_maxCellType #> 1                f             -0.4227132 #> 2                d             -0.5070020 #> 3                d             -2.2769526 # model statistics head(modStats_ToFlagCells) #>            transcript_num modAlt_rsq lrtest_ChiSq    lrtest_Pr UMI_cellID #> c_1_2_1000            502 0.05528780     28.55123 7.711518e-04 c_1_2_1000 #> c_1_2_1001            141 0.13150271     19.87971 1.080087e-02 c_1_2_1001 #> c_1_2_1009            734 0.03751650     28.06695 9.296016e-04 c_1_2_1009 #> c_1_2_1010            480 0.03255556     15.88670 6.928571e-02 c_1_2_1010 #> c_1_2_1011            227 0.09747293     23.28035 5.596473e-03 c_1_2_1011 #> c_1_2_1012            799 0.05433535     44.63795 1.076376e-06 c_1_2_1012 #>            lrtest_nlog10P tLLR_maxCellType #> c_1_2_1000       3.112860                d #> c_1_2_1001       1.966541                f #> c_1_2_1009       3.031703                d #> c_1_2_1010       1.159356                d #> c_1_2_1011       2.252086                d #> c_1_2_1012       5.968036                d # histogram for spatial dependency in all cells tmp_flag <- which(!is.na(modStats_ToFlagCells$lrtest_nlog10P)) # exclude cells with too few transcript number hist(modStats_ToFlagCells$lrtest_nlog10P[tmp_flag], breaks = \"FD\",       main = paste0(\"Histogram of spatial dependency, mean = \",                     round(mean(modStats_ToFlagCells$lrtest_nlog10P[tmp_flag]), 2))) abline(v = mean(modStats_ToFlagCells$lrtest_nlog10P[tmp_flag]), col=\"red\", lwd=3, lty=2) # cutoff to flag for cells with strong spatial dependcy in transcript score profiles flagCell_lrtest_cutoff  = 5  modStats_ToFlagCells[['flagged']] <- (modStats_ToFlagCells[['lrtest_nlog10P']] > flagCell_lrtest_cutoff ) flagged_cells <- modStats_ToFlagCells[['UMI_cellID']][modStats_ToFlagCells[['flagged']]]  message(sprintf(\"%d cells, %.4f of all evaluated cells, are flagged for resegmentation with lrtest_nlog10P > %.1f.\",                   length(flagged_cells), length(flagged_cells)/nrow(modStats_ToFlagCells), flagCell_lrtest_cutoff)) #> 373 cells, 0.2788 of all evaluated cells, are flagged for resegmentation with lrtest_nlog10P > 5.0. # spatial plot some flagged cells with various degrees of spatial dependency in transcript profiles rownames(modStats_ToFlagCells) <- modStats_ToFlagCells$UMI_cellID cells_to_plot <- modStats_ToFlagCells[flagged_cells, 'lrtest_nlog10P'] names(cells_to_plot) <- flagged_cells cells_to_plot <- cells_to_plot[order(cells_to_plot, decreasing = T)] cells_to_plot <- cells_to_plot[seq(1, length(cells_to_plot), by = 25)]  plotSpatialScoreMultiCells(chosen_cells = names(cells_to_plot),                             cell_labels = round(cells_to_plot, 2),                             transcript_df = transcript_df,                             cellID_coln = \"UMI_cellID\",                             transID_coln = \"UMI_transID\",                            score_coln = \"score_tLLR_maxCellType\",                             spatLocs_colns = c(\"x\",\"y\"),                            point_size = 0.5)"},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"identify-wrongly-segmented-transcript-groups","dir":"Articles","previous_headings":"Modular functions for individual tasks > Processing each FOV outside of core wrapper","what":"Identify wrongly segmented transcript groups","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"assumption contamination neighbor cells result patches low-score transcript groups space, first separate transcripts within flagged cells high low score groups divide transcripts low score different spatially connected groups assuming might arise different source cells neighborhood. function returns transcript data.frame flagged cells results spatial-dependent score classification spatial group ID assignment. SVM_class shows transcript score classification, 0 low score cutoff, 1 high score cutoff; corresponding decision values svm model output listed DecVal. One can use SVM_class select low-score transcript groups remove original transcript data.frame together. approach effectively trims putative contaminating transcripts current cell segmentation without complex refinement. connect_group shows spatial group ID assigned transcripts, corresponding cell types maximum transcript scores given transcript groups listed group_maxCellType. 0 transcript group high score putative cell type current cell segmentation. tmp_cellID column new cell IDs identified low-score transcript group assigned unique new name separate original cell. Transcript groups high score keep cell ID corresponding original cells.","code":"# cutoff of transcript score to separate between high and low score transcripts  svmClass_score_cutoff = -2   # a list of arguments to pass to `e1071::svm` function to define the strength of spatial connectivity  svm_args = list(kernel = \"radial\",                  scale = FALSE,                  gamma = 0.4)  groupDF_ToFlagTrans <- runTranscriptErrorDetection(chosen_cells = flagged_cells,                                                    score_GeneMatrix = score_GeneMatrix,                                                     transcript_df = transcript_df, # include column for transcript score under current cell segmentation                                                    cellID_coln = \"UMI_cellID\",                                                     transID_coln = \"UMI_transID\",                                                     # column for transcript score in current cell segment                                                    score_coln = 'score_tLLR_maxCellType',                                                    spatLocs_colns = c(\"x\",\"y\",\"z\"),                                                    model_cutoff = 50,                                                     score_cutoff = svmClass_score_cutoff,                                                     svm_args = svm_args,                                                    # maximum molecule-to-molecule distance within same transcript group                                                     distance_cutoff = molecular_distance_cutoff,                                                     # use \"dbscan\" method for spatial grouping of transcripts, alternative to use \"delaunay\"                                                    groupTranscripts_method = \"dbscan\") #> Run SVM in 3 Dimension. #> Found 373 common cells and 960 common genes among chosen_cells, transcript_df, and score_GeneMatrix. #> Warning in flag_bad_transcripts(chosen_cells = chosen_cells, score_GeneMatrix = #> score_GeneMatrix, : Below model_cutoff = 50, skip 0 cells with fewer #> transcripts. Move forward with remaining 373 cells. #> Warning in flag_bad_transcripts(chosen_cells = chosen_cells, score_GeneMatrix = #> score_GeneMatrix, : Skip 0 cells with all transcripts in same class given #> `score_cutoff = -2`. Move forward with remaining 373 cells. #> Remove 0 cells with raw transcript score all in same class based on cutoff -2.00 when running spatial SVM model. #> Do spatial network analysis in 3 Dimension. #> 10652 chosen_transcripts are found in common cells. #> SVM spatial model further identified 17 cells with transcript score all in same class, exclude from transcript group analysis. #> Found 960 common genes among transcript_df and score_GeneMatrix. head(groupDF_ToFlagTrans) #>    UMI_transID UMI_cellID        x         y   z  target slide fov CellId #> 1 t_1_2_100019 c_1_2_1280 1075.583 -8045.011 2.4    PSAP     1   2   1280 #> 2 t_1_2_100021 c_1_2_1311 1180.613 -8045.024 2.4    RXRB     1   2   1311 #> 3 t_1_2_100042 c_1_2_1311 1180.446 -8045.052 2.4  S100A6     1   2   1311 #> 4 t_1_2_100054 c_1_2_1280 1070.457 -8045.092 2.4    ABL2     1   2   1280 #> 5 t_1_2_100055 c_1_2_1297 1109.888 -8045.084 2.4 IL22RA1     1   2   1297 #> 6 t_1_2_100062 c_1_2_1280 1078.530 -8045.144 2.4    CD63     1   2   1280 #>   tLLR_maxCellType score_tLLR_maxCellType     DecVal SVM_class SVM_cell_type #> 1                d            -0.84881774  1.0703177         1             d #> 2                d            -0.83865972  0.9651801         1             d #> 3                d             0.00000000  1.0000416         1             d #> 4                d            -1.57303427  1.0000334         1             d #> 5                f            -4.08493706 -0.8650251         1             f #> 6                d            -0.01510279  1.0003084         1             d #>   connect_group tmp_cellID group_maxCellType #> 1             0 c_1_2_1280                 d #> 2             0 c_1_2_1311                 d #> 3             0 c_1_2_1311                 d #> 4             0 c_1_2_1280                 d #> 5             0 c_1_2_1297                 f #> 6             0 c_1_2_1280                 d # spatial plot for `SVM_class`, the high vs. low score classification of transcript groups in flagged cells plotSpatialScoreMultiCells(chosen_cells = names(cells_to_plot),                            cell_labels = round(cells_to_plot, 2),                            transcript_df = groupDF_ToFlagTrans,                            cellID_coln = \"UMI_cellID\",                            transID_coln = \"UMI_transID\",                            score_coln = \"SVM_class\",                            spatLocs_colns = c(\"x\",\"y\"),                            point_size = 0.5,                             plot_discrete = T,                             title = \"transcript score classification\")  # spatial plot for `connect_group`, the spatial group ID for transcripts within each cell plotSpatialScoreMultiCells(chosen_cells = names(cells_to_plot),                            cell_labels = round(cells_to_plot, 2),                            transcript_df = groupDF_ToFlagTrans,                            cellID_coln = \"UMI_cellID\",                            transID_coln = \"UMI_transID\",                            score_coln = \"connect_group\",                            spatLocs_colns = c(\"x\",\"y\"),                            point_size = 0.5,                             plot_discrete = T,                             title = \"spatial connected transcript groups\")  # spatial plot for `group_maxCellType`, the cell type with maximum score for each transcript group plotSpatialScoreMultiCells(chosen_cells = names(cells_to_plot),                            cell_labels = round(cells_to_plot, 2),                            transcript_df = groupDF_ToFlagTrans,                            cellID_coln = \"UMI_cellID\",                            transID_coln = \"UMI_transID\",                            score_coln = \"group_maxCellType\",                            spatLocs_colns = c(\"x\",\"y\"),                            point_size = 0.5,                             plot_discrete = T,                            title = \"putative cell type for each transcript group\")"},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"get-ready-for-segmentation-refinement","dir":"Articles","previous_headings":"Modular functions for individual tasks > Processing each FOV outside of core wrapper","what":"Get ready for segmentation refinement","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"one like perform sophisticated cell segmentation refinement simple trimming low-score transcript groups, one update original transcript data.frame new cell IDs maximum cell types output runTranscriptErrorDetection() function keep identified low-score transcript groups separated original cell segment assignment segmentation refinement.","code":"# update the transcript_df with flagged transcript_group reSeg_ready_res <- prepResegDF(transcript_df = transcript_df,                                 groupDF_ToFlagTrans = groupDF_ToFlagTrans,                                cellID_coln = \"UMI_cellID\",                                transID_coln = \"UMI_transID\")  # `tmp_cellID` and `group_maxCellType` now contains info for all cells including the identified transcript groups  head(reSeg_ready_res[[\"reseg_transcript_df\"]], n = 3L) #>    UMI_transID UMI_cellID        x         y   z  target slide fov CellId #> 1     t_1_2_10    c_1_2_5 914.8070 -7832.786 2.4 HLA-DRA     1   2      5 #> 2 t_1_2_100005 c_1_2_1270 841.7000 -8045.011 2.4   HLA-E     1   2   1270 #> 3 t_1_2_100006 c_1_2_1270 844.4609 -8045.006 2.4  TWIST1     1   2   1270 #>   tLLR_maxCellType score_tLLR_maxCellType connect_group tmp_cellID #> 1                f             -0.4227132             0    c_1_2_5 #> 2                d             -0.5070020             0 c_1_2_1270 #> 3                d             -2.2769526             0 c_1_2_1270 #>   group_maxCellType #> 1                 f #> 2                 d #> 3                 d # cells or group IDs for neighborhood evaluation  head(reSeg_ready_res[[\"groups_to_reseg\"]]) #> [1] \"c_1_2_1300_g1\" \"c_1_2_1340_g1\" \"c_1_2_1311_g1\" \"c_1_2_1376_g1\" #> [5] \"c_1_2_1380_g1\" \"c_1_2_1356_g1\""},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"perform-segmentation-refinement","dir":"Articles","previous_headings":"Modular functions for individual tasks > Processing each FOV outside of core wrapper","what":"Perform segmentation refinement","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"sophisticated cell segmentation refinement, first evaluate neighborhood environment low-score transcript groups terms goodness fit nearby potential source cells, determine corresponding resegmentation operation comparing neighborhood analysis results baseline data cell type derived original dataset. Lastly, apply resegmentation operations original transcript data.frame get refined segmentation outcomes. identified low-score transcript group may experience following refinement operation: trimming (removing extracellular space), splitting (keeping new cell ID ), merging (assigning cell ID neighboring cells/transcript groups cell type). runSegRefinement() function returns list outputs updated cell segmentation used single cell analysis. cells_to_discard: vector cell ID discarded resegmentation. cells_to_update: named vector cell ID whether cell_ID name replaced new cell_ID value. cells_to_keep: vector cell ID kept . reseg_full_converter: single named vector cell ID update original cell ID, assign NA cells_to_discard.","code":"finalRes <- runSegRefinement(   score_GeneMatrix = score_GeneMatrix,     chosen_cells = reSeg_ready_res[[\"groups_to_reseg\"]],    reseg_transcript_df = reSeg_ready_res[[\"reseg_transcript_df\"]],    reseg_cellID_coln = \"tmp_cellID\",    reseg_celltype_coln = \"group_maxCellType\",    transID_coln = \"UMI_transID\",   transGene_coln = \"target\",    transSpatLocs_coln = c('x','y','z'),   score_baseline = score_baseline,    lowerCutoff_transNum = lowerCutoff_transNum,    higherCutoff_transNum= higherCutoff_transNum,    neighbor_distance_xy = cellular_distance_cutoff,   distance_cutoff = molecular_distance_cutoff,      # apply spatial constraint on cell merging vs. splitting    # default to \"leidenCut\" for decision based on Leiden clustering of transcript coordinates, alternative use \"geometryDiff\" for geometric analysis    spatialMergeCheck_method = \"leidenCut\",    # list of leiden clustering configuration to pass to `igraph::cluster_leiden()` function   leiden_config = list(objective_function = \"CPM\",                        resolution_parameter = 1,                        beta = 0.01,                        n_iterations = 200),    # minimal percentage of transcripts shared membership between query cell and neighbor cells in leiden clustering results for a valid merging event   cutoff_spatialMerge = 0.5,      return_intermediates = TRUE, # flag to return intermediate outputs for neighborhood evaluation and resegmentation actions   return_perCellData = TRUE,  # flag to return additional per cell data.frame and expression matrix   includeAllRefGenes = FALSE # flag to include all genes in `score_GeneMatrix` in the returned `updated_perCellExprs` with missing genes of value  ) #> Perform leiden clustering at resolution_parameter = 1.000. #> Create Delanay network when config$method is NULL. #> Name the spatial network based on method as `Delaunay_network` when config$name is NULL. #> Use neighbor_distance_xy = 20.0000 for searching of neighbor cells. #> Use distance_cutoff = 2.0000 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use first 2D for searching cell neighborhood, but all 3 Dimension to identify direct neighbors based on molecular distance. #> Found 2458 common cells and 960 common genes among transcript_df, cell_networkDT, and score_GeneMatrix. #> 1083 chosen_cells are found in common cells. #> Use `leidenCut` method to evaluate putative merging event in space. #> Perform leiden clustering at resolution_parameter = 1.000. #> A valid merging event must have query cell with 0.500 transcript shared same membership as neighbor cell of consistent cell type. #> Run delanuay network in 3 Dimension. #> Perform ledien clustering on 66 potential merging events. #> (`c_1_2_1339_g4`, `c_1_2_1403_g6`) cell pair with all 7 transcripts in same z plane, run 2D network analysis. #> (`c_1_2_1403_g6`, `c_1_2_1339_g4`) cell pair with all 7 transcripts in same z plane, run 2D network analysis. #> (`c_1_2_921_g8`, `c_1_2_941_g1`) cell pair with all 15 transcripts in same z plane, run 2D network analysis. #> (`c_1_2_941_g1`, `c_1_2_921_g8`) cell pair with all 15 transcripts in same z plane, run 2D network analysis. #> Found 1084 common cells and 960 common genes among `names(reseg_full_converter)`, `transcript_df`, and `score_GeneMatrix`. # updated transcript data.frame with `updated_cellID` column reflecting the new transcript assignment to cells after refinement # only includes transcripts that are intracellular in original segmentation and are genes in `score_GeneMatrix`  updated_transDF <- finalRes[[\"updated_transDF\"]] head(updated_transDF, n = 3L) #>    UMI_transID UMI_cellID        x         y   z  target slide fov CellId #> 1     t_1_2_10    c_1_2_5 914.8070 -7832.786 2.4 HLA-DRA     1   2      5 #> 2 t_1_2_100005 c_1_2_1270 841.7000 -8045.011 2.4   HLA-E     1   2   1270 #> 3 t_1_2_100006 c_1_2_1270 844.4609 -8045.006 2.4  TWIST1     1   2   1270 #>   tLLR_maxCellType score_tLLR_maxCellType connect_group tmp_cellID #> 1                f             -0.4227132             0    c_1_2_5 #> 2                d             -0.5070020             0 c_1_2_1270 #> 3                d             -2.2769526             0 c_1_2_1270 #>   group_maxCellType updated_cellID updated_celltype score_updated_celltype #> 1                 f        c_1_2_5                f             -0.4227132 #> 2                 d     c_1_2_1270                d             -0.5070020 #> 3                 d     c_1_2_1270                d             -2.2769526 # updated per cell data.table after refinement, with resegmentation operation recorded in `reSeg_action` updated_perCellDT <- finalRes[['updated_perCellDT']] head(updated_perCellDT) #> Key: <updated_cellID> #>    updated_cellID updated_celltype         x         y        z reSeg_action #>            <char>           <char>     <num>     <num>    <num>       <char> #> 1:     c_1_2_1000                d 1061.5538 -7993.376 2.691633         none #> 2:     c_1_2_1001                f 1195.9138 -7993.106 4.192908         none #> 3:     c_1_2_1009                d  807.5324 -7996.263 3.311172         none #> 4:     c_1_2_1010                d  928.8692 -7996.915 3.523333         none #> 5:     c_1_2_1011                d 1135.7938 -7996.114 2.759471         none #> 6:     c_1_2_1012                d 1146.3545 -7996.048 2.354226         trim table(updated_perCellDT[['reSeg_action']]) #>  #> merge_or_flagged              new             none             trim  #>                4                3             1017              354"},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"visualize-example-resegmentation-outcomes","dir":"Articles","previous_headings":"Modular functions for individual tasks > Processing each FOV outside of core wrapper > Perform segmentation refinement","what":"Visualize example resegmentation outcomes","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"Let’s check cells got changed segmentation refinement process.","code":"# choose example cells got segmentation refinement operations of various kinds trimmed_cells_to_plot <- updated_perCellDT[reSeg_action == \"trim\" & updated_cellID %in% names(cells_to_plot), updated_cellID] changes_to_plot <- updated_perCellDT[!reSeg_action %in% c(\"none\", \"trim\") | updated_cellID %in% trimmed_cells_to_plot , .SD, .SDcols = c('updated_cellID', 'reSeg_action')]  changes_to_plot <- merge(changes_to_plot,                           unique(updated_transDF[updated_transDF[['updated_cellID']] %in% changes_to_plot[['updated_cellID']], c('UMI_cellID', 'updated_cellID')])) changes_to_plot[, oriCellNum_in_newCell := .N, by = updated_cellID ] changes_to_plot[, newCellNum_from_oriCell := .N, by = UMI_cellID]  ## segmentation changes for the selected cells with original cell_ID in `UMI_cellID` column print(changes_to_plot[order(reSeg_action, - newCellNum_from_oriCell), ]) #>     updated_cellID     reSeg_action UMI_cellID oriCellNum_in_newCell #>             <char>           <char>     <char>                 <int> #>  1:  c_1_2_1481_g5 merge_or_flagged c_1_2_1493                     2 #>  2:  c_1_2_1481_g5 merge_or_flagged c_1_2_1481                     2 #>  3:     c_1_2_1655 merge_or_flagged c_1_2_1655                     2 #>  4:     c_1_2_1655 merge_or_flagged c_1_2_1668                     2 #>  5:     c_1_2_1683 merge_or_flagged c_1_2_1683                     2 #>  6:     c_1_2_1683 merge_or_flagged c_1_2_1732                     2 #>  7:     c_1_2_2243 merge_or_flagged c_1_2_2243                     1 #>  8:  c_1_2_2549_g2              new c_1_2_2549                     1 #>  9:  c_1_2_1502_g1              new c_1_2_1502                     1 #> 10:  c_1_2_1758_g1              new c_1_2_1758                     1 #> 11:     c_1_2_2549             trim c_1_2_2549                     1 #> 12:     c_1_2_1341             trim c_1_2_1341                     1 #> 13:     c_1_2_1485             trim c_1_2_1485                     1 #> 14:     c_1_2_1646             trim c_1_2_1646                     1 #> 15:     c_1_2_1751             trim c_1_2_1751                     1 #> 16:     c_1_2_1763             trim c_1_2_1763                     1 #> 17:     c_1_2_2062             trim c_1_2_2062                     1 #> 18:     c_1_2_2332             trim c_1_2_2332                     1 #> 19:     c_1_2_2623             trim c_1_2_2623                     1 #> 20:     c_1_2_2688             trim c_1_2_2688                     1 #> 21:      c_1_2_352             trim  c_1_2_352                     1 #> 22:      c_1_2_392             trim  c_1_2_392                     1 #> 23:     c_1_2_4147             trim c_1_2_4147                     1 #> 24:      c_1_2_521             trim  c_1_2_521                     1 #> 25:      c_1_2_714             trim  c_1_2_714                     1 #>     updated_cellID     reSeg_action UMI_cellID oriCellNum_in_newCell #>     newCellNum_from_oriCell #>                       <int> #>  1:                       1 #>  2:                       1 #>  3:                       1 #>  4:                       1 #>  5:                       1 #>  6:                       1 #>  7:                       1 #>  8:                       2 #>  9:                       1 #> 10:                       1 #> 11:                       2 #> 12:                       1 #> 13:                       1 #> 14:                       1 #> 15:                       1 #> 16:                       1 #> 17:                       1 #> 18:                       1 #> 19:                       1 #> 20:                       1 #> 21:                       1 #> 22:                       1 #> 23:                       1 #> 24:                       1 #> 25:                       1 #>     newCellNum_from_oriCell # get all transcript in the source cells for plotting transDF_to_plot <- merge(   reSeg_ready_res[[\"reseg_transcript_df\"]][reSeg_ready_res[[\"reseg_transcript_df\"]][[\"UMI_cellID\"]] %in% changes_to_plot[['UMI_cellID']], ],    updated_transDF[updated_transDF[[\"UMI_cellID\"]] %in% changes_to_plot[['UMI_cellID']], ],    all.x = T)  # label changed with respect to original cell segmentation trim_idx <- which(is.na(transDF_to_plot[['updated_cellID']])) alter_idx <- which(transDF_to_plot[['updated_cellID']] != transDF_to_plot[['UMI_cellID']])  transDF_to_plot[['changed']] <- 'none' transDF_to_plot[['changed']][alter_idx] <- 'move_to_others' transDF_to_plot[['changed']][trim_idx] <- 'trim'  # spatial plot for modification on original source cells cells_to_plot2 <- unique(changes_to_plot[['UMI_cellID']]) plotSpatialScoreMultiCells(chosen_cells = cells_to_plot2,                            cell_labels = round(modStats_ToFlagCells[cells_to_plot2, 'lrtest_nlog10P'], 2),                            transcript_df = transDF_to_plot,                            cellID_coln = \"UMI_cellID\",                            transID_coln = \"UMI_transID\",                            score_coln = \"changed\",                            spatLocs_colns = c(\"x\",\"y\"),                            point_size = 0.5,                             plot_discrete = T,                            title = \"examples of orignal cells got trimmed or split\") # spatial plot for new cells merged from multiple original cells cells_to_plot2 <- changes_to_plot[oriCellNum_in_newCell >1,] fig <- plotSpatialScoreMultiCells(chosen_cells = cells_to_plot2[['updated_cellID']],                                   cell_labels = cells_to_plot2[['reSeg_action']],                                   transcript_df = transDF_to_plot,                                   cellID_coln = \"updated_cellID\",                                   transID_coln = \"UMI_transID\",                                   score_coln = \"UMI_cellID\",                                   spatLocs_colns = c(\"x\",\"y\"),                                   point_size = 1,                                    plot_discrete = T,                                   title = \"examples of new cells merged from multiple orignal cells\")    fig <- fig + ggplot2::scale_color_brewer(palette = \"Dark2\") print(fig)"},{"path":"https://nanostring-biostats.github.io/FastReseg/articles/tutorial.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"FastReseg to detect and correct segmentation error in spatial transcriptome data","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] FastReseg_1.0.3 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6         xfun_0.48            bslib_0.8.0          #>  [4] ggplot2_3.5.1        htmlwidgets_1.6.2    lattice_0.22-6       #>  [7] vctrs_0.6.3          tools_4.4.1          spatstat.utils_3.1-0 #> [10] generics_0.1.3       parallel_4.4.1       proxy_0.4-27         #> [13] tibble_3.2.1         fansi_1.0.6          highr_0.11           #> [16] pkgconfig_2.0.3      Matrix_1.6-5         data.table_1.16.2    #> [19] checkmate_2.3.2      RColorBrewer_1.1-3   desc_1.4.3           #> [22] lifecycle_1.0.4      compiler_4.4.1       farver_2.1.2         #> [25] stringr_1.4.0        deldir_2.0-4         GiottoUtils_0.2.4    #> [28] textshaping_0.4.0    munsell_0.5.1        terra_1.7-39         #> [31] codetools_0.2-20     class_7.3-22         htmltools_0.5.8.1    #> [34] GiottoClass_0.2.3    sass_0.4.9           yaml_2.3.10          #> [37] pillar_1.9.0         pkgdown_2.1.1        jquerylib_0.1.4      #> [40] cachem_1.1.0         dbscan_1.1-10        abind_1.4-5          #> [43] spatstat.geom_2.4-0  gtools_3.9.5         tidyselect_1.2.1     #> [46] digest_0.6.29        stringi_1.8.4        reshape2_1.4.4       #> [49] dplyr_1.0.10         magic_1.6-1          labeling_0.4.3       #> [52] polyclip_1.10-7      fastmap_1.2.0        grid_4.4.1           #> [55] colorspace_2.1-1     cli_3.6.3            concaveman_1.1.0     #> [58] magrittr_2.0.3       utf8_1.2.4           e1071_1.7-16         #> [61] spatstat.data_3.1-2  withr_3.0.2          scales_1.3.0         #> [64] backports_1.5.0      rmarkdown_2.26       igraph_2.1.1         #> [67] ragg_1.3.3           zoo_1.8-12           kableExtra_1.4.0     #> [70] evaluate_1.0.1       knitr_1.46           lmtest_0.9-40        #> [73] geometry_0.4.7       viridisLite_0.4.2    rlang_1.1.1          #> [76] Rcpp_1.0.12          glue_1.8.0           xml2_1.3.6           #> [79] svglite_2.1.3        rstudioapi_0.17.1    jsonlite_1.8.9       #> [82] plyr_1.8.7           R6_2.5.1             systemfonts_1.1.0    #> [85] fs_1.5.2"},{"path":"https://nanostring-biostats.github.io/FastReseg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Danaher. Author. Lidan Wu. Author, maintainer.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Danaher P, Wu L (2025). FastReseg: Detection Correction Cell Segmentation Error Based Spatial Profile Transcripts. R package version 1.0.3, https://github.com/Nanostring-Biostats/FastReseg, https://nanostring-biostats.github.io/FastReseg/.","code":"@Manual{,   title = {FastReseg: Detection and Correction of Cell Segmentation Error Based on Spatial Profile of Transcripts},   author = {Patrick Danaher and Lidan Wu},   year = {2025},   note = {R package version 1.0.3,   https://github.com/Nanostring-Biostats/FastReseg},   url = {https://nanostring-biostats.github.io/FastReseg/}, }"},{"path":"https://nanostring-biostats.github.io/FastReseg/index.html","id":"fastreseg","dir":"","previous_headings":"","what":"Detection and Correction of Cell Segmentation Error Based on Spatial Profile of Transcripts","title":"Detection and Correction of Cell Segmentation Error Based on Spatial Profile of Transcripts","text":"R package detection correction cell segmentation error based spatial profile transcripts","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/index.html","id":"manuscript","dir":"","previous_headings":"","what":"Manuscript:","title":"Detection and Correction of Cell Segmentation Error Based on Spatial Profile of Transcripts","text":"Wu L, Beechem JM, Danaher P. FastReseg: using transcript locations refine image-based cell segmentation results spatial transcriptomics. bioRxiv 2024.12.05.627051; doi: https://doi.org/10.1101/2024.12.05.627051","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/index.html","id":"dev-notes","dir":"","previous_headings":"","what":"Dev notes","title":"Detection and Correction of Cell Segmentation Error Based on Spatial Profile of Transcripts","text":"FastReseg package processes spatial transcriptome data 5 different modules: Preprocess whole dataset runPreprocess() get baseline cutoffs transcript score spatial local density whole dataset. Parallel processing individual FOV: core wrapper fastReseg_perFOV_full_process() contains 3 modules step. runSegErrorEvaluation() detect cells cell segmentation error based spatial dependency transcript score given transcript data.frame. runTranscriptErrorDetection() identify transcript groups poor fit current cell segments. runSegRefinement() re-segment low-fit transcript groups given neighborhood. Combine outcomes multiple FOVs one Pipeline wrappers combine resegmentation outputs individual FOVs one. convenience, two pipeline wrapper functions included streamline processing multi-FOV dataset different exit points. fastReseg_flag_all_errors(): performs preprocess evaluates flags segmentation error input files, optional return gene expression matrix putative contaminating transcripts trimmed current cell segments. fastReseg_full_pipeline(): performs preprocess, detect correct cell segmentation errors trimming, splitting merging given local neighborhood poor-fit transcript groups, can process multiple input files parallel.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/index.html","id":"system-requirements","dir":"","previous_headings":"","what":"System requirements","title":"Detection and Correction of Cell Segmentation Error Based on Spatial Profile of Transcripts","text":"R (>= 3.5.0) UNIX, Mac Windows see DESCRIPTION full dependencies","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/index.html","id":"demo","dir":"","previous_headings":"","what":"Demo","title":"Detection and Correction of Cell Segmentation Error Based on Spatial Profile of Transcripts","text":"See “vignettes” folder. tutorial.Rmd tutorial.html example usages streamline pipeline wrappers modular functions individual task. a__flagErrorOnly_on_SMIobject.R flagging segmentation errors without correcting, interfacing FastReseg SMI TAP pipeline (Giotto). b__fastReseg_on_SMIobject.R runing entire resegmentation workfkow given dataset, example dataset, interfacing FastReseg SMI TAP pipeline (Giotto).","code":""},{"path":[]},{"path":[]},{"path":"https://nanostring-biostats.github.io/FastReseg/index.html","id":"install-the-development-version-from-github","dir":"","previous_headings":"Installation","what":"Install the development version from GitHub","title":"Detection and Correction of Cell Segmentation Error Based on Spatial Profile of Transcripts","text":"","code":"# to use with R 4.3.x if(!requireNamespace(\"GiottoUtils\", quietly=TRUE))   remotes::install_github(\"drieslab/GiottoClass\", upgrade=\"never\",   ref = \"bec3c79398a9aff299a01cc152ff6f2245a8f965\")  if(!requireNamespace(\"GiottoClass\", quietly=TRUE))   remotes::install_github(\"drieslab/GiottoClass\", upgrade=\"never\",   ref = \"6d9d385beebcc57b78d34ffbe30be1ef0a184681\") # install FastReseg from github devtools::install_github(\"Nanostring-Biostats/FastReseg\",                          build_vignettes = TRUE, ref = \"main\")"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/FastReseg-package.html","id":null,"dir":"Reference","previous_headings":"","what":"FastReseg: Detection and Correction of Cell Segmentation Error Based on Spatial Profile of Transcripts — FastReseg-package","title":"FastReseg: Detection and Correction of Cell Segmentation Error Based on Spatial Profile of Transcripts — FastReseg-package","text":"R package detection correction cell segmentation error based spatial profile transcripts","code":""},{"path":[]},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/FastReseg-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"FastReseg: Detection and Correction of Cell Segmentation Error Based on Spatial Profile of Transcripts — FastReseg-package","text":"Maintainer: Lidan Wu lwu@nanostring.com (ORCID) Authors: Patrick Danaher pdanaher@nanostring.com (ORCID)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkAndPrepInputs_perFOV.html","id":null,"dir":"Reference","previous_headings":"","what":"checkAndPrepInputs_perFOV — checkAndPrepInputs_perFOV","title":"checkAndPrepInputs_perFOV — checkAndPrepInputs_perFOV","text":"supporting function fastReseg_perFOV_full_process, checks preps inputs full resegmentation pipeline provided transcript_df calculates distance cutoffs set values config_spatNW_transcript leiden_config provided.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkAndPrepInputs_perFOV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkAndPrepInputs_perFOV — checkAndPrepInputs_perFOV","text":"","code":"checkAndPrepInputs_perFOV(   all_celltypes,   all_genes,   transcript_df,   transID_coln = \"UMI_transID\",   transGene_coln = \"target\",   cellID_coln = \"UMI_cellID\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   extracellular_cellID = NULL,   flagModel_TransNum_cutoff = 50,   molecular_distance_cutoff = 2.7,   cellular_distance_cutoff = NULL,   score_baseline = NULL,   lowerCutoff_transNum = NULL,   higherCutoff_transNum = NULL,   groupTranscripts_method = c(\"dbscan\", \"delaunay\"),   spatialMergeCheck_method = c(\"leidenCut\", \"geometryDiff\"),   cutoff_spatialMerge = 0.5,   leiden_config = NULL,   config_spatNW_transcript = NULL )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkAndPrepInputs_perFOV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkAndPrepInputs_perFOV — checkAndPrepInputs_perFOV","text":"all_celltypes vector cell types consider analysis listed columns score_GeneMatrix parent function all_genes vector genes consider analysis listed rows score_GeneMatrix parent function transcript_df data.frame transcript columns transcript_id, target gene name, original cell_id, spatial coordinates. transID_coln column name transcript_ID transcript_df transGene_coln column name target gene name transcript_df cellID_coln column name cell_ID transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates transcript_df extracellular_cellID vector cell_ID extracellular transcripts removed resegmention pipeline (default = NULL) flagModel_TransNum_cutoff cutoff transcript number spatial modeling identification wrongly segmented cells (default = 50) molecular_distance_cutoff maximum molecule--molecule distance within connected transcript group, unit input spatial coordinate (default = 2.7 micron). set NULL, pipeline first randomly choose 2500 cells 10 random picked ROIs search radius 5 times cellular_distance_cutoff, calculate minimal molecular distance picked cells. pipeline use 5 times 90% quantile minimal molecular distance molecular_distance_cutoff. calculation slow recommended large transcript data.frame. cellular_distance_cutoff maximum cell--cell distance x, y center query cells center neighbor cells direct contact, unit input spatial coordinate. Default = NULL use 2 times average 2D cell diameter. score_baseline named vector score baseline cell type listed score_GeneMatrix per cell transcript score higher baseline required call cell type high enough confidence lowerCutoff_transNum named vector transcript number cutoff cell type higher cutoff required keep query cell higherCutoff_transNum named vector transcript number cutoff cell type lower cutoff required keep query cell neighbor cell consistent cell type. groupTranscripts_method use either \"dbscan\" \"delaunay method\" group transcripts space (default = \"dbscan\") spatialMergeCheck_method use either \"leidenCut\" (2D 3D) \"geometryDiff\" (2D ) method determine whether cell pair merging event allowed space (default = \"leidenCut\") cutoff_spatialMerge spatial constraint valid merging event two source transcript groups, default = 0.5 50% cutoff, set 0 skip spatial constraint evaluation merging. spatialMergeCheck_method = \"leidenCut\", minimal percentage transcripts shared membership query cell neighbor cells leiden clustering results valid merging event. spatialMergeCheck_method = \"geometryDiff\", maximum percentage white space change upon merging query cell neighbor cell valid merging event. leiden_config (leidenCut) list configuration pass reticulate igraph::cluster_leiden function, including objective_function, resolution_parameter, beta, n_iterations. config_spatNW_transcript configuration list create spatial network transcript level, see manual createSpatialDelaunayNW_from_spatLocs details, set NULL use default config (default = NULL)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkAndPrepInputs_perFOV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkAndPrepInputs_perFOV — checkAndPrepInputs_perFOV","text":"list transcript_df transcript data.frame ready downstream full resgmentation pipeline cellular_distance_cutoff maximum cell--cell distance x, y center query cells center neighbor cells direct contact, unit input spatial coordinate. molecular_distance_cutoff maximum molecule--molecule distance within connected transcript group, unit input spatial coordinate config_spatNW_transcript configuration list create spatial network transcript level leiden_config configuration list leiden clustering spatial network transcript level merge event evaluation","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkTransFileInputsAndLoadFirst.html","id":null,"dir":"Reference","previous_headings":"","what":"checkTransFileInputsAndLoadFirst — checkTransFileInputsAndLoadFirst","title":"checkTransFileInputsAndLoadFirst — checkTransFileInputsAndLoadFirst","text":"check input formats transcript data.frame file list load 1st fov","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkTransFileInputsAndLoadFirst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkTransFileInputsAndLoadFirst — checkTransFileInputsAndLoadFirst","text":"","code":"checkTransFileInputsAndLoadFirst(   transcript_df = NULL,   transDF_fileInfo = NULL,   filepath_coln = \"file_path\",   prefix_colns = c(\"slide\", \"fov\"),   fovOffset_colns = c(\"stage_X\", \"stage_Y\"),   pixel_size = 0.18,   zstep_size = 0.8,   transID_coln = NULL,   transGene_coln = \"target\",   cellID_coln = \"CellId\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   invert_y = TRUE,   extracellular_cellID = NULL )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkTransFileInputsAndLoadFirst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkTransFileInputsAndLoadFirst — checkTransFileInputsAndLoadFirst","text":"transcript_df data.frame transcript level information unique CellId, set NULL read transDF_fileInfo transDF_fileInfo data.frame row individual file per FOV transcript data.frame within coordinates CellId unique, columns include file path per FOV transcript data.frame file, annotation columns like slide fov used prefix creating unique cell_ID across entire data set; NULL, use provided transcript_df directly filepath_coln column name individual file per FOV transcript data.frame transDF_fileInfo prefix_colns column names annotation transDF_fileInfo, added CellId prefix creating unique cell_ID entire data set; set NULL use original transID_coln cellID_coln fovOffset_colns column name coordinate offsets 1st 2nd dimension per FOV transcript data.frame transDF_fileInfo, unit micron Notice assays like SMI XY axes swapped stage FOV fovOffset_colns c(\"stage_Y\", \"stage_X\"). pixel_size micrometer size image pixel listed 1st 2nd dimension spatLocs_colns transcript_df zstep_size micrometer size z-step optional 3rd dimension spatLocs_colns transcript_df transID_coln column name transcript_ID transcript_df, default = NULL use row index transcript transcript_df; prefix_colns != NULL, unique transcript_id generated prefix_colns transID_coln transcript_df transGene_coln column name target gene name transcript_df cellID_coln column name cell_ID transcript_df; prefix_colns != NULL, unique cell_ID generated prefix_colns cellID_coln transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates transcript_df invert_y flag invert y axis local coordinates stitching (default = TRUE) extracellular_cellID vector cell_ID extracellular transcripts removed resegmention pipeline (default = NULL)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkTransFileInputsAndLoadFirst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkTransFileInputsAndLoadFirst — checkTransFileInputsAndLoadFirst","text":"list contains transcript_df downstream process extracellular transcript data.frame ' intraC data.frame intracellular transcript, UMI_transID UMI_cellID column names unique transcript_id cell_id, target column name target gene name extraC data.frame extracellular transcript, structure intraC data.frame returned list","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkTypeLengthValue.html","id":null,"dir":"Reference","previous_headings":"","what":"checkTypeLengthValue — checkTypeLengthValue","title":"checkTypeLengthValue — checkTypeLengthValue","text":"checking whether single value config correct data type, length value range","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkTypeLengthValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkTypeLengthValue — checkTypeLengthValue","text":"","code":"checkTypeLengthValue(   config,   name,   expect_type,   expect_len = NULL,   expect_range = c(\"equal\", \"larger\", \"smaller\", \"within\"),   expect_value = NULL )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkTypeLengthValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkTypeLengthValue — checkTypeLengthValue","text":"config list storing config name parameter name config list expect_type expected data type vector, e.g. c(\"numeric\",\"integer\") integer values, \"character\", \"logical\", etc expect_len expected length, NULL length expect_range expect value range; use \"larger\",\"smaller\", \"equal\", \"within\" numeric values, use \"within\" character expect_value single numeric value character vector used check expect_range, NULL value","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkTypeLengthValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkTypeLengthValue — checkTypeLengthValue","text":"message config[name] satisfy criteria","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/checkTypeLengthValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"checkTypeLengthValue — checkTypeLengthValue","text":"","code":"config <- list(pos_Integer = 1, neg_value = -0.2, flag = TRUE,                length2character = c(\"a\",\"b\")) # check if positive integer of any length FastReseg:::checkTypeLengthValue(config, \"pos_Integer\",                                  expect_type = c(\"numeric\",\"integer\"),                                  expect_range = \"larger\", expect_value = 0) #> character(0) # check if negative value of any length FastReseg:::checkTypeLengthValue(config, \"neg_value\",                                  expect_type = \"numeric\",                                  expect_range = \"smaller\", expect_value = 0) #> character(0) # check if logical value FastReseg:::checkTypeLengthValue(config, \"flag\", expect_type = \"logical\") #> character(0) # check if character has 2 elements within c(\"a\",\"b\") FastReseg:::checkTypeLengthValue(config, \"length2character\",                                  expect_type = \"character\", expect_len = 2,                                  expect_range = \"within\", expect_value = c(\"a\",\"b\")) #> character(0)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/check_config_leiden.html","id":null,"dir":"Reference","previous_headings":"","what":"check_config_leiden — check_config_leiden","title":"check_config_leiden — check_config_leiden","text":"check config used leiden clustering, assign default values missing arguments","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/check_config_leiden.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_config_leiden — check_config_leiden","text":"","code":"check_config_leiden(config)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/check_config_leiden.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_config_leiden — check_config_leiden","text":"config list config used create spatial network using delaunay method via GiottoClass::createSpatialNetwork","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/check_config_leiden.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_config_leiden — check_config_leiden","text":"corrected config list","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/check_config_spatialNW.html","id":null,"dir":"Reference","previous_headings":"","what":"check_config_spatialNW — check_config_spatialNW","title":"check_config_spatialNW — check_config_spatialNW","text":"check config used create spatial network, assign default values missing arguments","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/check_config_spatialNW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_config_spatialNW — check_config_spatialNW","text":"","code":"check_config_spatialNW(config, spat_locs)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/check_config_spatialNW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_config_spatialNW — check_config_spatialNW","text":"config list config used create spatial network using delaunay method via GiottoClass::createSpatialNetwork spat_locs data.frame spatial location info","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/check_config_spatialNW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_config_spatialNW — check_config_spatialNW","text":"corrected config list","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/choose_distance_cutoff.html","id":null,"dir":"Reference","previous_headings":"","what":"choose_distance_cutoff — choose_distance_cutoff","title":"choose_distance_cutoff — choose_distance_cutoff","text":"Choose appropriate cellular distance cutoff molecular distance cutoff based input transcript data.frame downstream resegmentation; cellular distance cutoff defined search radius direct neighbor cell, molecular distance cutoff defined maximum distance two neighbor transcripts source cells.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/choose_distance_cutoff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"choose_distance_cutoff — choose_distance_cutoff","text":"","code":"choose_distance_cutoff(   transcript_df,   transID_coln = \"UMI_transID\",   cellID_coln = \"UMI_cellID\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   extracellular_cellID = NULL,   run_molecularDist = TRUE,   sampleSize_nROI = 10,   sampleSize_cellNum = 2500,   seed = 123 )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/choose_distance_cutoff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"choose_distance_cutoff — choose_distance_cutoff","text":"transcript_df data.frame transcript transID_coln column name transcript_ID transcript_df cellID_coln column name cell_ID transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates transcript_df extracellular_cellID vector cell_ID extracellular transcripts removed resegmention pipeline (default = NULL) run_molecularDist flag run molecular distant cutoff estimation, default = TRUE sampleSize_nROI number ROIs randomly picked data molecular distance cutoff estimation sampleSize_cellNum maximum number cells picked ROIs molecular distance cutoff estimation seed random seed sub-sampling cells whole dataset molecular distance cutoff estimation","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/choose_distance_cutoff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"choose_distance_cutoff — choose_distance_cutoff","text":"list cellular_distance_cutoff maximum cell--cell distance x, y center query cells center neighbor cells direct contact, unit input spatial coordinate. perCell_coordDT data.table cell row, spatial XY coordinates centroid dimensions bounding box column molecular_distance_cutoff maximum molecule--molecule distance within connected transcript group, unit input spatial coordinate; return run_molecularDist = TRUE distance_profile named vector quantile profile minimal molecular distance transcripts belong different cells step size 10% quantile; return run_molecularDist = TRUE","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/choose_distance_cutoff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"choose_distance_cutoff — choose_distance_cutoff","text":"cellular_distance_cutoff defined maximum cell--cell distance x, y center query cells center neighbor cells direct contact. function calculates average 2D cell diameter input data.frame use 2 times mean cell diameter cellular_distance_cutoff. molecular_distance_cutoff defined maximum molecule--molecule distance within connected transcript groups belonging source cells. function first randomly choose sampleSize_cellNum number cells sampleSize_nROI number randomly picked ROIs search radius 5 times cellular_distance_cutoff, calculate minimal molecular distance picked cells. function use 5 times 90% quantile minimal molecular distance molecular_distance_cutoff. calculation slow recommended large transcript data.frame.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/choose_distance_cutoff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"choose_distance_cutoff — choose_distance_cutoff","text":"","code":"data(mini_transcriptDF) # cell_ID for extracellualr transcripts extracellular_cellID <- mini_transcriptDF[which(mini_transcriptDF$CellId ==0), 'cell_ID'] distCutoffs <- choose_distance_cutoff(mini_transcriptDF,                                       extracellular_cellID = extracellular_cellID) #> Use 2 times of average 2D cell diameter as cellular_distance_cutoff = 24.2375 for searching of neighbor cells. #> Identified 3D coordinates with variance.  #> Distribution of minimal molecular distance between 1375 cells: 0, 0.08, 0.14, 0.21, 0.3, 0.4, 0.51, 0.63, 0.78, 0.86, 3.92, at quantile = 0%, 10%, 20%, 30%, 40%, 50%, 60%, 70%, 80%, 90%, 100%. #> Use 5 times of 90% quantile of minimal 3D molecular distance between picked cells as `molecular_distance_cutoff` = 4.2790 for defining direct neighbor cells."},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/compartment_and_add_extra.html","id":null,"dir":"Reference","previous_headings":"","what":"compartment_and_add_extra — compartment_and_add_extra","title":"compartment_and_add_extra — compartment_and_add_extra","text":"add compartment label updated transcript data.frame returned fastReseg_perFOV_full_process optional combine transcripts got trimmed originally extracellular transcripts","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/compartment_and_add_extra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compartment_and_add_extra — compartment_and_add_extra","text":"","code":"compartment_and_add_extra(   updated_transDF,   transcript_df,   updatedCellID_coln = \"updated_cellID\",   compartment_coln = \"transComp\",   combine_extra = FALSE )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/compartment_and_add_extra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compartment_and_add_extra — compartment_and_add_extra","text":"updated_transDF transcript data.frame transcript id updated cell segmentation, one outputs  fastReseg_perFOV_full_process transcript_df list 2 elements, intraC extraC intracellular extracellular transcript data.frame, respectively; columns contain transcript id original cell segmentation, output prepare_perFOV_transDF updatedCellID_coln column name updated cell ID updated_transDF, default = \"updated_cellID\" compartment_coln column name transcript compartment label, default = \"transComp\" combine_extra flag combine original extracellular transcripts trimmed transcripts back updated transcript data.frame, slow process many transcript FOV file. (default = FALSE)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/compartment_and_add_extra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compartment_and_add_extra — compartment_and_add_extra","text":"transcript data.frame containing original transcripts updated cell segmentation transcript compartments intraC, extraC trimmed","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/createSpatialDelaunayNW_from_spatLocs.html","id":null,"dir":"Reference","previous_headings":"","what":"createSpatialDelaunayNW_from_spatLocs — createSpatialDelaunayNW_from_spatLocs","title":"createSpatialDelaunayNW_from_spatLocs — createSpatialDelaunayNW_from_spatLocs","text":"generate delaunay network based provided config spatial location using GiottoClass functions","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/createSpatialDelaunayNW_from_spatLocs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createSpatialDelaunayNW_from_spatLocs — createSpatialDelaunayNW_from_spatLocs","text":"","code":"createSpatialDelaunayNW_from_spatLocs(   config_spatNW = list(name = \"spatial_network\", dimensions = \"all\", method = \"Delaunay\",     minimum_k = 0, delaunay_method = \"delaunayn_geometry\", maximum_distance_delaunay =     \"auto\", options = \"Pp\", Y = TRUE, j = TRUE, S = 0),   spatLocs_df,   ID_column = \"cell_ID\",   spatLocs_column = c(\"sdimx\", \"sdimy\", \"sdimz\") )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/createSpatialDelaunayNW_from_spatLocs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createSpatialDelaunayNW_from_spatLocs — createSpatialDelaunayNW_from_spatLocs","text":"config_spatNW configuration list spatLocs_df data.frame spatial location entry cell transcript ID_column column name entry ID spatLocs_df spatLocs_column column name 1st, 2nd, optional 3rd dimension spatial coordinates spatLocs_df","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/createSpatialDelaunayNW_from_spatLocs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"createSpatialDelaunayNW_from_spatLocs — createSpatialDelaunayNW_from_spatLocs","text":"delaunay_network_Obj, spatial network object created GiottoClass functions","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/createSpatialDelaunayNW_from_spatLocs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"createSpatialDelaunayNW_from_spatLocs — createSpatialDelaunayNW_from_spatLocs","text":"function leverages GiottoClass package create spatial networks spatial coordinates. example config_spatNW list shown possible options controlling spatial network generation. details, see manual GiottoClass::createSpatialNetwork. #' ' name spatial network name; default = 'spatial_network' dimensions vector spatial dimensions use, default = '' use dimentions method method name creating spatial network, default = 'Delaunay' minimum_k minimum number nearest neighbors maximum_distance != NULL delaunay_method Delaunay method use, choose c(\"delaunayn_geometry\", \"deldir\", \"RTriangle\"), default = \"delaunayn_geometry\" maximum_distance_delaunay distance cuttoff nearest neighbors consider Delaunay network, default = \"auto\" options (geometry) String containing extra control options underlying Qhull command; see Qhull documentation (../doc/qhull/html/qdelaun.html) available options; default = Pp, report precision problems) Y (RTriangle) TRUE prohibits insertion Steiner points mesh boundary j (RTriangle) TRUE jettisons vertices part final triangulation output. S (RTriangle) Specifies maximum number added Steiner points.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/decide_ReSegment_Operations.html","id":null,"dir":"Reference","previous_headings":"","what":"decide_ReSegment_Operations — decide_ReSegment_Operations","title":"decide_ReSegment_Operations — decide_ReSegment_Operations","text":"Evaluate neighborhood information score transcript number cutoff decide resegmetation operations. Use either leiden clustering geometry statistics determine whether merge event allowed.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/decide_ReSegment_Operations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"decide_ReSegment_Operations — decide_ReSegment_Operations","text":"","code":"decide_ReSegment_Operations(   neighborhood_df,   selfcellID_coln = \"CellId\",   transNum_coln = \"transcript_num\",   selfCellType_coln = \"self_celltype\",   selfScore_coln = \"score_under_self\",   neighborcellID_coln = \"neighbor_CellId\",   neighborCellType_coln = \"neighbor_celltype\",   neighborScore_coln = \"score_under_neighbor\",   score_baseline = NULL,   lowerCutoff_transNum = NULL,   higherCutoff_transNum = NULL,   transcript_df,   cellID_coln = \"CellId\",   transID_coln = \"transcript_id\",   transSpatLocs_coln = c(\"x\", \"y\", \"z\"),   spatialMergeCheck_method = c(\"leidenCut\", \"geometryDiff\"),   cutoff_spatialMerge = 0.5,   leiden_config = list(objective_function = c(\"CPM\", \"modularity\"), resolution_parameter     = 1, beta = 0.01, n_iterations = 200),   config_spatNW_transcript = NULL )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/decide_ReSegment_Operations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"decide_ReSegment_Operations — decide_ReSegment_Operations","text":"neighborhood_df data.frame containing neighborhood information query cells, expected output get_neighborhood_content function. selfcellID_coln column name cell_ID query cell neighborhood_df transNum_coln column name transcript number query cell neighborhood_df selfCellType_coln column name cell_type query cell neighborhood_df selfScore_coln column name average transcript score query cell neighborhood_df neighborcellID_coln column name cell_ID neighbor cell neighborhood_df neighborCellType_coln column name cell_type neighbor cell neighborhood_df neighborScore_coln column name average transcript score neighbor cell neighborhood_df score_baseline named vector score baseline cell type listed neighborhood_df per cell transcript score higher baseline required call cell type high enough confidence lowerCutoff_transNum named vector transcript number cutoff cell type higher cutoff required keep query cell higherCutoff_transNum named vector transcript number cutoff cell type lower cutoff required keep query cell neighbor cell consistent cell type. transcript_df data.frame transcript_id, target/geneName, x, y cell_id cellID_coln column name cell_ID transcript_df transID_coln column name transcript_ID transcript_df transSpatLocs_coln column name 1st, 2nd, optional 3rd spatial dimension transcript transcript_df spatialMergeCheck_method use either \"leidenCut\" (2D 3D) \"geometryDiff\" (2D ) method determine whether cell pair merging event allowed space (default = \"leidenCut\") cutoff_spatialMerge spatial constraint valid merging event two source transcript groups, default = 0.5 50% cutoff, set 0 skip spatial constraint evaluation merging. spatialMergeCheck_method = \"leidenCut\", minimal percentage transcripts shared membership query cell neighbor cells leiden clustering results valid merging event. spatialMergeCheck_method = \"geometryDiff\", maximum percentage white space change upon merging query cell neighbor cell valid merging event. leiden_config (leidenCut) list configuration pass reticulate igraph::cluster_leiden function, including objective_function, resolution_parameter, beta, n_iterations. config_spatNW_transcript (leidenCut) configuration list create spatial network transcript level, see manual createSpatialDelaunayNW_from_spatLocs details, set NULL use default config","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/decide_ReSegment_Operations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"decide_ReSegment_Operations — decide_ReSegment_Operations","text":"list cells_to_discard, vector cell ID discarded resegmentation cells_to_update, named vector cell ID cell_ID name replaced cell_ID value. cells_to_keep, vector cell ID kept . reseg_full_converter, single named vector cell ID update original cell ID, assign NA cells_to_discard.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/decide_ReSegment_Operations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"decide_ReSegment_Operations — decide_ReSegment_Operations","text":"Evaluate neighborhood information score transcript number cutoff decide resegmetation operations like following: merge query neighbor consist cell type fewer average transcript number cutoff, higherCutoff_transNum; keep query new cell id consist neighbor cell type, high self score higher minimal transcript number, lowerCutoff_transNum; discard rest query cells consistent neighbor cell type, fewer transcript number based lowerCutoff_transNum, /low self score. function uses network component analysis resolve conflict due merging multiple query cells one. cutoff_spatialMerge > 0, function applies additional spatial constraint valid merging event query cell neighbor cell. case spatialMergeCheck_method = \"leidenCut\", function builds spatial network transcript level, leiden clustering  spatial network, decides whether merge allowed based observed shared leiden membership two source transcript groups putative merging event; provided cutoff_spatialMerge gives minimal values shared leiden memberhsip valid merging event. case spatialMergeCheck_method = \"geometryDiff\", function first calculate white space, .e. area difference convex concave hulls, respectively, query cell, neighbor cell, corresponding merged cell; calculate white space difference merged cell two separate cells normalize value respect concave area query neighbor cells, respectively; lastly, allow valid merging normalized white space difference upon merging query neighbor cells smaller provided cutoff_spatialMerge.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/estimate_MeanProfile.html","id":null,"dir":"Reference","previous_headings":"","what":"estimate_MeanProfile — estimate_MeanProfile","title":"estimate_MeanProfile — estimate_MeanProfile","text":"Given cell assignments (posterior probabilities), estimate mean profile cluster.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/estimate_MeanProfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"estimate_MeanProfile — estimate_MeanProfile","text":"","code":"estimate_MeanProfile(counts, clust, s, bg)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/estimate_MeanProfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"estimate_MeanProfile — estimate_MeanProfile","text":"counts Counts matrix, cells X genes. clust Vector cluster assignments, matrix probabilities cells (rows) belonging clusters (columns). s Vector scaling factors cell, e.g. defined cell area. bg Expected background","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/estimate_MeanProfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"estimate_MeanProfile — estimate_MeanProfile","text":"matrix cluster profiles, genes X clusters","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/estimate_MeanProfile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"estimate_MeanProfile — estimate_MeanProfile","text":"E step: estimate cluster's mean profile (Ptolemy Estep function) estimate cluster's mean profile (Ptolemy Estep function)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_CellGeneExpr.html","id":null,"dir":"Reference","previous_headings":"","what":"per cell gene expression matrix based on raw transcript data files generated by SMI — example_CellGeneExpr","title":"per cell gene expression matrix based on raw transcript data files generated by SMI — example_CellGeneExpr","text":"example dataset based cropped regions two different FOVs SMI RNA readout run FFPE melanoma tissue sample. corresponding raw transcript data files extdata/Run4104_FOV001__complete_code_cell_target_call_coord.csv extdata/Run4104_FOV002__complete_code_cell_target_call_coord.csv raw transcript data files 1 transcript per row 25 different meta information columns. important columns x spatial coordinate transcript x-axis given FOV, unit pixel, 0.18um per pixel y spatial coordinate transcript y-axis given FOV, unit pixel, 0.18um per pixel z spatial coordinate transcript z-axis given FOV, unit z-step, 0.8um per z-step target gene identity given transcript CellId cell label assignment given transcript within given FOV based original cell segmentation per cell gene expression matrix calculated raw transcript data files include 960 true target genes without including control probes.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_CellGeneExpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"per cell gene expression matrix based on raw transcript data files generated by SMI — example_CellGeneExpr","text":"","code":"data(example_CellGeneExpr)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_CellGeneExpr.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"per cell gene expression matrix based on raw transcript data files generated by SMI — example_CellGeneExpr","text":"object class \"matrix\" 754 cells row 960 genes columns","code":""},{"path":[]},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_baselineCT.html","id":null,"dir":"Reference","previous_headings":"","what":"Percentile profile for single cell distribution of transcript number and average tLLR score from example dataset for spatial transcriptional profiling of tissue — example_baselineCT","title":"Percentile profile for single cell distribution of transcript number and average tLLR score from example dataset for spatial transcriptional profiling of tissue — example_baselineCT","text":"example dataset based one run SMI RNA readout FFPE melanoma tissue samples. single cell distribution calculated transcript number per cell average transcript tLLR score per cell, grouped assigned cell types based original cell segmentation outcome get percentile profile cell type 25% increment step.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_baselineCT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percentile profile for single cell distribution of transcript number and average tLLR score from example dataset for spatial transcriptional profiling of tissue — example_baselineCT","text":"","code":"data(example_baselineCT)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_baselineCT.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Percentile profile for single cell distribution of transcript number and average tLLR score from example dataset for spatial transcriptional profiling of tissue — example_baselineCT","text":"object class \"list\" 2 elements span_score matrix average transcript tLLR score per cell 22 distinct cell types rows, percentile (0%, 25%, 50%, 75%, 100%) columns span_transNum matrix transcript number per cell 22 distinct cell types rows, percentile (0%, 25%, 50%, 75%, 100%) columns","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_clust.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster assignment for cells based on per cell gene expression profile and reference profiles in example data set — example_clust","title":"Cluster assignment for cells based on per cell gene expression profile and reference profiles in example data set — example_clust","text":"example dataset based cropped regions two different FOVs SMI RNA readout run FFPE melanoma tissue sample. corresponding raw transcript data files extdata/Run4104_FOV001__complete_code_cell_target_call_coord.csv extdata/Run4104_FOV002__complete_code_cell_target_call_coord.csv raw transcript data files 1 transcript per row 25 different meta information columns. important columns x spatial coordinate transcript x-axis given FOV, unit pixel, 0.18um per pixel y spatial coordinate transcript y-axis given FOV, unit pixel, 0.18um per pixel z spatial coordinate transcript z-axis given FOV, unit z-step, 0.8um per z-step target gene identity given transcript CellId cell label assignment given transcript within given FOV based original cell segmentation cluster assignment cell calculated based corresponding per cell gene expression profiles, data/example_CellGeneExpr.RData, reference profiles, data/example_refProfiles.RData.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_clust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster assignment for cells based on per cell gene expression profile and reference profiles in example data set — example_clust","text":"","code":"data(example_clust)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_clust.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cluster assignment for cells based on per cell gene expression profile and reference profiles in example data set — example_clust","text":"object class \"character\" 754 cells order cells row data/example_CellGeneExpr.RData.","code":""},{"path":[]},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_refProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for cell type specific reference profiles — example_refProfiles","title":"Data for cell type specific reference profiles — example_refProfiles","text":"Semi-supervised cell typing conducted example SMI RNA readout FFPE melanoma tissue samples contains 2 tissue sections 3 FOVs per section. resulting cell typing outcomes used estimate mean profile identified cell type/cluster using \"estimate_MeanProfile\". corresponding average cell-type-specific profiles stored data(\"example_refProfiles\") used reference profiles.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_refProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for cell type specific reference profiles — example_refProfiles","text":"","code":"data(example_refProfiles)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_refProfiles.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for cell type specific reference profiles — example_refProfiles","text":"object class \"matrix\" 960 genes rows, 22 distinct cell types columns.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/example_refProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data for cell type specific reference profiles — example_refProfiles","text":"","code":"data(example_refProfiles)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_flag_all_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"fastReseg_flag_all_errors — fastReseg_flag_all_errors","title":"fastReseg_flag_all_errors — fastReseg_flag_all_errors","text":"Wrapper process multiple files one dataset segmentation error detection transcript level. function reformats individual transcript data.frame unique IDs global coordinate system save disk, scores cell segmentation error flags transcripts low goodness--fit current cells.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_flag_all_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fastReseg_flag_all_errors — fastReseg_flag_all_errors","text":"","code":"fastReseg_flag_all_errors(   counts,   clust = NULL,   refProfiles = NULL,   transDF_fileInfo = NULL,   filepath_coln = \"file_path\",   prefix_colns = c(\"slide\", \"fov\"),   fovOffset_colns = c(\"stage_X\", \"stage_Y\"),   pixel_size = 0.18,   zstep_size = 0.8,   transcript_df = NULL,   transID_coln = NULL,   transGene_coln = \"target\",   cellID_coln = \"CellId\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   invert_y = TRUE,   extracellular_cellID = NULL,   flagModel_TransNum_cutoff = 50,   flagCell_lrtest_cutoff = 5,   svmClass_score_cutoff = -2,   svm_args = list(kernel = \"radial\", scale = FALSE, gamma = 0.4),   path_to_output = \"reSeg_res\",   transDF_export_option = c(1, 2, 0),   return_trimmed_perCell = FALSE,   combine_extra = FALSE,   ctrl_genes = NULL,   seed_transError = NULL,   percentCores = 0.75 )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_flag_all_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fastReseg_flag_all_errors — fastReseg_flag_all_errors","text":"counts Counts matrix entire data set, cells X genes. clust Vector cluster assignments cell counts, NULL automatically assign cell cluster cell based maximum transcript score given provided refProfiles refProfiles matrix cluster profiles, genes X clusters, default = NULL use external cluster assignments transDF_fileInfo data.frame row individual file per FOV transcript data.frame within coordinates CellId unique, columns include file path per FOV transcript data.frame file, annotation columns like slide fov used prefix creating unique cell_ID across entire data set; NULL, use provided transcript_df directly filepath_coln column name individual file per FOV transcript data.frame transDF_fileInfo prefix_colns column names annotation transDF_fileInfo, added CellId prefix creating unique cell_ID entire data set; set NULL use original transID_coln cellID_coln fovOffset_colns column name coordinate offsets 1st 2nd dimension per FOV transcript data.frame transDF_fileInfo, unit micron Notice assays like SMI XY axes swapped stage FOV fovOffset_colns c(\"stage_Y\", \"stage_X\"). pixel_size micrometer size image pixel listed 1st 2nd dimension spatLocs_colns transcript_df zstep_size micrometer size z-step optional 3rd dimension spatLocs_colns transcript_df transcript_df data.frame transcript level information unique CellId, default = NULL read transDF_fileInfo transID_coln column name transcript_ID transcript_df, default = NULL use row index transcript transcript_df; prefix_colns != NULL, unique transcript_id generated prefix_colns transID_coln transcript_df transGene_coln column name target gene name transcript_df cellID_coln column name cell_ID transcript_df; prefix_colns != NULL, unique cell_ID generated prefix_colns cellID_coln transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates transcript_df invert_y flag invert y axis local coordinates stitching (default = TRUE) extracellular_cellID vector cell_ID extracellular transcripts removed resegmention pipeline (default = NULL) flagModel_TransNum_cutoff cutoff transcript number spatial modeling identification wrongly segmented cells (default = 50) flagCell_lrtest_cutoff cutoff lrtest_nlog10P identify putative wrongly segmented cells strong spatial dependency transcript score profile svmClass_score_cutoff cutoff transcript score separate high low score transcripts SVM (default = -2) svm_args list arguments pass svm function identifying low-score transcript groups space, typically involve kernel, gamma, scale path_to_output file path output folder; directory created function exists; flagged_transDF, reformatted transcript data.frame transcripts low goodness--fit flagged SVM_class = 0, modStats_ToFlagCells, per cell evaluation output segmentation error, classDF_ToFlagTrans, class assignment transcripts within flagged cells saved individual csv files FOV, respectively. transDF_export_option option export updated transcript_df, 0 export, 1 write path_to_output disk csv FOV, 2 return function list (default = 1) return_trimmed_perCell flag return gene x cell count sparse matrix putative contaminating transcripts trimmed (default = FALSE) combine_extra flag combine original extracellular transcripts back flagged transcript data.frame. (default = FALSE) ctrl_genes vector control genes present input transcript data.frame present counts refProfiles; ctrl_genes included FastReseg analysis. (default = NULL) seed_transError seed transcript error detection step, default = NULL skip seed percentCores percent cores use parallel processing (0-1] (default = 0.75)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_flag_all_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fastReseg_flag_all_errors — fastReseg_flag_all_errors","text":"list refProfiles genes * clusters matrix cluster-specific reference profiles used resegmenation pipeline baselineData list two matrices cluster * percentile format cluster-specific percentile distribution per cell value; span_score average per molecule transcript tLLR score cell, span_transNum transcript number cell. ctrl_genes vector control genes whose transcript scores set fixed value cell types, return ctrl_genes NULL. combined_modStats_ToFlagCells data.frame spatial modeling statistics cell cells data set, output score_cell_segmentation_error function combined_flaggedCells list element vector UMI_cellID cells flagged potential cell segmentation errors within FOV trimmed_perCellExprs gene x cell count sparse matrix putative contaminating transcripts trimmed, return return_trimmed_perCell = TRUE flagged_transDF_list list per-FOV transcript data.frame flagging information SVM_class column, return transDF_export_option = 2","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_flag_all_errors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fastReseg_flag_all_errors — fastReseg_flag_all_errors","text":"function first estimate mean profile cell cluster based provided cell x gene count matrix cluster assignment entire data set. , function use estimated cluster-specific profile reference profiles provided. transcript data.frame, function score transcript based provided cell type-specific reference profiles, evaluate goodness--fit transcript within original cell segment, identify low-score transcript groups within cells strong spatial dependency transcript score profile. transDF_export_option =1, function save per FOV output individual file path_to_output directory; flagged_transDF, modStats_ToFlagCells classDF_ToFlagTrans saved csv file, respectively. flagged_transDF transcript data.frame FOV, columns unique IDs transcripts UMI_transID cells UMI_cellID, global coordinate system x, y, z, goodness--fit original cell segment SMI_class; original per FOV cell ID pixel/index-based coordinates systems saved columns, CellId, pixel_x, pixel_y, idx_z modStats_ToFlagCells data.frame spatial modeling statistics cell, output score_cell_segmentation_error function classDF_ToFlagTrans data.frame class assignment transcripts within putative wrongly segmented cells, output flag_bad_transcripts functions account genes missing refProfiles present input transcript data.frame, genes ctrl_genes assigned goodness--fit score equal svmClass_score_cutoff cell types minimize impact genes identification low-score transcript groups via SVM. avoid significant interference ctrl_genes, recommended total counts genes 1% total counts genes cell.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_flag_all_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fastReseg_flag_all_errors — fastReseg_flag_all_errors","text":"","code":"data(\"mini_transcriptDF\") data(\"ori_RawExprs\") data(\"example_refProfiles\") data(\"example_baselineCT\") # cell_ID for extracellualr transcripts extracellular_cellID <- mini_transcriptDF[which(mini_transcriptDF$CellId ==0), 'cell_ID']   # case #'1: provide `transcript_df` directly, # do auto cluster assignment of each cell based on gene expression matrix,  # `counts`, and cluster-specific reference profiles, `refProfiles` res1 <- fastReseg_flag_all_errors(counts = ori_RawExprs,                                   clust = NULL,                                   refProfiles = example_refProfiles,                                   pixel_size = 1,                                   zstep_size = 1,                                   transcript_df = mini_transcriptDF,                                   transID_coln = \"UMI_transID\",                                   transGene_coln = \"target\",                                   cellID_coln = \"UMI_cellID\",                                   spatLocs_colns = c(\"x\",\"y\",\"z\"),                                   extracellular_cellID = extracellular_cellID,                                   path_to_output = \"res1f_directDF\") #> Per-FOV outputs including transcript data.frame with flagging information would be exported to disk at `path_to_output = 'res1f_directDF'`. #> Found 960 common genes among `refProfiles` and `counts`.  #> No common cell types/clusters found between `clust` and `refProfiles`. #> Perform cluster assignment based on maximum transcript score given the provided `refProfiles`. #> Use the providied `molecular_distance_cutoff` = 1.0000 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use the providied `cellular_distance_cutoff` = 10.0000 for searching of neighbor cells. #> 3 Dimension of spaital coordinates are provided. #> A single `transcript_df` is provided with unique `cellID_coln` = UMI_cellID and `transID_coln` = UMI_transID (use row idx if NULL). #>  #> ############## #> Processing file `1`: NA #>  #>  #> ##------ Sat Aug  9 02:03:50 2025 ------## #> Found 960 common genes among transcript_df and score_GeneMatrix.  #> Found 1375 cells and assigned cell type based on the provided `refProfiles` cluster profiles. #> Run linear regreassion in 3 Dimension. #> Warning: Below model_cutoff = 50, skip 37 cells with fewer transcripts. Move forward with remaining 1338 cells. #> 373 cells, 0.2788 of all evaluated cells, are flagged for resegmentation with lrtest_nlog10P > 5.0. #> Run SVM in 3 Dimension. #> Found 373 common cells and 960 common genes among chosen_cells, transcript_df, and score_GeneMatrix.  #> Warning: Below model_cutoff = 50, skip 0 cells with fewer transcripts. Move forward with remaining 373 cells. #> Warning: Skip 0 cells with all transcripts in same class given `score_cutoff = -2`. Move forward with remaining 373 cells. #> Remove 0 cells with raw transcript score all in same class based on cutoff -2.00 when running spatial SVM model.  # case #'2: provide file paths to per FOV transcript data files and specify  # the spatial offset for each FOV, # do auto-calculation of cluster-specific reference profiles from gene  # expression matrix, `counts`, and cluster assignment of each cell, `clust`. data(\"example_CellGeneExpr\") data(\"example_clust\")  # the example individual transcript files are stored under `data` directory of this package # update your path accordingly # Notice that some assays like SMI has XY axes swapped between stage and each FOV; # coordinates for each FOV should have units in micron dataDir <- system.file(\"extdata\", package = \"FastReseg\") fileInfo_DF <- data.frame(   file_path = fs::path(dataDir,                        c(\"Run4104_FOV001__complete_code_cell_target_call_coord.csv\",                          \"Run4104_FOV002__complete_code_cell_target_call_coord.csv\")),   slide = c(1, 1),   fov = c(1,2),   stage_X = 1000*c(5.13, -2.701),   stage_Y = 1000*c(-0.452, 0.081))  res2 <- fastReseg_flag_all_errors(counts = example_CellGeneExpr,                                   clust = example_clust,                                   refProfiles = NULL,                                   transDF_fileInfo =fileInfo_DF,                                   filepath_coln = 'file_path',                                   prefix_colns = c('slide','fov'),                                                                      # match XY axes between stage and each FOV                                   fovOffset_colns = c('stage_Y','stage_X'),                                    # 0.18 micron per pixel in transcript data                                   pixel_size = 0.18,                                    # 0.8 micron per z step in transcript data                                   zstep_size = 0.8,                                                                       transcript_df = NULL,                                                                      # row index as transcript_id                                   transID_coln = NULL,                                                                       transGene_coln = \"target\",                                   cellID_coln = \"CellId\",                                   spatLocs_colns = c(\"x\",\"y\",\"z\"),                                                                      # CellId = 0 means extracelluar transcripts in raw data                                   extracellular_cellID = c(0),                                                                       path_to_output = \"res2f_multiFiles\") #> Per-FOV outputs including transcript data.frame with flagging information would be exported to disk at `path_to_output = 'res2f_multiFiles'`. #> Found 960 common genes among `refProfiles` and `counts`.  #> Use the providied `molecular_distance_cutoff` = 1.0000 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use the providied `cellular_distance_cutoff` = 10.0000 for searching of neighbor cells. #> 3 Dimension of spaital coordinates are provided. #> 2 individual per FOV files are provided in `transDF_fileInfo`, use the 1st file to calculate distance cutoffs #> `transID_coln` and `cellID_coln` of each per FOV transcript_df would be re-named based on `prefix_colns` = `slide`,`fov`."},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_full_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"fastReseg_full_pipeline — fastReseg_full_pipeline","title":"fastReseg_full_pipeline — fastReseg_full_pipeline","text":"wrapper full resegmentation pipeline using internal reference profiles cutoffs. function first estimates proper reference profiles cutoffs provided data use fastReseg_perFOV_full_process function process transcript data.frame.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_full_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fastReseg_full_pipeline — fastReseg_full_pipeline","text":"","code":"fastReseg_full_pipeline(   counts,   clust = NULL,   refProfiles = NULL,   transDF_fileInfo = NULL,   filepath_coln = \"file_path\",   prefix_colns = c(\"slide\", \"fov\"),   fovOffset_colns = c(\"stage_X\", \"stage_Y\"),   pixel_size = 0.18,   zstep_size = 0.8,   transcript_df = NULL,   transID_coln = NULL,   transGene_coln = \"target\",   cellID_coln = \"CellId\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   invert_y = TRUE,   extracellular_cellID = NULL,   flagModel_TransNum_cutoff = 50,   flagCell_lrtest_cutoff = 5,   svmClass_score_cutoff = -2,   svm_args = list(kernel = \"radial\", scale = FALSE, gamma = 0.4),   molecular_distance_cutoff = 2.7,   cellular_distance_cutoff = NULL,   score_baseline = NULL,   lowerCutoff_transNum = NULL,   higherCutoff_transNum = NULL,   imputeFlag_missingCTs = TRUE,   groupTranscripts_method = c(\"dbscan\", \"delaunay\"),   spatialMergeCheck_method = c(\"leidenCut\", \"geometryDiff\"),   cutoff_spatialMerge = 0.5,   leiden_config = list(objective_function = \"CPM\", resolution_parameter = 1, beta = 0.01,     n_iterations = 200),   config_spatNW_transcript = NULL,   path_to_output = \"reSeg_res\",   transDF_export_option = c(1, 2, 0),   save_intermediates = TRUE,   return_perCellData = TRUE,   combine_extra = FALSE,   ctrl_genes = NULL,   seed_process = NULL,   percentCores = 0.75 )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_full_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fastReseg_full_pipeline — fastReseg_full_pipeline","text":"counts Counts matrix entire dataset, cells X genes. clust Vector cluster assignments cell counts, NULL automatically assign cell cluster cell based maximum transcript score given provided refProfiles refProfiles matrix cluster profiles, genes X clusters, default = NULL use external cluster assignments transDF_fileInfo data.frame row individual file per FOV transcript data.frame within coordinates CellId unique, columns include file path per FOV transcript data.frame file, annotation columns like slide fov used prefix creating unique cell_ID across entire dataset; NULL, use provided transcript_df directly filepath_coln column name individual file per FOV transcript data.frame transDF_fileInfo prefix_colns column names annotation transDF_fileInfo, added CellId prefix creating unique cell_ID entire dataset; set NULL use original transID_coln cellID_coln fovOffset_colns column name coordinate offsets 1st 2nd dimension per FOV transcript data.frame transDF_fileInfo, unit micron Notice assays like SMI XY axes swapped stage FOV fovOffset_colns c(\"stage_Y\", \"stage_X\"). pixel_size micrometer size image pixel listed 1st 2nd dimension spatLocs_colns transcript_df zstep_size micrometer size z-step optional 3rd dimension spatLocs_colns transcript_df transcript_df data.frame transcript level information unique CellId, default = NULL read transDF_fileInfo transID_coln column name transcript_ID transcript_df, default = NULL use row index transcript transcript_df; prefix_colns != NULL, unique transcript_id generated prefix_colns transID_coln transcript_df transGene_coln column name target gene name transcript_df cellID_coln column name cell_ID transcript_df; prefix_colns != NULL, unique cell_ID generated prefix_colns cellID_coln transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates transcript_df invert_y flag invert y axis local coordinates stitching (default = TRUE) extracellular_cellID vector cell_ID extracellular transcripts removed resegmention pipeline (default = NULL) flagModel_TransNum_cutoff cutoff transcript number spatial modeling identification wrongly segmented cells (default = 50) flagCell_lrtest_cutoff cutoff lrtest_nlog10P identify putative wrongly segemented cells strong spatial dependency transcript score profile svmClass_score_cutoff cutoff transcript score separate high low score transcripts SVM (default = -2) svm_args list arguments pass svm function identifying low-score transcript groups space, typically involve kernel, gamma, scale molecular_distance_cutoff maximum molecule--molecule distance within connected transcript group, unit micron (default = 2.7 micron). set NULL, pipeline first randomly choose 2500 cells 10 random picked ROIs search radius 5 times cellular_distance_cutoff, calculate minimal molecular distance picked cells. pipeline use 5 times 90% quantile minimal molecular distance molecular_distance_cutoff. calculation slow recommended large transcript data.frame. cellular_distance_cutoff maximum cell--cell distance x, y center query cells center neighbor cells direct contact, unit micron. Default = NULL use 2 times average 2D cell diameter. score_baseline named vector score baseline cell type listed refProfiles  per cell transcript score higher baseline required call cell type high enough confidence; default = NULL calculate counts refProfiles lowerCutoff_transNum named vector transcript number cutoff cell type higher cutoff required keep query cell ; default = NULL calculate counts refProfiles higherCutoff_transNum named vector transcript number cutoff cell type lower cutoff required keep query cell neighbor cell consistent cell type; default = NULL calculate counts refProfiles imputeFlag_missingCTs flag impute score_baseline, lowerCutoff_transNum,higherCutoff_transNum cell types present refProfiles missing provided transcript data files provided baseline cutoffs; TRUE, median values existing cell types used values missing cell types. groupTranscripts_method use either \"dbscan\" \"delaunay method\" group transcripts space (default = \"dbscan\") spatialMergeCheck_method use either \"leidenCut\" (2D 3D) \"geometryDiff\" (2D ) method determine whether cell pair merging event allowed space (default = \"leidenCut\") cutoff_spatialMerge spatial constraint valid merging event two source transcript groups, default = 0.5 50% cutoff, set 0 skip spatial constraint evaluation merging. spatialMergeCheck_method = \"leidenCut\", minimal percentage transcripts shared membership query cell neighbor cells leiden clustering results valid merging event. spatialMergeCheck_method = \"geometryDiff\", maximum percentage white space change upon merging query cell neighbor cell valid merging event. leiden_config (leidenCut) list configuration pass reticulate igraph::cluster_leiden function, including objective_function, resolution_parameter, beta, n_iterations. config_spatNW_transcript configuration list create spatial network transcript level, see manual createSpatialDelaunayNW_from_spatLocs details, set NULL use default config (default = NULL) path_to_output file path output folder resegmentation data saved; directory created function exists; transcript data.frame updated_transDF saved individual csv files FOV, cell data FOVs, updated_perCellDT updated_perCellExprs, combined save .rds object. transDF_export_option option export updated transcript_df, 0 export, 1 write path_to_output disk csv FOV, 2 return function list (default = 1) save_intermediates flag save intermediate outputs output folder, including data.frame spatial modeling statistics cell, return_perCellData flag return gene x cell count matrix per cell DF updated mean spatial coordinates new cell type, also export output folder disk transDF_export_option = 1. combine_extra flag combine original extracellular transcripts trimmed transcripts back updated transcript data.frame, slow process many transcript FOV file. (default = FALSE) ctrl_genes vector control genes present input transcript data.frame refProfiles expect cell type dependency, e.g. negative control probes; ctrl_genes included FastReseg analysis. (default = NULL) seed_process seed per FOV processing, used transcript error detection correction steps, default = NULL skip seed percentCores percent cores use parallel processing (0-1] (default = 0.75)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_full_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fastReseg_full_pipeline — fastReseg_full_pipeline","text":"list refProfiles genes X clusters matrix cluster-specific reference profiles used resegmenation pipeline baselineData list two matrice cluster X percentile format cluster-specific percentile distribution per cell value; span_score average per molecule transcript tLLR score cell, span_transNum transcript number cell. cutoffs_list list cutoffs used resegmentation pipeline, including, score_baseline, lowerCutoff_transNum, higherCutoff_transNum, cellular_distance_cutoff, molecular_distance_cutoff ctrl_genes vector control genes whose transcript scores set fixed value cell types, return ctrl_genes NULL. updated_perCellDT per cell data.table mean spatial coordinates, new cell type resegmentation action resegmentation, return return_perCellData = TRUE updated_perCellExprs gene x cell count sparse matrix updated transcript data.frame resegmentation, return return_perCellData = TRUE reseg_actions list 4 elements describing resegmenation performed original transcript_df group assignment transcripts listed groupDF_ToFlagTrans, output decide_ReSegment_Operations function, return save_intermediates = TRUE updated_transDF_list list per-FOV transcript data.frame updated cell segmenation updated_cellID updated_celltype columns, return transDF_export_option = 2","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_full_pipeline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fastReseg_full_pipeline — fastReseg_full_pipeline","text":"pipeline first estimate mean profile cell cluster based provided cell x gene count matrix cluster assignment entire data set. , pipeline use estimated cluster-specific profile reference profiles calculate suitable cutoff distance search, transcript number score first provided per FOV transcript data frame cutoffs provided. transcript data.frame provided multiple file paths transDF_fileInfo data.frame, pipeline perform resegmentation individual transcript data.frame using baseline cutoff defined globally. transcript data.frame, pipeline score transcript based provided cell type-specific reference profiles, evaluate goodness--fit transcript within original cell segment, identify low-score transcript groups within cells strong spatial dependency transcript score profile, evaluate neighborhood environment low-score transcript groups perform resegmentation actions including triming extracellular space, merging neighbor cell labeling new cell. account genes missing refProfiles present input transcript data.frame, genes ctrl_genes assigned goodness--fit score equal svmClass_score_cutoff cell types minimize impact genes identification low-score transcript groups via SVM. avoid significant interference ctrl_genes, recommended total counts genes 1% total counts genes cell. pipeline save per FOV output individual file path_to_output directory; updated_transDF saved csv file. save_intermediates = TRUE, intermediate files resegmenation outputs FOV saved single .rds object list containing following elements: modStats_ToFlagCells data.frame spatial modeling statistics cell, output score_cell_segmentation_error function, save save_intermediates = TRUE groupDF_ToFlagTrans data.frame group assignment transcripts within putative wrongly segmented cells, merged output flag_bad_transcripts groupTranscripts_Delaunay groupTranscripts_dbscan functions, save save_intermediates = TRUE neighborhoodDF_ToReseg data.frame neighborhood environment low-score transcript groups, output get_neighborhood_content function, save save_intermediates = TRUE reseg_actions list 4 elements describing resegmenation performed original transcript_df group assignment transcripts listed groupDF_ToFlagTrans, output decide_ReSegment_Operations function, save save_intermediates = TRUE updated_transDF updated transcript_df updated_cellID updated_celltype column based reseg_full_converter, write disk transDF_export_option =1 updated_perCellDT per cell data.table mean spatial coordinates, new cell type resegmentation action resegmentation, return return_perCellData = TRUE updated_perCellExprs gene x cell count sparse matrix updated transcript data.frame resegmentation, return return_perCellData = TRUE pipeline also combine per cell data FOVs return combined data return_perCellData = TRUE; updated_perCellDT updated_perCellExprs also saved list single .rds object path_to_output directory  transDF_export_option = 1. updated_perCellDT per cell data.table mean spatial coordinates, new cell type resegmentation action resegmentation, return return_perCellData = TRUE updated_perCellExprs gene x cell count sparse matrix updated transcript data.frame resegmentation, return return_perCellData = TRUE","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_full_pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fastReseg_full_pipeline — fastReseg_full_pipeline","text":"","code":"# get example based on example dataset data(\"mini_transcriptDF\") data(\"ori_RawExprs\") data(\"example_refProfiles\") data(\"example_baselineCT\") # cell_ID for extracellualr transcripts extracellular_cellID <- mini_transcriptDF[which(mini_transcriptDF$CellId ==0), 'cell_ID']   # case #'1: provide `transcript_df` directly, # do auto-calculation of distance cutoff from data while using the provided  # cutoffs for score and transcript numbers. res1 <- fastReseg_full_pipeline(counts = ori_RawExprs,                                 clust = NULL,                                 refProfiles = example_refProfiles,                                 pixel_size = 1,                                 zstep_size = 1,                                 transcript_df = mini_transcriptDF,                                 transID_coln = \"UMI_transID\",                                 transGene_coln = \"target\",                                 cellID_coln = \"UMI_cellID\",                                 spatLocs_colns = c(\"x\",\"y\",\"z\"),                                 extracellular_cellID = extracellular_cellID,                                 molecular_distance_cutoff = NULL,                                 cellular_distance_cutoff = NULL,                                 score_baseline = example_baselineCT[['score_baseline']],                                 lowerCutoff_transNum = example_baselineCT[['lowerCutoff_transNum']],                                 higherCutoff_transNum= example_baselineCT[['higherCutoff_transNum']],                                 imputeFlag_missingCTs = TRUE,                                 path_to_output = \"res1_directDF\") #> Per-FOV transcript data.frame with updated cell segmentation would be exported to disk at `path_to_output = 'res1_directDF'`. #> The intermediate results and per cell data would be exported to output directory at `path_to_output`. #> Found 960 common genes among `refProfiles` and `counts`.  #> No common cell types/clusters found between `clust` and `refProfiles`. #> Perform cluster assignment based on maximum transcript score given the provided `refProfiles`. #> Extract distance cutoff from first input transcript data. #> 3 Dimension of spaital coordinates are provided. #> A single `transcript_df` is provided with unique `cellID_coln` = UMI_cellID and `transID_coln` = UMI_transID (use row idx if NULL). #> Use 2 times of average 2D cell diameter as cellular_distance_cutoff = 24.2375 for searching of neighbor cells. #> Identified 3D coordinates with variance.  #> Distribution of minimal molecular distance between 1375 cells: 0, 0.08, 0.14, 0.21, 0.3, 0.4, 0.51, 0.63, 0.78, 0.86, 3.92, at quantile = 0%, 10%, 20%, 30%, 40%, 50%, 60%, 70%, 80%, 90%, 100%. #> Use 5 times of 90% quantile of minimal 3D molecular distance between picked cells as `molecular_distance_cutoff` = 4.2790 for defining direct neighbor cells. #> Use `molecular_distance_cutoff` = 4.2790 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use cellular_distance_cutoff = 24.2375 for searching of neighbor cells. #>  #> ############## #> Processing file `1`: NA #>  #>  #> ##------ Sat Aug  9 02:08:16 2025 ------## #> 3 Dimension of spaital coordinates are provided. #> Perform leiden clustering at resolution_parameter = 1.000. #> Create Delanay network when config$method is NULL. #> Name the spatial network based on method as `Delaunay_network` when config$name is NULL. #> Use cellular_distance_cutoff = 24.2375 for searching of neighbor cells. #> Use `molecular_distance_cutoff` = 4.2790 for defining direct neighbor cells based on molecule-to-molecule distance. #> 960 unique genes are found in `transcript_df`. #> 960 unique genes are shared by the provided `score_GeneMatrix` that contains cluster profiles of 960 genes for 22 clusters. #> Found 756783 transcript records and 1375 cells in input `transcript_df`. #> Use the providied `molecular_distance_cutoff` = 4.2790 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use the providied `cellular_distance_cutoff` = 24.2375 for searching of neighbor cells. #> Found 960 common genes among transcript_df and score_GeneMatrix.  #> Found 1375 cells and assigned cell type based on the provided `refProfiles` cluster profiles. #> Run linear regreassion in 3 Dimension. #> Warning: Below model_cutoff = 50, skip 37 cells with fewer transcripts. Move forward with remaining 1338 cells. #> 373 cells, 0.2788 of all evaluated cells, are flagged for resegmentation with lrtest_nlog10P > 5.0. #> Run SVM in 3 Dimension. #> Found 373 common cells and 960 common genes among chosen_cells, transcript_df, and score_GeneMatrix.  #> Warning: Below model_cutoff = 50, skip 0 cells with fewer transcripts. Move forward with remaining 373 cells. #> Warning: Skip 0 cells with all transcripts in same class given `score_cutoff = -2`. Move forward with remaining 373 cells. #> Remove 0 cells with raw transcript score all in same class based on cutoff -2.00 when running spatial SVM model. #> Do spatial network analysis in 3 Dimension. #> 10652 chosen_transcripts are found in common cells. #> SVM spatial model further identified 17 cells with transcript score all in same class, exclude from transcript group analysis. #> Found 960 common genes among transcript_df and score_GeneMatrix.  #> Perform leiden clustering at resolution_parameter = 1.000. #> Use neighbor_distance_xy = 24.2375 for searching of neighbor cells. #> Use distance_cutoff = 4.2790 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use first 2D for searching cell neighborhood, but all 3 Dimension to identify direct neighbors based on molecular distance. #> Found 1998 common cells and 960 common genes among transcript_df, cell_networkDT, and score_GeneMatrix.  #> 623 chosen_cells are found in common cells. #> Use `leidenCut` method to evaluate putative merging event in space.  #> Perform leiden clustering at resolution_parameter = 1.000. #> A valid merging event must have query cell with 0.500 transcript shared same membership as neighbor cell of consistent cell type.  #> Run delanuay network in 3 Dimension. #> Perform ledien clustering on 28 potential merging events.  #> (`c_1_2_1731_g2`, `c_1_2_1792_g5`) cell pair with all 5 transcripts in same z plane, run 2D network analysis. #> (`c_1_2_1792_g5`, `c_1_2_1731_g2`) cell pair with all 5 transcripts in same z plane, run 2D network analysis. #> Found 623 common cells and 960 common genes among `names(reseg_full_converter)`, `transcript_df`, and `score_GeneMatrix`.  #>  #>  #> Trim 5626 transcripts during resegmentation, 0.0074 of all intracellular molecules. #> Warning: object 'transcript_df' not found  # case #'2: provide file paths to per FOV transcript data files and specify  # the spatial offset for each FOV, # do auto-calculation of score and transcript number cutoffs from gene  # expression matrix, `counts`, and cluster assignment of each cell, `clust`, # do auto-calculation of distance cutoff from the 1st per FOV transcript data. data(\"example_CellGeneExpr\") data(\"example_clust\")  # the example individual transcript files are stored under `data` directory of this package # update your path accordingly # Notice that some assays like SMI has XY axes swapped between stage and each FOV; # coordinates for each FOV should have units in micron dataDir <- system.file(\"extdata\", package = \"FastReseg\") fileInfo_DF <- data.frame(   file_path = fs::path(dataDir,                          c(\"Run4104_FOV001__complete_code_cell_target_call_coord.csv\",                          \"Run4104_FOV002__complete_code_cell_target_call_coord.csv\")),   slide = c(1, 1),   fov = c(1,2),   stage_X = 1000*c(5.13, -2.701),   stage_Y = 1000*c(-0.452, 0.081))  res2 <- fastReseg_full_pipeline(counts = example_CellGeneExpr,                                 clust = example_clust,                                 refProfiles = NULL,                                 transDF_fileInfo =fileInfo_DF,                                 filepath_coln = 'file_path',                                 prefix_colns = c('slide','fov'),                                                                  # match XY axes between stage and each FOV                                 fovOffset_colns = c('stage_Y','stage_X'),                                  # 0.18 micron per pixel in transcript data                                 pixel_size = 0.18,                                  # 0.8 micron per z step in transcript data                                 zstep_size = 0.8,                                                                   transcript_df = NULL,                                                                  # row index as transcript_id                                 transID_coln = NULL,                                                                   transGene_coln = \"target\",                                 cellID_coln = \"CellId\",                                 spatLocs_colns = c(\"x\",\"y\",\"z\"),                                                                  # CellId = 0 means extracelluar transcripts in raw data                                 extracellular_cellID = c(0),                                                                   molecular_distance_cutoff = NULL,                                 cellular_distance_cutoff = NULL,                                 score_baseline = NULL,                                 lowerCutoff_transNum = NULL,                                 higherCutoff_transNum= NULL,                                 imputeFlag_missingCTs = TRUE,                                 path_to_output = \"res2_multiFiles\") #> Per-FOV transcript data.frame with updated cell segmentation would be exported to disk at `path_to_output = 'res2_multiFiles'`. #> The intermediate results and per cell data would be exported to output directory at `path_to_output`. #> Found 960 common genes among `refProfiles` and `counts`.  #> Extract distance cutoff from first input transcript data. #> 3 Dimension of spaital coordinates are provided. #> 2 individual per FOV files are provided in `transDF_fileInfo`, use the 1st file to calculate distance cutoffs #> `transID_coln` and `cellID_coln` of each per FOV transcript_df would be re-named based on `prefix_colns` = `slide`,`fov`. #> Use 2 times of average 2D cell diameter as cellular_distance_cutoff = 19.1980 for searching of neighbor cells. #> Identified 3D coordinates with variance.  #> Distribution of minimal molecular distance between 385 cells: 0, 0.16, 0.22, 0.29, 0.36, 0.44, 0.52, 0.63, 0.76, 0.84, 8.01, at quantile = 0%, 10%, 20%, 30%, 40%, 50%, 60%, 70%, 80%, 90%, 100%. #> Use 5 times of 90% quantile of minimal 3D molecular distance between picked cells as `molecular_distance_cutoff` = 4.2191 for defining direct neighbor cells. #> Use `molecular_distance_cutoff` = 4.2191 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use cellular_distance_cutoff = 19.1980 for searching of neighbor cells.  # case #'3: provide file paths to per FOV transcript data files and specify  # the spatial offset for each FOV, # do auto-calculation of score and transcript number cutoffs from gene  # expression matrix, `counts`, and cluster-specific reference profiles, `refProfiles`, # use the provided distance cutoff for `molecular_distance_cutoff` but  # calculate the `cellular_distance_cutoff` res3 <- fastReseg_full_pipeline(counts = example_CellGeneExpr,                                 clust = NULL,                                 refProfiles = example_refProfiles,                                 transDF_fileInfo =fileInfo_DF,                                 filepath_coln = 'file_path',                                 prefix_colns = c('slide','fov'),                                 fovOffset_colns = c('stage_Y','stage_X'),                                  pixel_size = 0.18,                                  zstep_size = 0.8,                                  transcript_df = NULL,                                 transID_coln = NULL,                                  transGene_coln = \"target\",                                 cellID_coln = \"CellId\",                                 spatLocs_colns = c(\"x\",\"y\",\"z\"),                                 extracellular_cellID = c(0),                                  molecular_distance_cutoff = 2.7,                                 cellular_distance_cutoff = NULL,                                 score_baseline = NULL,                                 lowerCutoff_transNum = NULL,                                 higherCutoff_transNum= NULL,                                 imputeFlag_missingCTs = TRUE,                                 path_to_output = \"res3_multiFiles\") #> Per-FOV transcript data.frame with updated cell segmentation would be exported to disk at `path_to_output = 'res3_multiFiles'`. #> The intermediate results and per cell data would be exported to output directory at `path_to_output`. #> Found 960 common genes among `refProfiles` and `counts`.  #> No common cell types/clusters found between `clust` and `refProfiles`. #> Perform cluster assignment based on maximum transcript score given the provided `refProfiles`. #> Extract distance cutoff from first input transcript data. #> 3 Dimension of spaital coordinates are provided. #> 2 individual per FOV files are provided in `transDF_fileInfo`, use the 1st file to calculate distance cutoffs #> `transID_coln` and `cellID_coln` of each per FOV transcript_df would be re-named based on `prefix_colns` = `slide`,`fov`. #> Use 2 times of average 2D cell diameter as cellular_distance_cutoff = 19.1980 for searching of neighbor cells. #> Use `cellular_distance_cutoff` = 19.1980 for searching of neighbor cells."},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_perFOV_full_process.html","id":null,"dir":"Reference","previous_headings":"","what":"fastReseg_perFOV_full_process — fastReseg_perFOV_full_process","title":"fastReseg_perFOV_full_process — fastReseg_perFOV_full_process","text":"core wrapper resegmentation pipeline using transcript score matrix derived external reference profiles preset cutoffs","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_perFOV_full_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fastReseg_perFOV_full_process — fastReseg_perFOV_full_process","text":"","code":"fastReseg_perFOV_full_process(   score_GeneMatrix,   transcript_df,   transID_coln = \"UMI_transID\",   transGene_coln = \"target\",   cellID_coln = \"UMI_cellID\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   invert_y = TRUE,   extracellular_cellID = NULL,   flagModel_TransNum_cutoff = 50,   flagCell_lrtest_cutoff = 5,   svmClass_score_cutoff = -2,   svm_args = list(kernel = \"radial\", scale = FALSE, gamma = 0.4),   molecular_distance_cutoff = 2.7,   cellular_distance_cutoff = NULL,   score_baseline = NULL,   lowerCutoff_transNum = NULL,   higherCutoff_transNum = NULL,   groupTranscripts_method = c(\"dbscan\", \"delaunay\"),   spatialMergeCheck_method = c(\"leidenCut\", \"geometryDiff\"),   cutoff_spatialMerge = 0.5,   leiden_config = list(objective_function = \"CPM\", resolution_parameter = 1, beta = 0.01,     n_iterations = 200),   config_spatNW_transcript = NULL,   return_intermediates = TRUE,   return_perCellData = TRUE,   includeAllRefGenes = FALSE,   seed_process = NULL )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_perFOV_full_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fastReseg_perFOV_full_process — fastReseg_perFOV_full_process","text":"score_GeneMatrix gene x cell-type matrix log-like score gene cell type transcript_df data.frame transcript columns transcript_id, target gene name, original cell_id, spatial coordinates. transID_coln column name transcript_ID transcript_df transGene_coln column name target gene name transcript_df cellID_coln column name cell_ID transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates transcript_df invert_y flag invert y axis local coordinates stitching (default = TRUE) extracellular_cellID vector cell_ID extracellular transcripts removed resegmention pipeline (default = NULL) flagModel_TransNum_cutoff cutoff transcript number spatial modeling identification wrongly segmented cells (default = 50) flagCell_lrtest_cutoff cutoff lrtest_nlog10P identify putative wrongly segemented cells strong spatial dependency transcript score profile svmClass_score_cutoff cutoff transcript score separate high low score transcripts SVM (default = -2) svm_args list arguments pass svm function identifying low-score transcript groups space, typically involve kernel, gamma, scale molecular_distance_cutoff maximum molecule--molecule distance within connected transcript group, unit input spatial coordinate (default = 2.7 micron). set NULL, pipeline first randomly choose 2500 cells 10 random picked ROIs search radius 5 times cellular_distance_cutoff, calculate minimal molecular distance picked cells. pipeline use 5 times 90% quantile minimal molecular distance molecular_distance_cutoff. calculation slow recommended large transcript data.frame. cellular_distance_cutoff maximum cell--cell distance x, y center query cells center neighbor cells direct contact, unit input spatial coordinate. Default = NULL use 2 times average 2D cell diameter. score_baseline named vector score baseline cell type listed score_GeneMatrix per cell transcript score higher baseline required call cell type high enough confidence lowerCutoff_transNum named vector transcript number cutoff cell type higher cutoff required keep query cell higherCutoff_transNum named vector transcript number cutoff cell type lower cutoff required keep query cell neighbor cell consistent cell type. groupTranscripts_method use either \"dbscan\" \"delaunay method\" group transcripts space (default = \"dbscan\") spatialMergeCheck_method use either \"leidenCut\" (2D 3D) \"geometryDiff\" (2D ) method determine whether cell pair merging event allowed space (default = \"leidenCut\") cutoff_spatialMerge spatial constraint valid merging event two source transcript groups, default = 0.5 50% cutoff, set 0 skip spatial constraint evaluation merging. spatialMergeCheck_method = \"leidenCut\", minimal percentage transcripts shared membership query cell neighbor cells leiden clustering results valid merging event. spatialMergeCheck_method = \"geometryDiff\", maximum percentage white space change upon merging query cell neighbor cell valid merging event. leiden_config (leidenCut) list configuration pass reticulate igraph::cluster_leiden function, including objective_function, resolution_parameter, beta, n_iterations. config_spatNW_transcript configuration list create spatial network transcript level, see manual createSpatialDelaunayNW_from_spatLocs details, set NULL use default config (default = NULL) return_intermediates flag return intermediate outputs, including data.frame spatial modeling statistics cell return_perCellData flag return gene x cell count matrix per cell DF updated mean spatial coordinates new cell type includeAllRefGenes flag include genes score_GeneMatrix returned updated_perCellExprs missing genes value 0 (default = FALSE) seed_process seed per FOV processing, used transcript error detection correction steps, default = NULL skip seed","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_perFOV_full_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fastReseg_perFOV_full_process — fastReseg_perFOV_full_process","text":"list modStats_ToFlagCells data.frame spatial modeling statistics cell, output score_cell_segmentation_error function, return return_intermediates = TRUE groupDF_ToFlagTrans data.frame group assignment transcripts within putative wrongly segmented cells, merged output flag_bad_transcripts groupTranscripts_Delaunay groupTranscripts_dbscan functions, return return_intermediates = TRUE neighborhoodDF_ToReseg data.frame neighborhood environment low-score transcript groups, output get_neighborhood_content function, return return_intermediates = TRUE reseg_actions list 4 elements describing resegmenation performed original transcript_df group assignment transcripts listed groupDF_ToFlagTrans, output decide_ReSegment_Operations function, return return_intermediates = TRUE updated_transDF updated transcript_df updated_cellID updated_celltype column based reseg_full_converter updated_perCellDT per cell data.table mean spatial coordinates, new cell type resegmentation action resegmentation, return return_perCellData = TRUE updated_perCellExprs gene x cell count sparse matrix updated transcript data.frame resegmentation, return return_perCellData = TRUE","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_perFOV_full_process.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fastReseg_perFOV_full_process — fastReseg_perFOV_full_process","text":"pipeline score transcript based provided cell type-specific reference profiles, evaluate goodness--fit transcript within original cell segment, identify low-score transcript groups within cells strong spatial dependency transcript score profile, evaluate neighborhood environment low-score transcript groups perform resegmentation actions including triming extracellular space, merging neighbor cell labeling new cell. account genes missing score_GeneMatrix present input transcript data.frame, genes ctrl_genes assigned goodness--fit score equal svmClass_score_cutoff cell types minimize impact genes identification low-score transcript groups via SVM. avoid significant interference ctrl_genes, recommended total counts genes 1% total counts genes cell.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/fastReseg_perFOV_full_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fastReseg_perFOV_full_process — fastReseg_perFOV_full_process","text":"","code":"data(example_refProfiles) data(mini_transcriptDF) data(example_baselineCT) #' cell_ID for extracellualr transcripts extracellular_cellID <- mini_transcriptDF[which(mini_transcriptDF$CellId ==0), 'cell_ID']  score_baseline <- example_baselineCT[['span_score']][,\"25%\"] lowerCutoff_transNum  <- example_baselineCT[['span_transNum']][,\"25%\"] higherCutoff_transNum  <- example_baselineCT[['span_transNum']][,\"50%\"]  # calculate log-likelihood of each gene under each cell type and center the  # score matrix on per gene basis score_GeneMatrix <- scoreGenesInRef(genes = intersect(unique(mini_transcriptDF[[\"target\"]]),                                                        rownames(example_refProfiles)),                                     ref_profiles = pmax(example_refProfiles, 1e-5))                                      # case 1: run with default methods: \"dbscan\" for transcript grouping,  # \"leidenCut\" for merging check  final_res1 <- fastReseg_perFOV_full_process(score_GeneMatrix= score_GeneMatrix,                                            transcript_df = mini_transcriptDF,                                            extracellular_cellID = extracellular_cellID,                                            molecular_distance_cutoff = 2.7,                                            cellular_distance_cutoff = 25,                                            score_baseline = score_baseline,                                            lowerCutoff_transNum = lowerCutoff_transNum,                                            higherCutoff_transNum= higherCutoff_transNum) #> 3 Dimension of spaital coordinates are provided. #> Perform leiden clustering at resolution_parameter = 1.000. #> Create Delanay network when config$method is NULL. #> Name the spatial network based on method as `Delaunay_network` when config$name is NULL. #> Use cellular_distance_cutoff = 25.0000 for searching of neighbor cells. #> Use `molecular_distance_cutoff` = 2.7000 for defining direct neighbor cells based on molecule-to-molecule distance. #> 960 unique genes are found in `transcript_df`. #> 960 unique genes are shared by the provided `score_GeneMatrix` that contains cluster profiles of 960 genes for 22 clusters. #> Found 756783 transcript records and 1375 cells in input `transcript_df`. #> Use the providied `molecular_distance_cutoff` = 2.7000 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use the providied `cellular_distance_cutoff` = 25.0000 for searching of neighbor cells. #> Found 960 common genes among transcript_df and score_GeneMatrix.  #> Found 1375 cells and assigned cell type based on the provided `refProfiles` cluster profiles. #> Run linear regreassion in 3 Dimension. #> Warning: Below model_cutoff = 50, skip 37 cells with fewer transcripts. Move forward with remaining 1338 cells. #> 373 cells, 0.2788 of all evaluated cells, are flagged for resegmentation with lrtest_nlog10P > 5.0. #> Run SVM in 3 Dimension. #> Found 373 common cells and 960 common genes among chosen_cells, transcript_df, and score_GeneMatrix.  #> Warning: Below model_cutoff = 50, skip 0 cells with fewer transcripts. Move forward with remaining 373 cells. #> Warning: Skip 0 cells with all transcripts in same class given `score_cutoff = -2`. Move forward with remaining 373 cells. #> Remove 0 cells with raw transcript score all in same class based on cutoff -2.00 when running spatial SVM model. #> Do spatial network analysis in 3 Dimension. #> 10652 chosen_transcripts are found in common cells. #> SVM spatial model further identified 17 cells with transcript score all in same class, exclude from transcript group analysis. #> Found 960 common genes among transcript_df and score_GeneMatrix.  #> Perform leiden clustering at resolution_parameter = 1.000. #> Use neighbor_distance_xy = 25.0000 for searching of neighbor cells. #> Use distance_cutoff = 2.7000 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use first 2D for searching cell neighborhood, but all 3 Dimension to identify direct neighbors based on molecular distance. #> Found 2289 common cells and 960 common genes among transcript_df, cell_networkDT, and score_GeneMatrix.  #> 914 chosen_cells are found in common cells. #> Use `leidenCut` method to evaluate putative merging event in space.  #> Perform leiden clustering at resolution_parameter = 1.000. #> A valid merging event must have query cell with 0.500 transcript shared same membership as neighbor cell of consistent cell type.  #> Run delanuay network in 3 Dimension. #> Perform ledien clustering on 59 potential merging events.  #> (`c_1_2_1339_g3`, `c_1_2_1403_g5`) cell pair with all 7 transcripts in same z plane, run 2D network analysis. #> (`c_1_2_1403_g5`, `c_1_2_1339_g3`) cell pair with all 7 transcripts in same z plane, run 2D network analysis. #> (`c_1_2_1731_g2`, `c_1_2_1792_g6`) cell pair with all 5 transcripts in same z plane, run 2D network analysis. #> (`c_1_2_1792_g6`, `c_1_2_1731_g2`) cell pair with all 5 transcripts in same z plane, run 2D network analysis. #> (`c_1_2_921_g5`, `c_1_2_941_g1`) cell pair with all 15 transcripts in same z plane, run 2D network analysis. #> (`c_1_2_941_g1`, `c_1_2_921_g5`) cell pair with all 15 transcripts in same z plane, run 2D network analysis. #> Found 915 common cells and 960 common genes among `names(reseg_full_converter)`, `transcript_df`, and `score_GeneMatrix`.    # case 2: run with alternative methods: \"delaunay\" for transcript grouping,  # \"geometryDiff\" for merging check  final_res2 <- fastReseg_perFOV_full_process(score_GeneMatrix= score_GeneMatrix,                                            transcript_df = mini_transcriptDF,                                            extracellular_cellID = extracellular_cellID,                                            molecular_distance_cutoff = 2.7,                                            cellular_distance_cutoff = 25,                                            score_baseline = score_baseline,                                            lowerCutoff_transNum = lowerCutoff_transNum,                                            higherCutoff_transNum= higherCutoff_transNum,                                            groupTranscripts_method = \"delaunay\",                                            spatialMergeCheck_method = \"geometryDiff\") #> 3 Dimension of spaital coordinates are provided. #> Create Delanay network when config$method is NULL. #> Name the spatial network based on method as `Delaunay_network` when config$name is NULL. #> Use cellular_distance_cutoff = 25.0000 for searching of neighbor cells. #> Use `molecular_distance_cutoff` = 2.7000 for defining direct neighbor cells based on molecule-to-molecule distance. #> 960 unique genes are found in `transcript_df`. #> 960 unique genes are shared by the provided `score_GeneMatrix` that contains cluster profiles of 960 genes for 22 clusters. #> Found 756783 transcript records and 1375 cells in input `transcript_df`. #> Use the providied `molecular_distance_cutoff` = 2.7000 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use the providied `cellular_distance_cutoff` = 25.0000 for searching of neighbor cells. #> Found 960 common genes among transcript_df and score_GeneMatrix.  #> Found 1375 cells and assigned cell type based on the provided `refProfiles` cluster profiles. #> Run linear regreassion in 3 Dimension. #> Warning: Below model_cutoff = 50, skip 37 cells with fewer transcripts. Move forward with remaining 1338 cells. #> 373 cells, 0.2788 of all evaluated cells, are flagged for resegmentation with lrtest_nlog10P > 5.0. #> Run SVM in 3 Dimension. #> Found 373 common cells and 960 common genes among chosen_cells, transcript_df, and score_GeneMatrix.  #> Warning: Below model_cutoff = 50, skip 0 cells with fewer transcripts. Move forward with remaining 373 cells. #> Warning: Skip 0 cells with all transcripts in same class given `score_cutoff = -2`. Move forward with remaining 373 cells. #> Remove 0 cells with raw transcript score all in same class based on cutoff -2.00 when running spatial SVM model. #> Do spatial network analysis in 3 Dimension. #> 10652 chosen_transcripts are found in common cells. #> c_1_2_1172 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_1184 with all 4 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> c_1_2_1211 with all 7 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> c_1_2_1403 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_1412 with all 7 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> c_1_2_1436 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_1585 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_1620 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_1625 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_1674 with all 5 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> c_1_2_1689 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_1732 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_1736 with all 12 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> c_1_2_1736 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_1801 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_1830 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_1887 has 2 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_1930 with all 11 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> c_1_2_1968 with all 5 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> c_1_2_2157 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_2279 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_2466 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_2503 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_2549 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_2566 with all 6 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> c_1_2_2590 with all 12 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> c_1_2_2786 with all 5 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> c_1_2_417 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_4201 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_4364 with all 13 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> c_1_2_4421 with all 4 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> c_1_2_477 has 2 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_562 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_712 has 1 solo transcripts, flag based on distance cutoff = 2.7000. #> c_1_2_941 with all 9 flagged transcripts of unique transcripts in same z plane, run 2D network analysis. #> SVM spatial model further identified 17 cells with transcript score all in same class, exclude from transcript group analysis. #> Found 960 common genes among transcript_df and score_GeneMatrix.  #> Use neighbor_distance_xy = 25.0000 for searching of neighbor cells. #> Use distance_cutoff = 2.7000 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use first 2D for searching cell neighborhood, but all 3 Dimension to identify direct neighbors based on molecular distance. #> Found 2292 common cells and 960 common genes among transcript_df, cell_networkDT, and score_GeneMatrix.  #> 917 chosen_cells are found in common cells. #> Use `geometryDiff` method to evaluate putative merging event in space.  #> A valid merging event to neighbor cell of consistent cell type must have no more than 0.500 area change in white space upon merging with respect to the concave area of either source cells.  #> Perform geometry analysis in 2D for potential merging events despite the provided 3 Dimension data. #> Perform geometry analysis on 127 potential merging events.  #> Found 922 common cells and 960 common genes among `names(reseg_full_converter)`, `transcript_df`, and `score_GeneMatrix`.    # case 3: run with default \"dbscan\" for transcript grouping, but apply no  # spatial constraint on merging final_res3 <- fastReseg_perFOV_full_process(score_GeneMatrix= score_GeneMatrix,                                             transcript_df = mini_transcriptDF,                                             extracellular_cellID = extracellular_cellID,                                             molecular_distance_cutoff = 2.7,                                             cellular_distance_cutoff = 25,                                             score_baseline = score_baseline,                                             lowerCutoff_transNum = lowerCutoff_transNum,                                             higherCutoff_transNum= higherCutoff_transNum,                                             cutoff_spatialMerge = 0) #> 3 Dimension of spaital coordinates are provided. #> Use cellular_distance_cutoff = 25.0000 for searching of neighbor cells. #> Use `molecular_distance_cutoff` = 2.7000 for defining direct neighbor cells based on molecule-to-molecule distance. #> 960 unique genes are found in `transcript_df`. #> 960 unique genes are shared by the provided `score_GeneMatrix` that contains cluster profiles of 960 genes for 22 clusters. #> Found 756783 transcript records and 1375 cells in input `transcript_df`. #> Use the providied `molecular_distance_cutoff` = 2.7000 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use the providied `cellular_distance_cutoff` = 25.0000 for searching of neighbor cells. #> Found 960 common genes among transcript_df and score_GeneMatrix.  #> Found 1375 cells and assigned cell type based on the provided `refProfiles` cluster profiles. #> Run linear regreassion in 3 Dimension. #> Warning: Below model_cutoff = 50, skip 37 cells with fewer transcripts. Move forward with remaining 1338 cells. #> 373 cells, 0.2788 of all evaluated cells, are flagged for resegmentation with lrtest_nlog10P > 5.0. #> Run SVM in 3 Dimension. #> Found 373 common cells and 960 common genes among chosen_cells, transcript_df, and score_GeneMatrix.  #> Warning: Below model_cutoff = 50, skip 0 cells with fewer transcripts. Move forward with remaining 373 cells. #> Warning: Skip 0 cells with all transcripts in same class given `score_cutoff = -2`. Move forward with remaining 373 cells. #> Remove 0 cells with raw transcript score all in same class based on cutoff -2.00 when running spatial SVM model. #> Do spatial network analysis in 3 Dimension. #> 10652 chosen_transcripts are found in common cells. #> SVM spatial model further identified 17 cells with transcript score all in same class, exclude from transcript group analysis. #> Found 960 common genes among transcript_df and score_GeneMatrix.  #> Use neighbor_distance_xy = 25.0000 for searching of neighbor cells. #> Use distance_cutoff = 2.7000 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use first 2D for searching cell neighborhood, but all 3 Dimension to identify direct neighbors based on molecular distance. #> Found 2289 common cells and 960 common genes among transcript_df, cell_networkDT, and score_GeneMatrix.  #> 914 chosen_cells are found in common cells. #> The provided `cutoff_spatialMerge = 0`, no spatial evaluation would be done for potential cell merging events.  #> Found 928 common cells and 960 common genes among `names(reseg_full_converter)`, `transcript_df`, and `score_GeneMatrix`."},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/flagTranscripts_LDA_hyperplane.html","id":null,"dir":"Reference","previous_headings":"","what":"flagTranscripts_LDA_hyperplane — flagTranscripts_LDA_hyperplane","title":"flagTranscripts_LDA_hyperplane — flagTranscripts_LDA_hyperplane","text":"find spatially connected transcripts among chosen_transcripts based LDA hyperplane spatial model scores cell much transcripts change goodness--fit space.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/flagTranscripts_LDA_hyperplane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"flagTranscripts_LDA_hyperplane — flagTranscripts_LDA_hyperplane","text":"","code":"flagTranscripts_LDA_hyperplane(   chosen_cells,   score_GeneMatrix,   transcript_df,   cellID_coln = \"CellId\",   transID_coln = \"transcript_id\",   transGene_coln = \"target\",   score_coln = \"score\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   model_cutoff = 50,   score_cutoff = -2 )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/flagTranscripts_LDA_hyperplane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"flagTranscripts_LDA_hyperplane — flagTranscripts_LDA_hyperplane","text":"chosen_cells cell_ID chosen cells score_GeneMatrix gene x cell-type matrix log-like score gene cell type transcript_df data.frame transcript_ID, cell_ID, score, spatial coordinates cellID_coln column name cell_ID transcript_df transID_coln column name transcript_ID transcript_df transGene_coln column name target gene name transcript_df score_coln column name score transcript_df spatLocs_colns column names 1st, 2nd, optional 3rd spatial dimension transcript transcript_df model_cutoff cutoff transcript number spatial modeling (default = 50) score_cutoff cutoff score separate high low score transcripts (default = -2)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/flagTranscripts_LDA_hyperplane.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"flagTranscripts_LDA_hyperplane — flagTranscripts_LDA_hyperplane","text":"data.frame cellID_coln, original cell id LDA_class, 0 cutoff, 1 cutoff transID_coln, original transcript_id transGene_coln, target gene transcript score_coln, score transcript_df spatLocs_colns spatial coorindates transcript LD1, LD1 value LDA model output LDA_cell_type, new cell type transcript groups within cells","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/flagTranscripts_LDA_hyperplane.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"flagTranscripts_LDA_hyperplane — flagTranscripts_LDA_hyperplane","text":"score transcripts within cell, assign 0 1 label transcript based whether score score_cutoff; run linear discriminant analysis lda(above_cutoff ~ x + y + xy + x^2 + y^2) 2D, lda(above_cutoff ~ x + y + z+ xy +xz + yz + x^2 + y^2 + z^2) 3D. Coordinate variables variance less 1e-8 used. Z-step 5E-4mm similar often resulted small variables z2.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/flag_bad_transcripts.html","id":null,"dir":"Reference","previous_headings":"","what":"flag_bad_transcripts — flag_bad_transcripts","title":"flag_bad_transcripts — flag_bad_transcripts","text":"find spatially connected transcripts among chosen_transcripts based SVM spatial model scores cell much transcripts change goodness--fit space.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/flag_bad_transcripts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"flag_bad_transcripts — flag_bad_transcripts","text":"","code":"flag_bad_transcripts(   chosen_cells,   score_GeneMatrix,   transcript_df,   cellID_coln = \"CellId\",   transID_coln = \"transcript_id\",   transGene_coln = \"target\",   score_coln = \"score\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   model_cutoff = 50,   score_cutoff = -2,   svm_args = list(kernel = \"radial\", scale = TRUE, gamma = 0.1) )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/flag_bad_transcripts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"flag_bad_transcripts — flag_bad_transcripts","text":"chosen_cells cell_ID chosen cells score_GeneMatrix gene x cell-type matrix log-like score gene cell type transcript_df data.frame transcript_ID, cell_ID, score, spatial coordinates cellID_coln column name cell_ID transcript_df transID_coln column name transcript_ID transcript_df transGene_coln column name target gene name transcript_df score_coln column name score transcript_df spatLocs_colns column names 1st, 2nd, optional 3rd spatial dimension transcript transcript_df model_cutoff cutoff transcript number spatial modeling (default = 50) score_cutoff cutoff score separate high low score transcripts (default = -2) svm_args list arguments pass svm function, typically involve kernel, gamma, scale","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/flag_bad_transcripts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"flag_bad_transcripts — flag_bad_transcripts","text":"data.frame cellID_coln, original cell id SVM_class, 0 cutoff, 1 cutoff transID_coln, original transcript_id transGene_coln, target gene transcript score_coln, score transcript_df spatLocs_colns spatial coorindates transcript DecVal, decision values svm model output SVM_cell_type, new cell type transcript groups within cells","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/flag_bad_transcripts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"flag_bad_transcripts — flag_bad_transcripts","text":"score transcripts within cell, assign 0 1 label transcript based whether score score_cutoff; run support vector machine svm(above_cutoff ~ x + y) 2D, svm(above_cutoff ~ x + y + z) 3D, default radial kernal scale = TRUE gamma = 0.1.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getCellType_maxScore.html","id":null,"dir":"Reference","previous_headings":"","what":"getCellType_maxScore — getCellType_maxScore","title":"getCellType_maxScore — getCellType_maxScore","text":"get cell type give maximum score","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getCellType_maxScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getCellType_maxScore — getCellType_maxScore","text":"","code":"getCellType_maxScore(   score_GeneMatrix,   transcript_df,   transGene_coln = \"target\",   cellID_coln = \"cell_ID\" )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getCellType_maxScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getCellType_maxScore — getCellType_maxScore","text":"score_GeneMatrix gene x cell-type score matrix transcript_df data.frame transcript_ID cell_ID transGene_coln column name target gene name transcript_df cellID_coln column name cell_ID transcript_df","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getCellType_maxScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getCellType_maxScore — getCellType_maxScore","text":"return named vector cell type values cell_ID names","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getNeighbors_transDF.html","id":null,"dir":"Reference","previous_headings":"","what":"getNeighbors_transDF — getNeighbors_transDF","title":"getNeighbors_transDF — getNeighbors_transDF","text":"find neighbor cells chosen_cells return relevant transcript data.frame query","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getNeighbors_transDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getNeighbors_transDF — getNeighbors_transDF","text":"","code":"getNeighbors_transDF(   chosen_cells = NULL,   neighbor_distance_xy = NULL,   transcript_df,   cellID_coln = \"CellId\",   transID_coln = \"transcript_id\",   transSpatLocs_coln = c(\"x\", \"y\", \"z\") )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getNeighbors_transDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getNeighbors_transDF — getNeighbors_transDF","text":"chosen_cells cell_ID chosen cells need evaluate re-segmentation neighbor_distance_xy maximum cell--cell distance x, y center query cells center neighbor cells direct contact, unit input spatial coordinate. Default = NULL use 2 times average cell diameter. transcript_df data.frame transcript_id, cell_id spatial coordinates cellID_coln column name cell_ID transcript_df transID_coln column name transcript_ID transcript_df transSpatLocs_coln column name 1st, 2nd, optional 3rd spatial dimension transcript transcript_df","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getNeighbors_transDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getNeighbors_transDF — getNeighbors_transDF","text":"data.frame transcript_id, transcript id transcript near chosen cell's neighborhood transSpatLocs_coln, coordinates in_query_cell, flag whether current transcript query cell, false means neighbor cells CellId, original cell id transcript query_CellId, original query cell id transcript's neighborhood","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getNeighbors_transDF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"getNeighbors_transDF — getNeighbors_transDF","text":"get neighborhood transcript data frame visualization Locate neighbor cells query cell 1st 2nd dimension via cell--cell distance within neighbor_distance_xy. neighbor cells found query cell, return query cell information . consider extracellular transcripts.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getScoreCellType_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"getScoreCellType_gene — getScoreCellType_gene","title":"getScoreCellType_gene — getScoreCellType_gene","text":"get transcript's score based score matrix chosen cell-type","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getScoreCellType_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getScoreCellType_gene — getScoreCellType_gene","text":"","code":"getScoreCellType_gene(   score_GeneMatrix,   transcript_df,   transID_coln = \"transcript_id\",   transGene_coln = \"target\",   celltype_coln = \"cell_type\" )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getScoreCellType_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getScoreCellType_gene — getScoreCellType_gene","text":"score_GeneMatrix gene x cell-type score matrix transcript_df data.frame transcript_ID cell_ID transID_coln column name transcript_ID transcript_df transGene_coln column name target gene name transcript_df celltype_coln column name cell type transcript_df","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/getScoreCellType_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getScoreCellType_gene — getScoreCellType_gene","text":"named vector score given cell type values transcript_id names","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/get_baselineCT.html","id":null,"dir":"Reference","previous_headings":"","what":"get_baselineCT — get_baselineCT","title":"get_baselineCT — get_baselineCT","text":"get cluster-specific quantile distribution transcript number per cell per molecule transcript score provided cell x gene expression matrix based reference profiles cell cluster assignment","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/get_baselineCT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_baselineCT — get_baselineCT","text":"","code":"get_baselineCT(refProfiles, counts, clust = NULL)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/get_baselineCT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_baselineCT — get_baselineCT","text":"refProfiles matrix cluster profiles, genes X clusters counts Counts matrix, cells X genes. clust Vector cluster assignments cell counts, default = NULL automatically assign cell cluster cell based maximum transcript score","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/get_baselineCT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_baselineCT — get_baselineCT","text":"list span_score, matrix average transcript tLLR score per molecule per cell 22 distinct cell types rows, percentile (0%, 25%, 50%, 75%, 100%) columns span_transNum, matrix transcript number per cell distinct cell types row, percentile (0%, 25%, 50%, 75%, 100%) columns score_baseline, named vector 25% quantile cluster-specific per cell transcript score, used score baseline  per cell transcript score higher baseline required call cell type high enough confidence lowerCutoff_transNum, named vector 25% quantile cluster-specific per molecule per cell transcript number, used transcript number cutoff higher cutoff required keep query cell higherCutoff_transNum, named vector median value cluster-specific per molecule per cell transcript number, used transcript number cutoff lower cutoff required keep query cell neighbor cell consistent cell type. clust_used,  named vector cluster assignments cell used baseline calculation, cell_ID counts name","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/get_baselineCT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get_baselineCT — get_baselineCT","text":"Calculate average per molecule transcript score cell counts expression matrix based provided cluster profiles refProfiles cluster assignment cell clust; get quantile distribution transcript number per molecule per cell transcript score cluster. function also recommend cutoff transcript score transcript number used re-segmentation pipeline based calculated quantile distribution.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/get_baselineCT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_baselineCT — get_baselineCT","text":"","code":"data(example_refProfiles) data(ori_RawExprs) baselineData <- get_baselineCT(refProfiles = example_refProfiles,                                 counts = ori_RawExprs, clust = NULL) #> Found 960 common genes among `refProfiles` and `counts`.  #> No common cell types/clusters found between `clust` and `refProfiles`. #> Perform cluster assignment based on maximum transcript score given the provided `refProfiles`."},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/get_neighborhood_content.html","id":null,"dir":"Reference","previous_headings":"","what":"get_neighborhood_content — get_neighborhood_content","title":"get_neighborhood_content — get_neighborhood_content","text":"find neighbor cells transcripts direct neighbor chosen_cell, check tLLRv2 score neighbor cell type, return neighborhood information","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/get_neighborhood_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_neighborhood_content — get_neighborhood_content","text":"","code":"get_neighborhood_content(   chosen_cells = NULL,   score_GeneMatrix,   score_baseline = NULL,   neighbor_distance_xy = NULL,   distance_cutoff = 2.7,   transcript_df,   cellID_coln = \"CellId\",   celltype_coln = \"cell_type\",   transID_coln = \"transcript_id\",   transGene_coln = \"target\",   transSpatLocs_coln = c(\"x\", \"y\", \"z\") )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/get_neighborhood_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_neighborhood_content — get_neighborhood_content","text":"chosen_cells cell_ID chosen cells need evaluate re-segmentation score_GeneMatrix gene x cell-type matrix log-like score gene cell type score_baseline named vector score baseline cell type listed score_GeneMatrix neighbor_distance_xy maximum cell--cell distance x, y center query cells center neighbor cells direct contact, unit input spatial coordinate. Default = NULL use 2 times average 2D cell diameter. distance_cutoff maximum molecule--molecule distance within connected transcript group, unit input spatial coordinate (default = 2.7 micron). set NULL, pipeline first randomly choose 2500 cells 10 random picked ROIs search radius 5 times neighbor_distance_xy, calculate minimal molecular distance picked cells. pipeline use 5 times 90% quantile minimal molecular distance distance_cutoff. calculation slow recommended large transcript data.frame. transcript_df data.frame transcript_id, target/geneName, x, y cell_id cellID_coln column name cell_ID transcript_df celltype_coln column name cell_type transcript_df transID_coln column name transcript_ID transcript_df transGene_coln column name target gene name transcript_df transSpatLocs_coln column name 1st, 2nd, optional 3rd spatial dimension transcript transcript_df","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/get_neighborhood_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_neighborhood_content — get_neighborhood_content","text":"data.frame #' CellId, original cell id chosen cells cell_type, original cell type chosen cells transcript_num, number transcripts chosen cells self_celltype, cell type give maximum score query cell score_under_self, score query cell maximum celltype neighbor_CellId, cell id neighbor cell whose cell type gives maximum score query cell among neighbors, including query cell neighbor_celltype, cell type gives maximum score query cell among non-self neighbor cells score_under_neighbor, score query cell neighbor_celltype","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/get_neighborhood_content.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get_neighborhood_content — get_neighborhood_content","text":"Locate neighbor cells query cell firstly via cell--cell distance 2D plane within neighbor_distance_xy, via molecule--molecule 3D distance within distance_cutoff. neighbor cells found query cell, use cell id cell type query cell fill columns neighbor cells returned data.frame","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/groupTranscripts_Delaunay.html","id":null,"dir":"Reference","previous_headings":"","what":"groupTranscripts_Delaunay — groupTranscripts_Delaunay","title":"groupTranscripts_Delaunay — groupTranscripts_Delaunay","text":"group flagged transcript within cell based spatial connectivity transcript delaunay network","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/groupTranscripts_Delaunay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"groupTranscripts_Delaunay — groupTranscripts_Delaunay","text":"","code":"groupTranscripts_Delaunay(   chosen_transcripts = NULL,   config_spatNW_transcript = list(name = \"transcript_delaunay_network\", dimensions =     \"all\", method = \"Delaunay\", minimum_k = 0, delaunay_method = \"delaunayn_geometry\",     maximum_distance_delaunay = \"auto\", options = \"Pp\", Y = TRUE, j = TRUE, S = 0),   distance_cutoff = \"auto\",   transcript_df,   cellID_coln = \"CellId\",   transID_coln = \"transcript_id\",   transSpatLocs_coln = c(\"x\", \"y\", \"z\") )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/groupTranscripts_Delaunay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"groupTranscripts_Delaunay — groupTranscripts_Delaunay","text":"chosen_transcripts transcript_id chosen transcript config_spatNW_transcript configuration list create spatial network transcript level, see manual createSpatialDelaunayNW_from_spatLocs details distance_cutoff maximum distance within connected transcript group (default = \"auto\") transcript_df data.frame transcript_id, target/geneName, x, y cell_id cellID_coln column name cell_ID transcript_df transID_coln column name transcript_ID transcript_df transSpatLocs_coln column name 1st, 2nd, optional 3rd spatial dimension transcript transcript_df","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/groupTranscripts_Delaunay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"groupTranscripts_Delaunay — groupTranscripts_Delaunay","text":"data frame connected transcripts among chosen_transcripts #' cellID_coln, orignal cell_ID transID_coln, connected transcripts among chosen_transcripts transSpatLocs_coln, spatial coordinates transcript transcript_group, group chosen_transcripts","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/groupTranscripts_Delaunay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"groupTranscripts_Delaunay — groupTranscripts_Delaunay","text":"query cell, build network flagged transcripts identify groups. case 3 transcripts, determine grouping based distance cutoff directly; distance cutoff = 'auto', additional edge filtering based delaunay network output use 20% average XY cell range cutoff 3 transcript.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/groupTranscripts_dbscan.html","id":null,"dir":"Reference","previous_headings":"","what":"groupTranscripts_dbscan — groupTranscripts_dbscan","title":"groupTranscripts_dbscan — groupTranscripts_dbscan","text":"group flagged transcript within cell based spatial clustering using dbscan","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/groupTranscripts_dbscan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"groupTranscripts_dbscan — groupTranscripts_dbscan","text":"","code":"groupTranscripts_dbscan(   chosen_transcripts = NULL,   distance_cutoff = \"auto\",   transcript_df,   cellID_coln = \"CellId\",   transID_coln = \"transcript_id\",   transSpatLocs_coln = c(\"x\", \"y\", \"z\") )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/groupTranscripts_dbscan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"groupTranscripts_dbscan — groupTranscripts_dbscan","text":"chosen_transcripts transcript_id chosen transcript distance_cutoff maximum molecule--molecule distance within transcript group (default = \"auto\") transcript_df data.frame transcript_id, target/geneName, x, y cell_id cellID_coln column name cell_ID transcript_df transID_coln column name transcript_ID transcript_df transSpatLocs_coln column name 1st, 2nd, optional 3rd spatial dimension transcript transcript_df","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/groupTranscripts_dbscan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"groupTranscripts_dbscan — groupTranscripts_dbscan","text":"data frame connected transcripts among chosen_transcripts #' cellID_coln, orignal cell_ID transID_coln, connected transcripts among chosen_transcripts transSpatLocs_coln, spatial coordinates transcript transcript_group, group chosen_transcripts","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/groupTranscripts_dbscan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"groupTranscripts_dbscan — groupTranscripts_dbscan","text":"query cell, group flagged transcripts based molecular distance . distance cutoff = 'auto', use 20% average XY cell range cutoff. case 3 flagged transcripts per cell, determine grouping based distance cutoff directly. case transcripts per cell, use dbscan group transcripts distance_cutoff eps minPts = 1.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/igraph_delete_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"igraph_delete_edges — igraph_delete_edges","title":"igraph_delete_edges — igraph_delete_edges","text":"Delete edges igraph object version compatibility","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/igraph_delete_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"igraph_delete_edges — igraph_delete_edges","text":"","code":"igraph_delete_edges(graph, edges)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/igraph_delete_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"igraph_delete_edges — igraph_delete_edges","text":"graph igraph object edges deleted. edges vector edge IDs edge selector delete.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/igraph_delete_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"igraph_delete_edges — igraph_delete_edges","text":"igraph object specified edges removed.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/igraph_delete_edges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"igraph_delete_edges — igraph_delete_edges","text":"function wraps igraph::delete_edges() ensures compatibility older versions (<2.0.0) igraph used delete.edges().","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/initializeAllSegRes.html","id":null,"dir":"Reference","previous_headings":"","what":"initializeAllSegRes — initializeAllSegRes","title":"initializeAllSegRes — initializeAllSegRes","text":"initialize result holder fastReseg_full_pipeline based preprocessed data","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/initializeAllSegRes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initializeAllSegRes — initializeAllSegRes","text":"","code":"initializeAllSegRes(   prep_res,   save_intermediates = TRUE,   return_perCellData = TRUE )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/initializeAllSegRes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"initializeAllSegRes — initializeAllSegRes","text":"prep_res nested list elements 'refProfiles', 'baselineData', 'cutoffs_list', outputs runPreprocess save_intermediates flag save intermediate outputs output folder, including data.frame spatial modeling statistics cell, return_perCellData flag return save output folder gene x cell count matrix per cell DF updated mean spatial coordinates new cell type","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/initializeAllSegRes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"initializeAllSegRes — initializeAllSegRes","text":"list refProfiles genes X clusters matrix cluster-specific reference profiles used resegmenation pipeline baselineData list two matrice cluster X percentile format cluster-specific percentile distribution per cell value; span_score average per molecule transcript tLLR score cell, span_transNum transcript number cell. cutoffs_list list cutoffs used resegmentation pipeline, including, score_baseline, lowerCutoff_transNum, higherCutoff_transNum, cellular_distance_cutoff, molecular_distance_cutoff ctrl_genes vector control genes whose transcript scores set fixed value cell types updated_perCellDT empty list, return return_perCellData = TRUE updated_perCellExprs empty list, return return_perCellData = TRUE reseg_actions list 4 empty elements, output format decide_ReSegment_Operations, return save_intermediates = TRUE","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/makeDummyOuts_perFOV.html","id":null,"dir":"Reference","previous_headings":"","what":"makeDummyOuts_perFOV — makeDummyOuts_perFOV","title":"makeDummyOuts_perFOV — makeDummyOuts_perFOV","text":"supporting function fastReseg_perFOV_full_process, makes dummy outputs based input transcript_df format outputs fastReseg_perFOV_full_process() returns modStats_ToFlagCells data.frame, used case cells flagged cell segmentation error.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/makeDummyOuts_perFOV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"makeDummyOuts_perFOV — makeDummyOuts_perFOV","text":"","code":"makeDummyOuts_perFOV(   all_genes,   transcript_df,   transID_coln = \"UMI_transID\",   transGene_coln = \"target\",   cellID_coln = \"UMI_cellID\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   return_intermediates = TRUE,   return_perCellData = TRUE,   includeAllRefGenes = FALSE )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/makeDummyOuts_perFOV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"makeDummyOuts_perFOV — makeDummyOuts_perFOV","text":"all_genes vector genes consider analysis listed rows score_GeneMatrix parent function transcript_df data.frame transcript columns transcript_id, target gene name, original cell_id, spatial coordinates, well tLLR_maxCellType score_tLLR_maxCellType columns earlier step parent function transID_coln column name transcript_ID transcript_df transGene_coln column name target gene name transcript_df cellID_coln column name cell_ID transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates transcript_df return_intermediates flag return intermediate outputs, including data.frame spatial modeling statistics cell return_perCellData flag return gene x cell count matrix per cell DF updated mean spatial coordinates new cell type includeAllRefGenes flag include genes score_GeneMatrix returned updated_perCellExprs missing genes value 0 (default = FALSE)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/makeDummyOuts_perFOV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"makeDummyOuts_perFOV — makeDummyOuts_perFOV","text":"list groupDF_ToFlagTrans data.frame group assignment transcripts within putative wrongly segmented cells, merged output flag_bad_transcripts groupTranscripts_Delaunay groupTranscripts_dbscan functions, return return_intermediates = TRUE neighborhoodDF_ToReseg data.frame neighborhood environment low-score transcript groups, output get_neighborhood_content function, return return_intermediates = TRUE reseg_actions list 4 elements describing resegmenation performed original transcript_df group assignment transcripts listed groupDF_ToFlagTrans, output decide_ReSegment_Operations function, return return_intermediates = TRUE updated_transDF updated transcript_df updated_cellID updated_celltype column based reseg_full_converter updated_perCellDT per cell data.table mean spatial coordinates, new cell type resegmentation action resegmentation, return return_perCellData = TRUE updated_perCellExprs gene x cell count sparse matrix updated transcript data.frame resegmentation, return return_perCellData = TRUE","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/mini_transcriptDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Transcript level data frame from Example dataset for spatial transcriptional profiling of tissue — mini_transcriptDF","title":"Transcript level data frame from Example dataset for spatial transcriptional profiling of tissue — mini_transcriptDF","text":"example dataset based one run SMI RNA readout FFPE melanoma tissue samples. contains information 1375 cells 756783 transcripts within cropped region one single FOV 1 tissue section.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/mini_transcriptDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transcript level data frame from Example dataset for spatial transcriptional profiling of tissue — mini_transcriptDF","text":"","code":"data(mini_transcriptDF)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/mini_transcriptDF.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Transcript level data frame from Example dataset for spatial transcriptional profiling of tissue — mini_transcriptDF","text":"object class \"data.frame\" 756783 transcripts row 9 variables UMI_transID unique id transcript UMI_cellID unique id cell based original cell segmentaion assignment x spatial coordinate transcript x-axis given FOV, unit micron y spatial coordinate transcript y-axis given FOV, unit micron z spatial coordinate transcript z-axis given FOV, unit micron target gene identity given transcript slide slide ID given transcript fov fov ID given transcript CellId cell label assignment given transcript within given FOV based original cell segmentation","code":""},{"path":[]},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/myFun_3point_singleCell.html","id":null,"dir":"Reference","previous_headings":"","what":"myFun_3point_singleCell — myFun_3point_singleCell","title":"myFun_3point_singleCell — myFun_3point_singleCell","text":"supporting function groupTranscripts_Delaunay, assign group ID 3 transcripts single cell 3D based distant cutoff","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/myFun_3point_singleCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"myFun_3point_singleCell — myFun_3point_singleCell","text":"","code":"myFun_3point_singleCell(   dfCoord_subset,   transSpatLocs_coln = c(\"x\", \"y\", \"z\"),   distance_cutoff = 2.7,   startGroup = 1 )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/myFun_3point_singleCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"myFun_3point_singleCell — myFun_3point_singleCell","text":"dfCoord_subset transcript data.table single cell 3 transcripts rows transSpatLocs_coln column name 1st, 2nd, optional 3rd spatial dimension transcript transcript_df distance_cutoff maximum distance within connected transcript group startGroup index starting group ID","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/myFun_3point_singleCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"myFun_3point_singleCell — myFun_3point_singleCell","text":"data.table transcript_group column added original input data.table","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/myFun_fov_load.html","id":null,"dir":"Reference","previous_headings":"","what":"myFun_fov_load — myFun_fov_load","title":"myFun_fov_load — myFun_fov_load","text":"supporting function runPreprocess, fastReseg_full_pipeline fastReseg_flag_all_errors, load single field--view (FOV) transcript data file data frame file path.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/myFun_fov_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"myFun_fov_load — myFun_fov_load","text":"","code":"myFun_fov_load(path_to_fov)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/myFun_fov_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"myFun_fov_load — myFun_fov_load","text":"path_to_fov file path per fov transcript data.frame","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/myFun_fov_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"myFun_fov_load — myFun_fov_load","text":"data frame containing transcript data.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/myFun_fov_load.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"myFun_fov_load — myFun_fov_load","text":"function automatically detects file format based extension supports common tabular binary formats, including .csv, .txt, .tsv: tabular text files (comma- tab-delimited) .csv.gz, .txt.gz, .tsv.gz: gzip-compressed tabular files .RData: R workspace files containing single data frame object .rds: serialized R object files","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/myFun_fov_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"myFun_fov_load — myFun_fov_load","text":"","code":"if (FALSE) { # \\dontrun{ df <- myFun_fov_load(\"data/fov1.csv\") df <- myFun_fov_load(\"data/fov2.tsv.gz\") df <- myFun_fov_load(\"data/fov3.RData\") } # }"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/numCores.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of cores for parallelized operations — numCores","title":"Get number of cores for parallelized operations — numCores","text":"Get number cores parallelized operations","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/numCores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of cores for parallelized operations — numCores","text":"","code":"numCores(percentCores = 0.9, minNotUsedCores = 2)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/numCores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of cores for parallelized operations — numCores","text":"percentCores percent cores use parallelization, value range 0 1 minNotUsedCores minimum number cores leave background processes","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/numCores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number of cores for parallelized operations — numCores","text":"number cores use mclapply","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/ori_CellStatsDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell level data frame from Example dataset for spatial transcriptional profiling of tissue — ori_CellStatsDF","title":"Cell level data frame from Example dataset for spatial transcriptional profiling of tissue — ori_CellStatsDF","text":"example dataset based one run SMI RNA readout FFPE melanoma tissue samples. contains information 1375 cells 756783 transcripts within cropped region one single FOV 1 tissue section.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/ori_CellStatsDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell level data frame from Example dataset for spatial transcriptional profiling of tissue — ori_CellStatsDF","text":"","code":"data(ori_CellStatsDF)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/ori_CellStatsDF.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cell level data frame from Example dataset for spatial transcriptional profiling of tissue — ori_CellStatsDF","text":"object class \"data.frame\" 1375 cells row 10 variables cell_ID unique id cell based original cell segmentaion assignment slide slide ID given cell fov fov ID given cell CellId cell label assignment given cell within given FOV based original cell segmentation CenterX spatial coordinate cell centroid x-axis given FOV, unit micron CenterY spatial coordinate cell centroid y-axis given FOV, unit micron Width bounding box length given cell segment along x-axis, unit micron Height bounding box length given cell segment along y-axis, unit micron Area area given cell segment, unit square micron AspectRatio aspect ratio boundingbox width height given cell segment","code":""},{"path":[]},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/ori_RawExprs.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell x Gene expression matrix from Example dataset for spatial transcriptional profiling of tissue — ori_RawExprs","title":"Cell x Gene expression matrix from Example dataset for spatial transcriptional profiling of tissue — ori_RawExprs","text":"example dataset based one run SMI RNA readout FFPE melanoma tissue samples. contains single cell gene expression profile 1375 cells across 960 genes.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/ori_RawExprs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell x Gene expression matrix from Example dataset for spatial transcriptional profiling of tissue — ori_RawExprs","text":"","code":"data(ori_RawExprs)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/ori_RawExprs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cell x Gene expression matrix from Example dataset for spatial transcriptional profiling of tissue — ori_RawExprs","text":"object class \"matrix\" 4619 cells row 960 genes columns","code":""},{"path":[]},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/plotSpatialScoreMultiCells.html","id":null,"dir":"Reference","previous_headings":"","what":"plotSpatialScoreMultiCells — plotSpatialScoreMultiCells","title":"plotSpatialScoreMultiCells — plotSpatialScoreMultiCells","text":"plot spatial plot transcripts within chosen cells, colored score, facet cell_ID","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/plotSpatialScoreMultiCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotSpatialScoreMultiCells — plotSpatialScoreMultiCells","text":"","code":"plotSpatialScoreMultiCells(   chosen_cells,   cell_labels,   transcript_df,   cellID_coln = \"CellId\",   transID_coln = \"transcript_id\",   score_coln = \"score\",   spatLocs_colns = c(\"x\", \"y\"),   point_size = 0.1,   plot_discrete = FALSE,   title = NULL )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/plotSpatialScoreMultiCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotSpatialScoreMultiCells — plotSpatialScoreMultiCells","text":"chosen_cells cell_ID chosen cells cell_labels title labels cell's spatial plot transcript_df data.frame transcript_ID, cell_ID, spatial locations cellID_coln column name cell_ID transcript_df transID_coln column name transcript_ID transcript_df score_coln column name score transcript_df spatLocs_colns column names 1st, 2nd dimension spatial coordinates transcript_df point_size marker size transcript spot fig (default = 0.1) plot_discrete flag plot transcript score discrete color title text title plot","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/plotSpatialScoreMultiCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotSpatialScoreMultiCells — plotSpatialScoreMultiCells","text":"ggplot","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/prepResegDF.html","id":null,"dir":"Reference","previous_headings":"","what":"prepResegDF — prepResegDF","title":"prepResegDF — prepResegDF","text":"supporting function fastReseg_perFOV_full_process, combine runTranscriptErrorDetection() output transcript data.frame prep runSegRefinement()","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/prepResegDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepResegDF — prepResegDF","text":"","code":"prepResegDF(   transcript_df,   groupDF_ToFlagTrans,   cellID_coln = \"UMI_cellID\",   transID_coln = \"UMI_transID\" )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/prepResegDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepResegDF — prepResegDF","text":"transcript_df data.frame transcript columns transcript_id, target gene name, original cell_id, spatial coordinates tLLR_maxCellType. groupDF_ToFlagTrans data frame transcripts chosen_cells , columns connect_group,tmp_cellID,group_maxCellType, output runTranscriptErrorDetection() cellID_coln column name cell_ID transcript_df transID_coln column name transcript_ID transcript_df","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/prepResegDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prepResegDF — prepResegDF","text":"list two elements reseg_transcript_df data.frame transcript_id, target/geneName, x, y, cell_id transcript groups tmp_cellID cell type maximum transcript scores transcript group group_maxCellType groups_to_reseg vector chosen transcript groups need evaluate re-segmentation","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/prepare_perFOV_transDF.html","id":null,"dir":"Reference","previous_headings":"","what":"prepare_perFOV_transDF — prepare_perFOV_transDF","title":"prepare_perFOV_transDF — prepare_perFOV_transDF","text":"supporting function runPreprocess, fastReseg_internalRef fastReseg_flag_all_errors get unique IDs cells transcripts, convert pixel coordinates um; drop_original = FALSE, function also return original per FOV based cell ID coordinates columns CellId, pixel_x, pixel_y, idx_z`.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/prepare_perFOV_transDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepare_perFOV_transDF — prepare_perFOV_transDF","text":"","code":"prepare_perFOV_transDF(   each_transDF,   fov_centerLocs,   prefix_vals = NULL,   pixel_size = 0.18,   zstep_size = 0.8,   transID_coln = NULL,   transGene_coln = \"target\",   cellID_coln = \"CellId\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   invert_y = TRUE,   extracellular_cellID = NULL,   drop_original = FALSE )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/prepare_perFOV_transDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepare_perFOV_transDF — prepare_perFOV_transDF","text":"each_transDF data.frame raw transcript fov_centerLocs named vector fov 2D coordinates prefix_vals named vector values used prefix UMI_transID UMI_cellID; prefix_vals != NULL, unique transcript_id generated prefix_vals transID_coln each_transDF pixel_size micrometer size image pixel listed 1st 2nd dimension spatLocs_colns each_transDF zstep_size micrometer size z-step optional 3rd dimension spatLocs_colns each_transDF transID_coln column name transcript_ID transcript_df, default = NULL use row index transcript each_transDF; prefix_vals != NULL, unique transcript_id generated prefix_vals transID_coln each_transDF transGene_coln column name target gene name each_transDF cellID_coln column name cell_ID each_transDF; prefix_colns != NULL, unique cell_ID generated prefix_vals cellID_coln transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates each_transDF invert_y flag invert y axis local coordinates stitching (default = TRUE) extracellular_cellID vector cell_ID extracellular transcripts removed resegmention pipeline (default = NULL) drop_original flag drop original per FOV based cell ID coordinates columns CellId, pixel_x, pixel_y, idx_z (default = FALSE)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/prepare_perFOV_transDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prepare_perFOV_transDF — prepare_perFOV_transDF","text":"list contains transcript_df downstream process extracellular transcript data.frame ' intraC data.frame intracellular transcript, UMI_transID UMI_cellID column names unique transcript_id cell_id, target column name target gene name extraC data.frame extracellular transcript, structure intraC data.frame returned list","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runPreprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"runPreprocess — runPreprocess","title":"runPreprocess — runPreprocess","text":"modular wrapper get baseline data cutoffs entire dataset","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runPreprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runPreprocess — runPreprocess","text":"","code":"runPreprocess(   counts,   clust = NULL,   refProfiles = NULL,   score_baseline = NULL,   lowerCutoff_transNum = NULL,   higherCutoff_transNum = NULL,   imputeFlag_missingCTs = TRUE,   ctrl_genes = NULL,   svmClass_score_cutoff = -2,   molecular_distance_cutoff = 2.7,   cellular_distance_cutoff = NULL,   transcript_df = NULL,   transDF_fileInfo = NULL,   filepath_coln = \"file_path\",   prefix_colns = c(\"slide\", \"fov\"),   fovOffset_colns = c(\"stage_X\", \"stage_Y\"),   pixel_size = 0.18,   zstep_size = 0.8,   transID_coln = NULL,   transGene_coln = \"target\",   cellID_coln = \"CellId\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   invert_y = TRUE,   extracellular_cellID = NULL )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runPreprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runPreprocess — runPreprocess","text":"counts Counts matrix entire dataset, cells X genes. clust Vector cluster assignments cell counts, NULL automatically assign cell cluster cell based maximum transcript score given provided refProfiles refProfiles matrix cluster profiles, genes X clusters, default = NULL use external cluster assignments. note, refProfiles !=  NULL, genes unique counts missing refProfiles omitted downstream analysis. score_baseline named vector score baseline cell type listed refProfiles  per cell transcript score higher baseline required call cell type high enough confidence; default = NULL calculate counts refProfiles lowerCutoff_transNum named vector transcript number cutoff cell type higher cutoff required keep query cell ; default = NULL calculate counts refProfiles higherCutoff_transNum named vector transcript number cutoff cell type lower cutoff required keep query cell neighbor cell consistent cell type; default = NULL calculate counts refProfiles imputeFlag_missingCTs flag impute score_baseline, lowerCutoff_transNum,higherCutoff_transNum cell types present refProfiles missing provided transcript data files provided baseline cutoffs; TRUE, median values existing cell types used values missing cell types. ctrl_genes vector control genes present input transcript data.frame refProfiles expect cell type dependency, e.g. negative control probes; ctrl_genes included FastReseg analysis. (default = NULL) svmClass_score_cutoff cutoff transcript score separate high low score transcripts SVM, used score values ctrl_genes (default = -2) molecular_distance_cutoff maximum molecule--molecule distance within connected transcript group, unit micron (default = 2.7 micron). set NULL, pipeline first randomly choose 2500 cells 10 random picked ROIs search radius 5 times cellular_distance_cutoff, calculate minimal molecular distance picked cells. pipeline use 5 times 90% quantile minimal molecular distance molecular_distance_cutoff. calculation slow recommended large transcript data.frame. cellular_distance_cutoff maximum cell--cell distance x, y center query cells center neighbor cells direct contact, unit micron. Default = NULL use 2 times average 2D cell diameter. transcript_df data.frame transcript level information unique CellId, default = NULL read transDF_fileInfo transDF_fileInfo data.frame row individual file per FOV transcript data.frame within coordinates CellId unique, columns include file path per FOV transcript data.frame file, annotation columns like slide fov used prefix creating unique cell_ID across entire dataset; NULL, use provided transcript_df directly filepath_coln column name individual file per FOV transcript data.frame transDF_fileInfo prefix_colns column names annotation transDF_fileInfo, added CellId prefix creating unique cell_ID entire dataset; set NULL use original transID_coln cellID_coln fovOffset_colns column name coordinate offsets 1st 2nd dimension per FOV transcript data.frame transDF_fileInfo, unit micron Notice assays like SMI XY axes swapped stage FOV fovOffset_colns c(\"stage_Y\", \"stage_X\"). pixel_size micrometer size image pixel listed 1st 2nd dimension spatLocs_colns transcript_df zstep_size micrometer size z-step optional 3rd dimension spatLocs_colns transcript_df transID_coln column name transcript_ID transcript_df, default = NULL use row index transcript transcript_df; prefix_colns != NULL, unique transcript_id generated prefix_colns transID_coln transcript_df transGene_coln column name target gene name transcript_df cellID_coln column name cell_ID transcript_df; prefix_colns != NULL, unique cell_ID generated prefix_colns cellID_coln transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates transcript_df invert_y flag invert y axis local coordinates stitching (default = TRUE) extracellular_cellID vector cell_ID extracellular transcripts removed resegmention pipeline (default = NULL)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runPreprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runPreprocess — runPreprocess","text":"nested list clust vector cluster assignments cell counts, used caculating baselineData refProfiles genes X clusters matrix cluster-specific reference profiles use resegmenation pipeline baselineData list two matrice cluster X percentile format cluster-specific percentile distribution per cell value; span_score average per molecule transcript tLLR score cell, span_transNum transcript number cell. cutoffs_list list cutoffs use resegmentation pipeline, including, score_baseline, lowerCutoff_transNum, higherCutoff_transNum, cellular_distance_cutoff, molecular_distance_cutoff ctrl_genes vector control genes whose transcript scores set fixed value cell types, return ctrl_genes NULL. score_GeneMatrix gene x cell-type score matrix use resegmenation pipeline, scores ctrl_genes set svmClass_score_cutoff processed_1st_transDF list 2 elements intracellular extracellular transcript data.frame processed outcomes 1st transcrip file cutoffs_list list containing score_baseline named vector score baseline cell type listed refProfiles  per cell transcript score higher baseline required call cell type high enough confidence. lowerCutoff_transNum named vector transcript number cutoff cell type higher cutoff required keep query cell . higherCutoff_transNum named vector transcript number cutoff cell type lower cutoff required keep query cell neighbor cell consistent cell type. cellular_distance_cutoff maximum cell--cell distance x, y center query cells center neighbor cells direct contact, unit micron. molecular_distance_cutoff maximum molecule--molecule distance within connected transcript group, unit micron.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runPreprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"runPreprocess — runPreprocess","text":"","code":"data(\"mini_transcriptDF\") data(\"example_CellGeneExpr\") data(\"example_clust\") data(\"example_refProfiles\") # cell_ID for extracellualr transcripts extracellular_cellID <- mini_transcriptDF[which(mini_transcriptDF$CellId ==0), 'cell_ID']   # case 1: use `clust` and `transcript_df` directly, with known distance cutoffs prep_res1 <- runPreprocess(   counts = example_CellGeneExpr,   clust = example_clust,   refProfiles = NULL,   score_baseline = NULL,   lowerCutoff_transNum = NULL,   higherCutoff_transNum= NULL,   imputeFlag_missingCTs = FALSE,   ctrl_genes = NULL,   svmClass_score_cutoff = -2,   molecular_distance_cutoff = 2.7,   cellular_distance_cutoff = 20,   transcript_df = mini_transcriptDF,    transDF_fileInfo = NULL,    pixel_size = 0.18,   zstep_size = 0.8,    transID_coln = NULL,   transGene_coln = \"target\",   cellID_coln = 'CellId',   spatLocs_colns = c('x','y','z'),   extracellular_cellID = 0  ) #> Found 960 common genes among `refProfiles` and `counts`.  #> Use the providied `molecular_distance_cutoff` = 2.7000 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use the providied `cellular_distance_cutoff` = 20.0000 for searching of neighbor cells.  # case 2: use `refProfiles` to get `clust`, use `transcript_df` directly,  # unknown distance cutoffs prep_res2 <- runPreprocess(   counts = example_CellGeneExpr,   clust = NULL,   refProfiles = example_refProfiles,   score_baseline = NULL,   lowerCutoff_transNum = NULL,   higherCutoff_transNum= NULL,      # impute for cell types missing in provided 'transcript_df'    imputeFlag_missingCTs = TRUE,       ctrl_genes = NULL,   svmClass_score_cutoff = -2,   molecular_distance_cutoff = NULL,   cellular_distance_cutoff = NULL,   transcript_df = mini_transcriptDF,    transDF_fileInfo = NULL,    pixel_size = 0.18,   zstep_size = 0.8,    transID_coln = NULL,   transGene_coln = \"target\",   cellID_coln = 'CellId',   spatLocs_colns = c('x','y','z'),   extracellular_cellID = 0  ) #> Found 960 common genes among `refProfiles` and `counts`.  #> No common cell types/clusters found between `clust` and `refProfiles`. #> Perform cluster assignment based on maximum transcript score given the provided `refProfiles`. #> Extract distance cutoff from first input transcript data. #> 3 Dimension of spaital coordinates are provided. #>  #> Use 2 times of average 2D cell diameter as cellular_distance_cutoff = 4.3628 for searching of neighbor cells. #> Identified 3D coordinates with variance.  #> Distribution of minimal molecular distance between 1375 cells: 0, 0.01, 0.03, 0.04, 0.05, 0.07, 0.09, 0.11, 0.14, 0.18, 1.24, at quantile = 0%, 10%, 20%, 30%, 40%, 50%, 60%, 70%, 80%, 90%, 100%. #> Use 5 times of 90% quantile of minimal 3D molecular distance between picked cells as `molecular_distance_cutoff` = 0.9003 for defining direct neighbor cells. #> Use `molecular_distance_cutoff` = 0.9003 for defining direct neighbor cells based on molecule-to-molecule distance. #> Use cellular_distance_cutoff = 4.3628 for searching of neighbor cells.  # case 3: provide both `refProfiles` and `clust`, use transDF_fileInfo for  # multi-files, no known molecular distance cutoffs dataDir <- system.file(\"extdata\", package = \"FastReseg\") transDF_fileInfo <- data.frame(   file_path = fs::path(dataDir,                        c(\"Run4104_FOV001__complete_code_cell_target_call_coord.csv\",                          \"Run4104_FOV002__complete_code_cell_target_call_coord.csv\")),   slide = c(1, 1),   fov = c(1,2),   stage_X = 1000*c(5.13, -2.701),   stage_Y = 1000*c(-0.452, 0.081)) prep_res3 <- runPreprocess(   counts = example_CellGeneExpr,   clust = example_clust,   refProfiles = example_refProfiles,   score_baseline = NULL,   lowerCutoff_transNum = NULL,   higherCutoff_transNum= NULL,   imputeFlag_missingCTs = TRUE,   ctrl_genes = NULL,   svmClass_score_cutoff = -2,   molecular_distance_cutoff = NULL,   cellular_distance_cutoff = 20,   transcript_df = NULL,    transDF_fileInfo = transDF_fileInfo,    filepath_coln = 'file_path',    prefix_colns = c('slide','fov'),    fovOffset_colns = c('stage_X','stage_Y'),    pixel_size = 0.18,   zstep_size = 0.8,    transID_coln = NULL,   transGene_coln = \"target\",   cellID_coln = 'CellId',   spatLocs_colns = c('x','y','z'),   invert_y = TRUE,  # flip y axis of local image coordinates   extracellular_cellID = 0  ) #> Found 960 common genes among `refProfiles` and `counts`.  #> Extract distance cutoff from first input transcript data. #> 3 Dimension of spaital coordinates are provided. #> 2 individual per FOV files are provided in `transDF_fileInfo`, use the 1st file to calculate distance cutoffs #> `transID_coln` and `cellID_coln` of each per FOV transcript_df would be re-named based on `prefix_colns` = `slide`,`fov`. #> Use 2 times of average 2D cell diameter as cellular_distance_cutoff = 19.1980 for searching of neighbor cells. #> Identified 3D coordinates with variance.  #> Distribution of minimal molecular distance between 385 cells: 0, 0.16, 0.22, 0.29, 0.36, 0.44, 0.52, 0.63, 0.76, 0.84, 8.01, at quantile = 0%, 10%, 20%, 30%, 40%, 50%, 60%, 70%, 80%, 90%, 100%. #> Use 5 times of 90% quantile of minimal 3D molecular distance between picked cells as `molecular_distance_cutoff` = 4.2191 for defining direct neighbor cells. #> Use `molecular_distance_cutoff` = 4.2191 for defining direct neighbor cells based on molecule-to-molecule distance."},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runSegErrorEvaluation.html","id":null,"dir":"Reference","previous_headings":"","what":"runSegErrorEvaluation — runSegErrorEvaluation","title":"runSegErrorEvaluation — runSegErrorEvaluation","text":"modular wrapper flag cell segmentation error","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runSegErrorEvaluation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runSegErrorEvaluation — runSegErrorEvaluation","text":"","code":"runSegErrorEvaluation(   score_GeneMatrix,   transcript_df,   cellID_coln = \"UMI_cellID\",   transID_coln = \"UMI_transID\",   transGene_coln = \"target\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   flagModel_TransNum_cutoff = 50 )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runSegErrorEvaluation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runSegErrorEvaluation — runSegErrorEvaluation","text":"score_GeneMatrix gene x cell-type matrix log-like score gene cell type transcript_df data.frame transcript_ID, cell_ID, score, spatial coordinates cellID_coln column name cell_ID transcript_df transID_coln column name transcript_ID transcript_df transGene_coln column name target gene name transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates transcript_df flagModel_TransNum_cutoff cutoff transcript number spatial modeling identification wrongly segmented cells (default = 50)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runSegErrorEvaluation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runSegErrorEvaluation — runSegErrorEvaluation","text":"list two elements #' modStats_ToFlagCells, data.frame contains evaluation model statistics columns cell's potential segmentation error transcript_df, transcript data.frame 2 additional columns: tLLR_maxCellType cell types maxmium transcript score current segments score_tLLR_maxCellType corresponding transcript score transcript","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runSegErrorEvaluation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"runSegErrorEvaluation — runSegErrorEvaluation","text":"","code":"data(\"mini_transcriptDF\") data(\"example_CellGeneExpr\") data(\"example_refProfiles\") score_GeneMatrix <- scoreGenesInRef(   genes = intersect(colnames(example_CellGeneExpr), rownames(example_refProfiles)),    ref_profiles = pmax(example_refProfiles, 1e-5))  res <- runSegErrorEvaluation(   score_GeneMatrix= score_GeneMatrix,    transcript_df = mini_transcriptDF,    cellID_coln = 'UMI_cellID',    transID_coln = 'UMI_transID',   transGene_coln = 'target',   spatLocs_colns = c('x','y','z'),   #' cutoff of transcript number to do spatial modeling   flagModel_TransNum_cutoff = 50)  #> Found 960 common genes among transcript_df and score_GeneMatrix.  #> Found 1375 cells and assigned cell type based on the provided `refProfiles` cluster profiles. #> Run linear regreassion in 3 Dimension. #> Warning: Below model_cutoff = 50, skip 37 cells with fewer transcripts. Move forward with remaining 1338 cells."},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runSegRefinement.html","id":null,"dir":"Reference","previous_headings":"","what":"runSegRefinement — runSegRefinement","title":"runSegRefinement — runSegRefinement","text":"modular wrapper evalute transcript groups neighborhood, decide resegmentation operations execute","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runSegRefinement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runSegRefinement — runSegRefinement","text":"","code":"runSegRefinement(   score_GeneMatrix,   chosen_cells = NULL,   reseg_transcript_df,   reseg_cellID_coln = \"tmp_cellID\",   reseg_celltype_coln = \"group_maxCellType\",   transID_coln = \"transcript_id\",   transGene_coln = \"target\",   transSpatLocs_coln = c(\"x\", \"y\", \"z\"),   score_baseline = NULL,   lowerCutoff_transNum = NULL,   higherCutoff_transNum = NULL,   neighbor_distance_xy = NULL,   distance_cutoff = 2.7,   spatialMergeCheck_method = c(\"leidenCut\", \"geometryDiff\"),   cutoff_spatialMerge = 0.5,   leiden_config = list(objective_function = c(\"CPM\", \"modularity\"), resolution_parameter     = 1, beta = 0.01, n_iterations = 200),   config_spatNW_transcript = NULL,   return_intermediates = TRUE,   return_perCellData = TRUE,   includeAllRefGenes = FALSE,   seed_segRefine = NULL )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runSegRefinement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runSegRefinement — runSegRefinement","text":"score_GeneMatrix gene x cell-type matrix log-like score gene cell type chosen_cells cell_ID chosen cells need evaluate re-segmentation reseg_transcript_df data.frame transcript_id, target/geneName, x, y, cell_id transcript groups cell type maximum transcript scores transcript group reseg_cellID_coln column name cell_ID transcript groups transcript_df reseg_celltype_coln column name cell_type transcript groups transcript_df transID_coln column name transcript_ID transcript_df transGene_coln column name target gene name transcript_df transSpatLocs_coln column name 1st, 2nd, optional 3rd spatial dimension transcript transcript_df score_baseline named vector score baseline cell type listed neighborhood_df per cell transcript score higher baseline required call cell type high enough confidence lowerCutoff_transNum named vector transcript number cutoff cell type higher cutoff required keep query cell higherCutoff_transNum named vector transcript number cutoff cell type lower cutoff required keep query cell neighbor cell consistent cell type. neighbor_distance_xy maximum cell--cell distance x, y center query cells center neighbor cells direct contact, unit input spatial coordinate. Default = NULL use 2 times average 2D cell diameter. distance_cutoff maximum molecule--molecule distance within connected transcript group, unit input spatial coordinate (default = 2.7 micron). set NULL, pipeline first randomly choose 2500 cells 10 random picked ROIs search radius 5 times neighbor_distance_xy, calculate minimal molecular distance picked cells. pipeline use 5 times 90% quantile minimal molecular distance distance_cutoff. calculation slow recommended large transcript data.frame. spatialMergeCheck_method use either \"leidenCut\" (2D 3D) \"geometryDiff\" (2D ) method determine whether cell pair merging event allowed space (default = \"leidenCut\") cutoff_spatialMerge spatial constraint valid merging event two source transcript groups, default = 0.5 50% cutoff, set 0 skip spatial constraint evaluation merging. spatialMergeCheck_method = \"leidenCut\", minimal percentage transcripts shared membership query cell neighbor cells leiden clustering results valid merging event. spatialMergeCheck_method = \"geometryDiff\", maximum percentage white space change upon merging query cell neighbor cell valid merging event. leiden_config (leidenCut) list configuration pass reticulate igraph::cluster_leiden function, including objective_function, resolution_parameter, beta, n_iterations. config_spatNW_transcript (leidenCut) configuration list create spatial network transcript level, see manual createSpatialDelaunayNW_from_spatLocs details, set NULL use default config return_intermediates flag return intermediate outputs, including neighborhoodDF_ToReseg data.frame neighborhood evaluation, reseg_actions list resegmentation actions return_perCellData flag return gene x cell count matrix per cell DF updated mean spatial coordinates new cell type includeAllRefGenes flag include genes score_GeneMatrix returned updated_perCellExprs missing genes value 0 (default = FALSE) seed_segRefine seed transcript error correction step, default = NULL skip seed","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runSegRefinement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runSegRefinement — runSegRefinement","text":"list updated_transDF updated transcript_df updated_cellID updated_celltype columns based reseg_full_converter neighborhoodDF_ToReseg data.frame neighborhood environment low-score transcript groups, output get_neighborhood_content function, return return_intermediates = TRUE reseg_actions list 4 elements describing resegmenation performed original transcript_df group assignment transcripts listed groupDF_ToFlagTrans, output decide_ReSegment_Operations function, return return_intermediates = TRUE updated_perCellDT per cell data.table mean spatial coordinates, new cell type resegmentation action resegmentation, return return_perCellData = TRUE updated_perCellExprs gene x cell count sparse matrix updated transcript data.frame resegmentation, return return_perCellData = TRUE","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runTranscriptErrorDetection.html","id":null,"dir":"Reference","previous_headings":"","what":"runTranscriptErrorDetection — runTranscriptErrorDetection","title":"runTranscriptErrorDetection — runTranscriptErrorDetection","text":"modular wrapper identify transcript groups poor fit current cell segments space","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runTranscriptErrorDetection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runTranscriptErrorDetection — runTranscriptErrorDetection","text":"","code":"runTranscriptErrorDetection(   chosen_cells,   score_GeneMatrix,   transcript_df,   cellID_coln = \"CellId\",   transID_coln = \"transcript_id\",   transGene_coln = \"target\",   score_coln = \"score\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   model_cutoff = 50,   score_cutoff = -2,   svm_args = list(kernel = \"radial\", scale = FALSE, gamma = 0.4),   groupTranscripts_method = c(\"dbscan\", \"delaunay\"),   distance_cutoff = \"auto\",   config_spatNW_transcript = NULL,   seed_transError = NULL )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runTranscriptErrorDetection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runTranscriptErrorDetection — runTranscriptErrorDetection","text":"chosen_cells cell_ID chosen cells score_GeneMatrix gene x cell-type matrix log-like score gene cell type transcript_df data.frame transcript_ID, cell_ID, score, spatial coordinates cellID_coln column name cell_ID transcript_df transID_coln column name transcript_ID transcript_df transGene_coln column name target gene name transcript_df score_coln column name score transcript_df spatLocs_colns column names 1st, 2nd, optional 3rd spatial dimension transcript transcript_df model_cutoff cutoff transcript number spatial modeling (default = 50) score_cutoff cutoff score separate high low score transcripts (default = -2) svm_args list arguments pass svm function, typically involve kernel, gamma, scale groupTranscripts_method use either \"dbscan\" \"delaunay\" method group transcripts space (default = \"dbscan\") distance_cutoff maximum molecule--molecule distance within transcript group (default = \"auto\") config_spatNW_transcript configuration list create spatial network transcript level, see manual createSpatialDelaunayNW_from_spatLocs details, set NULL use default config seed_transError seed transcript error detection step, default = NULL skip seed","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/runTranscriptErrorDetection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runTranscriptErrorDetection — runTranscriptErrorDetection","text":"data frame transcripts chosen_cells , containing information transcript score classifications spatial group assignments well new cell/group ID downstream resegmentation.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/run_igraph_leiden.html","id":null,"dir":"Reference","previous_headings":"","what":"run_igraph_leiden — run_igraph_leiden","title":"run_igraph_leiden — run_igraph_leiden","text":"Run Leiden clustering version-compatible resolution argument.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/run_igraph_leiden.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run_igraph_leiden — run_igraph_leiden","text":"","code":"run_igraph_leiden(graph, ...)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/run_igraph_leiden.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run_igraph_leiden — run_igraph_leiden","text":"graph igraph object representing graph cluster. ... Additional arguments passed cluster_leiden(), objective_function, resolution_parameter, beta, initial_membership, n_iterations.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/run_igraph_leiden.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run_igraph_leiden — run_igraph_leiden","text":"clustering object returned cluster_leiden().","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/run_igraph_leiden.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"run_igraph_leiden — run_igraph_leiden","text":"function wraps igraph::cluster_leiden() ensures compatibility older (<2.1.0) newer versions igraph package renaming resolution_parameter argument resolution needed.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/scoreGenesInRef.html","id":null,"dir":"Reference","previous_headings":"","what":"scoreGenesInRef — scoreGenesInRef","title":"scoreGenesInRef — scoreGenesInRef","text":"calculate log-likilhood score gene based reference expression profiles return centered score matrix","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/scoreGenesInRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scoreGenesInRef — scoreGenesInRef","text":"","code":"scoreGenesInRef(genes, ref_profiles, flag_center = TRUE)"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/scoreGenesInRef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"scoreGenesInRef — scoreGenesInRef","text":"genes vector gene name score ref_profiles gene X cell_type expression matrix reference profiles flag_center flag center score matrix per gene return, default = TRUE","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/scoreGenesInRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"scoreGenesInRef — scoreGenesInRef","text":"loglik, gene X cell_type matrix centered loglik score gene","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/score_cell_segmentation_error.html","id":null,"dir":"Reference","previous_headings":"","what":"score_cell_segmentation_error — score_cell_segmentation_error","title":"score_cell_segmentation_error — score_cell_segmentation_error","text":"Score cell much transcripts change goodness--fit space.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/score_cell_segmentation_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"score_cell_segmentation_error — score_cell_segmentation_error","text":"","code":"score_cell_segmentation_error(   chosen_cells,   transcript_df,   cellID_coln = \"CellId\",   transID_coln = \"transcript_id\",   score_coln = \"score\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   model_cutoff = 50 )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/score_cell_segmentation_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"score_cell_segmentation_error — score_cell_segmentation_error","text":"chosen_cells cell_ID chosen cells transcript_df data.frame transcript_ID, cell_ID, score, spatial coordinates cellID_coln column name cell_ID transcript_df transID_coln column name transcript_ID transcript_df score_coln column name score transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates transcript_df model_cutoff cutoff transcript number spatial modeling (default = 50)","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/score_cell_segmentation_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"score_cell_segmentation_error — score_cell_segmentation_error","text":"data.frame columns cell_ID, cell id transcript_num, number transcripts given cell modAlt_rsq, summary(mod_alternative)$r.squared lrtest_ChiSq, lrtest chi-squared value lrtest_Pr, lrtest probability larger chi-squared value, p-value","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/score_cell_segmentation_error.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"score_cell_segmentation_error — score_cell_segmentation_error","text":"tLLRv2 score transcripts within cell,  run quadratic model: mod_alternative = lm(tLLRv2 ~ x + y + x2 + y2 +xy) 2D,  lm(tLLRv2 ~ x + y + z + x2 + y2 +z2 +xy + xz + yz) 3D null model: mod_null = lm(tLLRv2 ~ 1); run lmtest::lrtest(mod_alternative, mod_null). Return statistics mod_alternative$fitted.values (standard deviation minimal value), summary(mod_alternative)$r.squared well lrtest chi-squared value.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/transDF_to_perCell_data.html","id":null,"dir":"Reference","previous_headings":"","what":"transDF_to_perCell_data — transDF_to_perCell_data","title":"transDF_to_perCell_data — transDF_to_perCell_data","text":"get per cell expression matrix optional metadata like mean spatial coordinates cell types transcript data.frame","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/transDF_to_perCell_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"transDF_to_perCell_data — transDF_to_perCell_data","text":"","code":"transDF_to_perCell_data(   transcript_df,   transGene_coln = \"target\",   cellID_coln = \"updated_cellID\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   celltype_coln = \"updated_celltype\",   return_cellMeta = FALSE )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/transDF_to_perCell_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"transDF_to_perCell_data — transDF_to_perCell_data","text":"transcript_df transcript data.frame transGene_coln column name target gene name transcript_df cellID_coln column name cell_ID transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates transcript_df celltype_coln column name cell type transcript_df return_cellMeta flag return per cell data.table metadata like mean spatial coordinates cell types","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/transDF_to_perCell_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"transDF_to_perCell_data — transDF_to_perCell_data","text":"list perCell_DT per cell data.table mean spatial coordinates, cell type, return return_cellMeta = TRUE perCell_expression gene x cell count sparse matrix derived transcript data.frame resegmentation","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/update_transDF_ResegActions.html","id":null,"dir":"Reference","previous_headings":"","what":"update_transDF_ResegActions — update_transDF_ResegActions","title":"update_transDF_ResegActions — update_transDF_ResegActions","text":"Update transcript data.frame based resegmentation action, calculate new cell type mean per cell spatial coordinates","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/update_transDF_ResegActions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update_transDF_ResegActions — update_transDF_ResegActions","text":"","code":"update_transDF_ResegActions(   transcript_df,   reseg_full_converter,   score_GeneMatrix,   transGene_coln = \"target\",   cellID_coln = \"cell_ID\",   celltype_coln = \"cell_type\",   spatLocs_colns = c(\"x\", \"y\", \"z\"),   return_perCellDF = TRUE )"},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/update_transDF_ResegActions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update_transDF_ResegActions — update_transDF_ResegActions","text":"transcript_df data.frame transcript updated reseg_full_converter named converter update cell ID transcript_df, cell_ID name converted cell_ID value; discard cell_ID value = NA score_GeneMatrix gene x cell-type score matrix transGene_coln column name target gene name transcript_df cellID_coln column name cell_ID transcript_df celltype_coln column name cell type transcript_df spatLocs_colns column names 1st, 2nd optional 3rd dimension spatial coordinates transcript_df return_perCellDF flag return gene x cell count matrix per cell DF updated mean spatial coordinates new cell type","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/update_transDF_ResegActions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update_transDF_ResegActions — update_transDF_ResegActions","text":"list updated_transDF updated transcript_df updated_cellID updated_celltype column based reseg_full_converter perCell_DT per cell data.table mean spatial coordinates new cell type return_perCellDF = TRUE perCell_expression gene x cell count sparse matrix updated transcript data.frame return_perCellDF = TRUE","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/reference/update_transDF_ResegActions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"update_transDF_ResegActions — update_transDF_ResegActions","text":"Update transcript data.frame based resegmentation action get new cell type; return_perCellDF = TRUE, return gene x cell count matrix per cell data.frame mean per cell spatial coordinates new cell type.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/news/index.html","id":"fastreseg-103","dir":"Changelog","previous_headings":"","what":"FastReseg 1.0.3","title":"FastReseg 1.0.3","text":"Include option turn Y axis inversion pipeline functions. Add support gzip compressed transcript data file. Expand version compatibility igraph 2.1.0 .","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/news/index.html","id":"fastreseg-102","dir":"Changelog","previous_headings":"","what":"FastReseg 1.0.2","title":"FastReseg 1.0.2","text":"Fix 2d data failure runTranscriptErrorDetection() identified issue #39.","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/news/index.html","id":"fastreseg-101","dir":"Changelog","previous_headings":"","what":"FastReseg 1.0.1","title":"FastReseg 1.0.1","text":"Update DESCRIPTION github remotes include installation instructions R 4.3.x","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/news/index.html","id":"fastreseg-100","dir":"Changelog","previous_headings":"","what":"FastReseg 1.0.0","title":"FastReseg 1.0.0","text":"Addresses compatibility new latest.fovs additional column acquisition order Fixes error associated 1-cell-per-fov data non-standard-formatted transcript data.frame Add requirements specifications Switch GiottoClass package creating Delaunay spatial networks Move data used vignettes inst\\extdata folder, including example raw transcript files helper functions SMITAP objects Save outputs .rds instead .RData fastReseg_full_pipeline() wrapper","code":""},{"path":"https://nanostring-biostats.github.io/FastReseg/news/index.html","id":"fastreseg-011","dir":"Changelog","previous_headings":"","what":"FastReseg 0.1.1","title":"FastReseg 0.1.1","text":"First release version used nanopipeline Includes parallel computation multi-FOV processing pipeline wrapper functions","code":""}]
